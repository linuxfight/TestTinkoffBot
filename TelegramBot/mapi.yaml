openapi: 3.0.2
info:
  version: '1.15'
  title: Приём платежей
  contact:
    url: https://www.tinkoff.ru/kassa/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: /kassa/dev/assets/img/logo.svg
  description: "# Введение\n## Подключение интернет-эквайринга от Тинькофф Кассы\nИнтернет-эквайринг помогает принимать онлайн-платежи так, как удобно вам и покупателю: на сайте, в мобильном приложении, соцсетях, мессенджерах, по e-mail или СМС. Вы можете принимать оплату разными способами, возвращать и замораживать выплаты, настраивать рекуррентные платежи.\n\nЧтобы подключить интернет-эквайринг, оставьте [заявку на сайте Тинькофф](https://www.tinkoff.ru/kassa/) и заполните анкету компании или ИП. Подробности подключения можете узнать [в Тинькофф Помощи](https://www.tinkoff.ru/business/help/business-payments/internet-acquiring/how-involve/connect/?card=q1) или у персонального менеджера.\n\n## Способы интеграции интернет-эквайринга от Тинькофф Кассы\nИнтернет-эквайринг нужно интегрировать — настроить оплату на сайте или в приложении. Есть четыре способа интеграции:\n* Платежный модуль — для сайтов на CMS\n* Платежный виджет — для самописного сайта\n* SDK — для мобильного приложения\n* API — для разработки своей интеграции\n\nИнтеграцию можно выполнить самостоятельно или с помощью разработчика.\n\n### Платежный модуль\nСпособ интеграции интернет-эквайринга с сайтом, созданным на основе CMS. Вы устанавливаете модуль — на странице сайта появляется кнопка оплаты. Покупатель нажимает на кнопку и переходит на платежную форму с разными способами оплаты: банковскими картами, по Tinkoff Pay, SberPay, Mir Pay, СБП, Долями, в рассрочку. Вы можете выбрать, какие способы оплаты оставить в форме: все или некоторые.\n \nМодуль подходит, если ваш сайт собран на CMS — например, 1С-Битрикс, WordPress или Taplink. Тинькофф Касса поддерживает многие популярные CMS, в некоторые уже встроены модули — их устанавливать не нужно.\n\n[Инструкции по интеграции с помощью платежного модуля](https://www.tinkoff.ru/kassa/develop/cms/)\n\n### Платежный виджет\nСпособ интеграции интернет-эквайринга с самописным сайтом. Вы вставляете готовый код на страницу сайта — на этом месте появляется кнопка оплаты. Покупатель нажимает на кнопку и переходит на платежную форму с разными способами оплаты: банковскими картами, по Tinkoff Pay, SberPay, Mir Pay, СБП, Долями, в рассрочку. Вы можете выбрать, какие способы оплаты оставить в форме: все или некоторые.\n\nВиджет подходит в двух случаях:\n* ваш сайт самописный или на CMS, для которой в Тинькофф нет платежного модуля\n* вы не планируете принимать автоплатежи\n\nДля интеграции виджета потребуется помощь программиста. \n\n[Инструкция по интеграции с помощью виджета](https://www.tinkoff.ru/kassa/dev/widget/index.html)\n\n### Мобильный SDK\nСпособ интеграции интернет-эквайринга с мобильным приложением. Покупатель оплачивает товар без перехода в мобильный браузер, оставаясь внутри вашего приложения.\n\nС помощью SDK вы можете разместить платежную форму Тинькофф Кассы — со всеми или некоторыми способами оплаты. Также с помощью SDK вы можете отдельно встраивать способы оплаты — например, Tinkoff Pay или СБП — в вашу платежную форму. \n\nSDK подходит, если принимаете оплату в приложении на Android начиная с версии 7.0 или iOS начиная с версии 12.3. С инструкцией по подключению SDK в ЛК можно ознакомиться по ссылкам ниже:\n\n[Инструкция для Android начиная с версии 7.0](https://opensource.tinkoff.ru/tinkoff-mobile-tech/tinkoff-asdk-android)\n\n[Инструкция для iOS начиная с версии 12.3](https://opensource.tinkoff.ru/tinkoff-mobile-tech/tinkoff-asdk-ios)\n\n### API\nСамый гибкий и сложный способ интеграции интернет-эквайринга. Например, API подходит, если у вас самописный сайт и вы хотите настроить оплату под запросы бизнеса: совмещать в платежной форме разные способы оплаты, принимать рекуррентные платежи или подключать другие сервисы Тинькофф Кассы.\n\nДля интеграции потребуется помощь программиста.\n\n[Документация по API](https://www.tinkoff.ru/kassa/dev/payments/#section/Vvedenie/Rekomendacii-pri-integracii)\n\n## Платежная форма\nПлатежная форма - это готовый интерфейс с встроенными способами оплаты, который позволяет принимать платежи онлайн.\n\nДля использования платежной формы необходимо подключить интернет-эквайринг, настроить терминал и интегрировать платежную форму на ваш сайт одним из способов выше(кроме SDK)\n### Платежная форма в webview\nНекоторые webview не умеют обрабатывать DeepLink ссылки. Из-за этого способы оплаты, которые осуществляют переход в мобильное приложение во время платежа (СБП, Mir pay, Tinkoff pay), могут работать некорректно.\n\nВ случае использования платежной формы в webview необходимо учесть особенности вашей интеграции и сделать необходимые доработки для поддержки DeepLink. \n\nПо результатам доработок необходимо дополнительно протестировать корректную работу всех способов оплат. В случае обнаружения проблем, требуется связаться с разработчиками webview модуля для их устранения, либо рекомендуется отключить неработающие способы оплаты.\n**Ссылки с примерами решений**:\n1. [Первое решение(java,kotlin)](https://razorpay.com/docs/payments/payment-gateway/web-integration/standard/webview/upi-intent-android/#13-handle-deep-links-in-shouldoverrideurlloading-)\n2. [Второе решение(java)](https://stackoverflow.com/questions/25672330/how-to-enable-deep-linking-in-webview-on-android-app)\n\n#### Рекомендации по интеграции\nПлатформа IOS:\nЧтобы deeplink работал в web - есть 2 варианта решения:\n1. Использовать SFSafariViewController, он умеет открывать диплинки, дополнительная настройка не нужна.\n2. Если используете WKWebView он не умеет открывать диплинки из коробки, чтобы его научить, надо обработать открытие диплинка Тинькофф банка, пример описан ниже.\n\n**Пример реализации обработки открытия диплинка Тинькофф**   \n```\nnavigationDelegate = self\nfunc webView(\n    _ webView: WKWebView,\n    decidePolicyFor navigationAction: WKNavigationAction,\n    decisionHandler: @escaping (WKNavigationActionPolicy) -> Void\n) {\n    if let url = navigationAction.request.url, let scheme = url.scheme {\n        if scheme != \"https\" && scheme != \"http\" {\n            UIApplication.shared.open(url)\n        }\n    }\n    decisionHandler(.allow)\n}\n```\n\n### Платежная форма в iframe\nНе рекомендуется использовать платежную форму в iframe для мобильных версий сайтов, т.к. у кнопочных способов оплаты могут возникать проблемы с открытием DeepLink и переходов в мобильное приложение для оплаты (СБП, Mir pay, Tinkoff pay). Это связано с тем, что Iframe является изолированным контейнером, из-за этого переходы на сторонние ссылки не могут быть обработаны внутри iframe. \n\nЕсли в мобильной версии сайта использование iframe обязательно, вам необходимо сделать доработки согласно инструкции ниже, чтобы вы могли использовать кнопочные способы оплаты. Она позволит произвести переход в стороннее приложение. Доработки представляют собой скрипт \"снаружи\" iframe, который получит сообщение о переходе от iframe и вызовет его на основной странице.\n\nПосле реализации доработок необходимо протестировать корректную работу всех способов оплат. В случае проблем и вопросов вы можете обратиться в нашу поддержку acq_help@tinkoff.ru\n\nВ десктопной версии iframe кнопочные способы оплаты будут работать без специальных доработок. \n\n<details><summary><b>Инструкция по доработкам для mobile iframe</b></summary>\n<br>\nIframe является изолированным контейнером, из-за этого переходы на сторонние ссылки не могут быть обработаны внутри iframe (переход будет внутри iframe). Чтобы произвести переход в стороннее приложение требуется скрипт \"снаружи\" iframe, который получит сообщение о переходе от iframe и вызовет его на основной странице.\n\nВ случае если у вас подключены способы оплаты, использующие deeplink, а именно: Tinkoff pay, СБП или Mir pay, то в процессе оплаты может возникать ошибка. \n\n##### Информация\nСкрипт общается с фреймом по средствам *window.postMessage()*.\n\nДобавление скрипта решает проблему передачи ссылки на ресурс платежного сервиса, для способов оплаты использующих DeepLink. Данная проблема может возникнуть при попытке передачи ссылки в браузер Клиента, из контейнера Платежной формы расположенного в теге ``<iframe>``.\n##### Установка\n**Не рекомендуется** копировать скрипт полностью в свою сборку. Интерфейс общения с Платежной Формой может изменится, поэтому просьба всегда загружать скрипт из [предоставленного URL](https://kassa.cdn-tinkoff.ru/integration/integration.js)\n\nПростая интеграция (Если используется уже созданный iframe на странице):   \nДобавьте ссылку на код скрипта iframe.js в HTML-код страницы сайта, на которой располагаться iframe c Платежной формой.\nРекомендуем разместить его в конце body после объявления тега iframe.\n```\n<iframe id=\"payment-form\"></iframe>\n \n<script src=\"https://kassa.cdn-tinkoff.ru/integration/integration.js\"></script>\n<script>\n  const paymentForm = new PaymentForm.Integration({iframe: {element: document.getElementById('payment-form')}});\n</script>\n```\nДинамическая интеграция (Если iframe генерируется динамически):\n```\n<div id=\"payment-form-container\"></div>\n \n<script>\n  // // Получаем и присваиваем переменной uuid значение уникального идентификатора платежа ( передается в path параметра PaymentURL )\n  const uuid = \"\"; \n  // Получаем элемент контейнера в который будет встроен iframe\n  const contentContainer = document.getElementById('payment-form-container')\n \n  // Загрузите скрипт\n  const script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.async = false;\n  script.src = \"https://kassa.cdn-tinkoff.ru/integration/integration.js\";\n  script.onload = (): void => {\n     // Инициализируйте скрипт\n     const paymentForm = new PaymentForm.Integration({iframe: {element: document.getElementById('payment-form')}});\n \n     // Создайте iframe\n     const element = document.createElement(\"iframe\");\n     element.src = \"https://securepayments.tinkoff.ru/\" + uuid;\n     if (contentContainer) {\n        contentContainer.appendChild(element);\n     }\n  };\n                \n  \n  document.getElementsByTagName(\"body\")[0].appendChild(script);\n</script>\n```\n##### Настройка\nКласс Integration принимает 2 аргумента:\n1. HTMLIFrameElement - iframe DOM элемент\n2. config - необязательный аргумент с конфигурацией PaymentFormIntegrationConfig\n\nPaymentFormIntegrationConfig:   \n```\ninterface PaymentFormIntegrationConfig {\n  iframe: {\n    element: HTMLIFrameElement;\n    /**\n     * Используется если скрипт встраивается в промежуточный iframe\n     */\n    proxy?: true;\n    /**\n     * Вызывается в момент получения deepLink из ПФ\n     * Стандартное значение: (url) => {window.location.href = url}\n     * @param url\n     */\n    deepLinkRedirectCallback?: (url: string) => void;\n    /**\n     * Вызывается в момент получения exit из ПФ\n     * Например при нажатии кнопки \"Вернуться в магазин\"\n     * Стандартное значение: (url) => {window.location.href = url}\n     * @param url\n     */\n    exitRedirectCallback?: (url: string) => void;\n  };\n}\n```\nЕсли Вам не требуется перенаправлять родительскую страницу на возврат в магазин, а требуется просто закрыть модальное окно с платежной формой - замените этот параметр конфигурации\n\nПример инициализации скрипта с конфигурацией:   \n```\nconst paymentForm = new PaymentForm.Integration({\n  iframe: {\n    element: document.getElementById('payment-form'),\n    exitRedirectCallback: (url) => {\n      // Вызов закрытия модального окна\n    }\n  }\n});\n```\n##### Iframe внутри iframe\nБываю случаи когда приложение используется внутри iframe, который находится внутри другого iframe. В таком случае необходимо встроить скрипт с ключом proxy: true во все промежуточные iframe.\nПример инициализации скрипта для основной страницы:   \n```\n<iframe id=\"payment-form\"></iframe>\n \n<script src=\"https://kassa.cdn-tinkoff.ru/integration/integration.js\"></script>\n<script>\n  const paymentForm = new PaymentForm.Integration({iframe: {element: document.getElementById('payment-form')}});\n</script>\n```\nПример инициализации скрипта для вложенного iframe: \n```\n<iframe id=\"payment-form\"></iframe>\n \n<script src=\"https://kassa.cdn-tinkoff.ru/integration/integration.js\"></script>\n<script>\n  const paymentForm = new PaymentForm.Integration({iframe: {element: document.getElementById('payment-form'), proxy: true}});\n</script>\n```\n\"Промежуточный\" скрипт, будет перенаправлять сообщения в каждый следующий iframe.\n\nКоллбеки событий будут отрабатывать вызываться в \"промежуточных\" iframe только в случае их переопределения в config.\n##### Как работает скрипт\nОбщение между формой и родителем, происходит через *window.postMessage()*.\n\n1. После успешной загрузки, платежная форма внутри iframe отправляет сообщение loaded родителю.\n2. После получения loaded из ПФ, скрипт отправляет сообщение ready на Платежную форму, таким образом происходит рукопожатие и платежная форма определяет что может отобразить кнопочные методы оплаты\n3. Действиями Клиента на Платежной форме вызывается способ оплаты возвращающий DeepLink на ресурс платежного сервиса.\n4. Платежная форма, передает DeepLink в целевое окно клиента, с помощью события deepLink\n5. Целевое окно выполняет редирект Клиента, по ссылке полученной в DeepLink, с помощью вызова *deepLinkRedirectCallback*\n6. Аналогично передаются и другие сообщения\n\n</details>\n\n### Кастомизация на платежной форме\nНа платежной форме доступна функция кастомизации, которая позволяет настроить форму под себя и своих клиентов. Для установки кастомизации обратитесь к вашему персональному менеджеру и передайте пожелания по настройкам \n\n#### Список доступных настроек кастомизации: \n|**Возможности кастомизации** | **Доп. описание**|\n|--- | ---|\n|Управление способами оплаты | <li>менять порядок способов оплаты (кроме Tinkoff pay)</li><li>\_сворачивать/разворачивать блоки оплаты (оплата картой и рассрочка)\_</li><li>менять количество отображаемых способов с помощью кнопки \"еще\" (минимум - один способ, максимум - все доступные на ПФ)</li>|\n|Брендирование UI платежной формы | <li>добавлять лого своей компании на ПФ (логотип отобразится рядом с суммой заказа)\_</li><li>управлять цветами кнопок (кнопка \"Оплатить\" и другие кнопки со страниц статусов и модальных окон)</li>|\n|Управление блоком детализации (информация о заказе и магазине) | <li>делать блок свернутым и развернутым по-умолчанию</li><li>\_скрывать\_ блок с детализацией на ПФ</li><li>менять порядок строк в детализации</li>|\n|Управление светлой и темной темой | <li>показывать темную или светлую тему по-умолчанию</li><li>отключать темной/светлой темы</li>|\n\n\n<!--#### Установить последнюю версию Acquiring SDK\n <style>\n.block {\ntext-decoration: none;\npadding: 2rem;\nmargin: 2rem;\nborder: 0.2rem solid #dddbd9;\nborder-radius: 1rem;\nbox-shadow: 0 1.5rem 0.5rem -0.5rem rgba(70,70,94,.1); \nposition: auto;  overflow: auto; \n}\n\n.ios_upd {\ntext-decoration: none;\npadding: 10px;\nmargin: 10px;\nborder: 1px solid #949996;\nborder-radius: 1rem;\nbox-shadow: 0 1.5rem 0.5rem -0.5rem rgba(70,70,94,.1); \nposition: auto;  overflow: auto;\ndisplay: none;\n}\n.android_upd {\ntext-decoration: none;\npadding: 10px;\nmargin: 10px;\nborder: 1px solid #949996;\nborder-radius: 1rem;\nbox-shadow: 0 1.5rem 0.5rem -0.5rem rgba(70,70,94,.1); \nposition: auto;  overflow: auto;\ndisplay: none;\n}\np:hover + .ios_upd {\ndisplay: block;\n}\np:hover + .android_upd {\ndisplay: block;\n}\n.updtext {\n\ttext-decoration: underline;\n\ttext-decoration-style: dotted;\n}\n</style>\n<div class=\"block\">\n\tIOS\n\t<br>\n\tРелиз 3.1.1 от 12.09.2023\n\t<br>\n\t<a href=\"https://github.com/tinkoff-mobile-tech/AcquiringSdk_IOS\">Ссылка на скачивание</a>\n\t<p class=\"updtext\">Что изменилось (?)</p>\n\t\t<div class=\"ios_upd\">\n\t\t\t<ul>\n\t\t\t\t<li>Новая фича </li>\n\t\t\t\t<li>ещё одна новая фича</li>\n\t\t\t\t<li>ещё одна</li>\n\t\t\t</ul>\n\t\t</div>\n</div>\n<div class=\"block\">\n\tAndroid\n\t<br>\n\tРелиз 3.1.2 от 12.09.2023\n\t<br>\n\t<a href=\"https://github.com/tinkoff-mobile-tech/AcquiringSdkAndroid\">Ссылка на скачивание</a>\n\t<p class=\"updtext\">Что изменилось (?)</p>\n\t\t<div class=\"android_upd\">\n\t\t\t<ul>\n\t\t\t\t<li>Новая фича </li>\n\t\t\t\t<li>ещё одна новая фича</li>\n\t\t\t\t<li>ещё одна</li>\n\t\t\t</ul>\n\t\t</div>\n</div> -->\n\n## Инструкции по безопасности при интеграции\nУбедитесь, что вы используете последнюю версию интеграции, а также [генерируете и передаете корректный токен](https://www.tinkoff.ru/kassa/dev/payments/#section/Podpis-zaprosa) независимо от способа интеграции. <br>Если ваш сайт собран на CMS, то необходимо использовать новейшую версию платежного модуля, доступную на [сайте Тинькофф Кассы](https://www.tinkoff.ru/kassa/develop/cms/) — это доступный источник актуальных версий. Современные модули для популярных CMS генерируют корректный токен автоматически.\n\nТакже мы расписали несколько дополнительных обязательных мер, которые необходимо соблюдать при интеграции с MAPI, а именно: \n\n1. Наиболее безопасный способ передачи данных от Мерчанта в MAPI — прямая интеграция бэкенда Мерчанта с бэкендом Тинькофф Кассы. В этом случае злоумышленник сможет перехватить запрос только если окажется в локальной сети Мерчанта;\n\n2. При любых способах интеграции с MAPI (в том числе и с помощью нашего платежного виджета) необходимо сверять параметры созданных заказов. В случае выявления расхождений между суммой операции, инициированной клиентом, и суммой совершенной операции, не осуществляйте доставку товара клиенту и незамедлительно уведомите Тинькофф банк об этом. Для сверки параметров есть несколько способов:\n\t<br> 2.1. Получение нотификаций:\n\t\n\t- **По e-mail**: на указанную почту придет письмо при переходе платежа в статус «CONFIRMED»;\n\t\n\t- **По http**: MAPI будет отправлять POST-запрос при каждом изменении статуса платежа на URL, указанный в настройках терминала.\n\t\n\t<br> 2.2. Вызов метода GetState, который возвращает основные параметры и текущий статус платежа. Рекомендуется сверять/валидировать дополнительные данные заказа - `PaymentId` и `Amount`.\n\n3. Обновляйте модули для CMS. Современные модули для популярных CMS сверяют суммы заказов автоматически.\n\nЕсли на вашем сайте не применены описанные выше меры безопасности или используете программное обеспечение для интеграции, полученное не с [сайта Тинькофф Кассы](https://www.tinkoff.ru/kassa/develop/), вы самостоятельно отвечаете за возможные риски и неблагоприятные последствия, связанные с использованием такого программного обеспечения.\n\n## Обработка карточных данных\nПлатежные системы разработали требования к безопасности карточных данных клиентов - **Payment Card Industry Data Security Standard** (PCI DSS). Компания должна пройти сертификацию, чтобы подтвердить надежность управления карточной информацией.\n\nЕсли у вас нет сертификации PCI DSS, вы можете использовать платежную форму Тинькофф Кассы. В этом случае, все операции, связанные с обработкой критичных данных производятся на стороне Тинькофф Кассы. Мерчанту достаточно настроить интеграцию с MerchantAPI и инициализировать платеж. Клиент будет перенаправлен на платежную форму, в которую он сможет ввести данные карты. Когда платеж завершится, клиент снова увидит сайт Мерчанта. Подробную информацию о подключении  эквайринга смотрите в разделе Non PCI DSS. \n\nЕсли ваш ресурс соответствует требованиям PCI DSS, то вы можете собирать и хранить карточные данные клиентов. В таком случае, MerchantAPI получает зашифрованные карточные данные от Мерчанта. Подробную информацию о подключении  такого способа смотрите в разделе PCI DSS.\n\n# Передача признака инициатора операции\nПлатежные системы хотят понимать, кем была инициирована карточная операция. Особенно остро эта необходимость проявляется в случае проведения операций без 3ds и по сохраненным реквизитам.\n\nДля выполнения требования регулятора мы добавили в метод /Init новый атрибут OperationInitiatorType. В значении этого атрибута ожидаем получать признак того, кем была инициирована операция и какой способ предоставления реквизитов был использован.\n\nПодробное описание сценариев проведения операций, значений OperationInitiatorType, взаимосвязь с другими атрибутами и типами терминалов:\n|Тип операции и инициатор|Описание|Сценарий карточной операции|OperationInitiatorType|RebillId в /Charge|Recurrent в /Init|AFT терминал|ECOM терминал|\n|---|---|---|---|---|---|---|---|\n|Сustomer Initiated Credential-Not-Captured (CIT CNC)|Инициированная покупателем оплата без сохранения реквизитов карты для последующего использования|Стандартный платеж|0|null|N|Разрешено|Разрешено|\n|Сustomer Initiated Credential-Captured (CIT CC)|Инициированная покупателем оплата c сохранением реквизитов карты для последующего использования|Стандартный платеж с созданием родительского рекуррентного платежа|1|null|Y|Разрешено|Разрешено|\n|Сustomer Initiated Credential-on-File (CIT COF)|Инициированная покупателем оплата по сохраненным реквизитам карты (ранее была проведена операция с сохранением реквизитов CIT CC)|Рекуррентный платеж, инициированный покупателем|2|not null|N|Запрещено|Разрешено|\n|Merchant Initiated Credential-on-File, Recurring (CIT COF R)|Инициированные торговым предприятием повторяющиеся платежи **без графика** (ранее была проведена операция с сохранением реквизитов CIT CC). Применяются для оплаты коммунальных услуг, платежей за услуги связи, кабельное/спутниковое телевидение и т.п. Сумма может быть определена заранее или становится известна непосредственно перед оплатой|Рекуррентный платеж, инициированный торговым предприятием|R|not null|N|Запрещено|Разрешено|\n|Merchant Credential-on-File, Installment (CIT COF I)|Инициированные торговым предприятием повторяющиеся платежи **по графику** (ранее была проведена операция с сохранением реквизитов CIT CC). Применяется для платежей в рассрочку по товарному кредиту, для оплаты страховки в рассрочку, для погашения кредита в соответствии с графиком платежей. График платежей может быть изменен по соглашению сторон, т.е. суммы и даты платежей должны быть известны плательщику (держателю карты) до момента проведения операции.|Рекуррентный платеж, инициированный торговым предприятием|I|not null|N|Разрешено|Запрещено|\n\n# Какими терминами пользуемся в документации?\n| **Термин** | Определение |\n| ------ | -------- |\n| **Клиент** | Физлицо, производящее перевод с использованием банковской карты на сайте Мерчанта |\n| **Мерчант** | Бизнес, принимающий и осуществляющий переводы по банковским картам на своем сайте |\n| **Тинькофф Касса** | Сервис, помогающий проводить выплату клиенту-физлицу |\n| **Эмитент** | Банк, выпустивший карту клиента-физлица |\n| **PCI DSS**| Международный стандарт безопасности, созданный для защиты данных банковских карт |\n| **3-DSecure** | Протокол, который используется как дополнительный уровень безопасности для онлайн-кредитных и дебетовых карт. 3-D Secure добавляет ещё один шаг аутентификации для онлайн-платежей |\n| **Терминал** | Точка приема платежей Мерчанта (в общем случае привязывается к сайту, на котором осуществляется прием платежей). Далее в этой документации описан протокол для терминала мерчанта. <br> Для проведения тестов используются данные тестового терминала TinkoffBankTest (пароль аналогичен) |\n| **ККМ** | Контрольно-кассовая машина|\n|**Личный кабинет Мерчанта**|[Веб-приложение](https://business.tinkoff.ru/oplata/main), в котором Мерчант управляет интернет-эквайрингом - настраивает параметры терминалов, подтверждает или отменяет платежи, анализирует статистику|\n\n\n# Параметры терминала\nКаждый терминал обладает свойствами, которые влияют на те или иные аспекты приёма платежей. Эти свойства настраиваются при подключении интернет-эквайринга и могут быть изменены в Личном кабинете Мерчанта.\n\nВ таблице ниже перечислены основые параметры приёма платежей для терминала\n\n|Название параметра|Формат|Описание|\n|---|---|---|\n|TerminalKey|20 символов (чувствительно к регистру)|Уникальный символьный ключ терминала. Устанавливается Тинькофф Кассой|\n|Success URL|250 символов(чувствительно к регистру)| URL на веб-сайте Мерчанта, куда будет переведен клиент в случае успешной оплаты <br> —   true - платеж завершился успешно <br> — false - платеж не завершился *\n|Fail URL| 250 символов(чувствительно к регистру)|URL на веб-сайте Мерчанта, куда будет переведен клиент в случае неуспешной оплаты *\n|Success Add Card URL| 250 символов (чувствительно к регистру)|URL на веб-сайте Мерчанта, куда будет переведен клиент после успешной привязки карты *|\n|Fail Add Card URL| 250 символов(чувствительно к регистру)|URL на веб-сайте Мерчанта, куда будет переведен клиент после неуспешной привязки карты *|\n|Notification URL| 250 символов(чувствительно к регистру)|URL на веб-сайте Мерчанта, куда будет отправлен POST запрос о статусе выполнения вызываемых методов. Только для методов **Authorize**, **FinishAuthorize**, **Confirm**, **Cancel**|\n|Валюта терминала|3 символа| Валюта, в которой будут происходить списания по данному терминалу, если иное не передано в запросе|\n|Активность терминала|Рабочий /Неактивный /Тестовый|Определяет режим работы данного терминала|\n|Password |20 символов(чувствительно к регистру)|Используется для подписи запросов/ответов. Является секретной информацией, известной только Мерчанту и Тинькофф Кассе. Пароль находится в [личном кабинете](https://business.tinkoff.ru/oplata/main) мерчанта\n|Отправлять нотификацию на FinishAuthorize|Да/Нет| Определяет, будет ли отправлена нотификация на выполнение метода **FinishAuthorize** (по умолчанию да)|\n|Отправлять нотификацию на Completed|Да/Нет| Определяет, будет ли отправлена нотификация на выполнение метода **AttachCard** (по умолчанию Да)|\n|Отправлять нотификацию на Reversed|Да/Нет| Определяет, будет ли отправлена нотификация на выполнение метода **Cancel** (по умолчанию Да)|\n\n\\* *в URL можно указать необходимые параметры в виде ${<параметр>}, которые будут переданы на URL\nметодом GET*\n\n# Подпись запроса\nПеред выполнением запроса MAPI проверяет, можно ли доверять его инициатору. Для этого сервер проверяет подпись запроса. В MAPI используется механизм подписи с помощью токена. Мерчант должен добавлять токен к каждому запросу, где это требуется. \n\n> В описании входных параметров для каждого метода мы указали, нужно подписывать запрос или нет. Токен формируется на основании тех полей, которые присутствуют в запросе, поэтому токены для каждого запроса уникальные, и не совпадают никогда.\n\n**Токен** в MAPI - это строка, в которой Мерчант зашифровал данные своего запроса с помощью пароля. Для создания токена Мерчант использует пароль из Личного кабинета мерчанта.\n\nРассмотрим на примере  процесс шифрования тела запроса для метода Init:\n```json\n{\n  \"TerminalKey\": \"MerchantTerminalKey\",\n  \"Amount\": 19200,\n  \"OrderId\": \"21090\",\n  \"Description\": \"Подарочная карта на 1000 рублей\",\n  \"Token\": \"68711168852240a2f34b6a8b19d2cfbd296c7d2a6dff8b23eda6278985959346\",\n  \"DATA\": {\n    \"Phone\": \"+71234567890\",\n    \"Email\": \"a@test.com\"\n  },\n  \"Receipt\": {\n    \"Email\": \"a@test.ru\",\n    \"Phone\": \"+79031234567\",\n    \"Taxation\": \"osn\",\n    \"Items\": [\n      {\n        \"Name\": \"Наименование товара 1\",\n        \"Price\": 10000,\n        \"Quantity\": 1,\n        \"Amount\": 10000,\n        \"Tax\": \"vat10\",\n        \"Ean13\": \"303130323930303030630333435\"\n      },\n      {\n        \"Name\": \"Наименование товара 2\",\n        \"Price\": 3500,\n        \"Quantity\": 2,\n        \"Amount\": 7000,\n        \"Tax\": \"vat20\"\n      },\n      {\n        \"Name\": \"Наименование товара 3\",\n        \"Price\": 550,\n        \"Quantity\": 4,\n        \"Amount\": 4200,\n        \"Tax\": \"vat10\"\n      }\n    ]\n  }\n}\n```\n\nЧтобы зашифровать данные запроса Мерчант должен выполнить следующие шаги:\n1. Собрать массив передаваемых данных в виде пар Ключ-Значения. В массив нужно добавить только параметры корневого объекта. Вложенные объекты и массивы не участвуют в расчете токена. В примере ниже в массив включены параметры `TerminalKey`, `Amount`, `OrderId`, `Description`  и исключен объект `Receipt` и `DATA`.\n``` JSON\n[{\"TerminalKey\": \"MerchantTerminalKey\"},{\"Amount\": \"19200\"},{\"OrderId\": \"21090\"},{\"Description\": \"Подарочная карта на 1000 рублей\"}]\n```\n\n2. Добавить в массив пару {`Password`, Значение пароля}. Пароль можно найти в личном кабинете Мерчанта\n``` JSON\n[{\"TerminalKey\": \"MerchantTerminalKey\"},{\"Amount\": \"19200\"},{\"OrderId\": \"21090\"},{\"Description\": \"Подарочная карта на 1000 рублей\"},{\"Password\": \"usaf8fw8fsw21g\"}]\n```\n\n3. Отсортировать массив по алфавиту по ключу.\n```JSON\n[{\"Amount\": \"19200\"},{\"Description\": \"Подарочная карта на 1000 рублей\"},{\"OrderId\": \"21090\"},{\"Password\": \"usaf8fw8fsw21g\"},{\"TerminalKey\": \"MerchantTerminalKey\"}]\n```\n\n4. Конкатенировать только **значения** пар в одну строку\n```JSON\n\"19200Подарочная карта на 1000 рублей21090usaf8fw8fsw21gMerchantTerminalKey\"\n```\n\n5. Применить к  строке хеш-функцию SHA-256 (с поддержкой UTF-8)\n```JSON\n\"0024a00af7c350a3a67ca168ce06502aa72772456662e38696d48b56ee9c97d9\"\n```\n\n6. Добавить получившийся результат в значение параметра `Token` в тело запроса и отправить запрос\n```JSON\n{\n  \"TerminalKey\": \"MerchantTerminalKey\",\n  \"Amount\": 19200,\n  \"OrderId\": \"21090\",\n  \"Description\": \"Подарочная карта на 1000 рублей\",\n  \"DATA\": {\n    \"Phone\": \"+71234567890\",\n    \"Email\": \"a@test.com\"\n  },\n  \"Receipt\": {\n    \"Email\": \"a@test.ru\",\n    \"Phone\": \"+79031234567\",\n    \"Taxation\": \"osn\",\n    \"Items\": [\n      {\n        \"Name\": \"Наименование товара 1\",\n        \"Price\": 10000,\n        \"Quantity\": 1,\n        \"Amount\": 10000,\n        \"Tax\": \"vat10\",\n        \"Ean13\": \"303130323930303030630333435\"\n      },\n      {\n        \"Name\": \"Наименование товара 2\",\n        \"Price\": 20000,\n        \"Quantity\": 2,\n        \"Amount\": 40000,\n        \"Tax\": \"vat20\"\n      },\n      {\n        \"Name\": \"Наименование товара 3\",\n        \"Price\": 30000,\n        \"Quantity\": 3,\n        \"Amount\": 90000,\n        \"Tax\": \"vat10\"\n      }\n    ]\n  },\n  \"Token\": \"0024a00af7c350a3a67ca168ce06502aa72772456662e38696d48b56ee9c97d9\"\n}\n```\nПроверить корректность формирования токена можно сервисом https://tokentcs.web.app\n\n> Помимо этого информацию о корректности токена можно проверить в ЛК ИЭ в разделе \"Операции\".\nВыберите нужный заказ, затем \"Дополнительная информация о заказе\", поле \"inittokenisvalid\". Если значение в этом поле будет \"true\", это означает, что токен валидный. Если \"false\", то токен передан некорректный.\n"
servers:
  - url: https://securepay.tinkoff.ru
    description: production
security: []
tags:
  - name: Сценарии оплаты по карте
    description: |-
      ## Правила работы

      Прием платежей осуществляется вызовом методов с передачей параметров методом POST в формате JSON. Все методы и передаваемые параметры являются чувствительными к регистру.

        
      Для POST-запроса в заголовке должен присутствовать `Content Type: application/json`.
      URL: https://securepay.tinkoff.ru/v2/
        

      ## Сценарии платежа
      Основная сущность в интернет-эквайринге Тинькофф Кассы - это **платеж**. В зависимости от настроек терминала платеж может идти по разным сценариям.

      Если Мерчант хочет получить деньги сразу после завершения оплаты, тогда терминал должен быть настроен на приём **одностадийных платежей**. Другой способ - **двухстадийный платеж**. После оплаты деньги заблокируются на карте клиента, а Мерчант затем подтверждает платёж в удобный ему момент.  

      >Настроить способ приема на терминале можно в Личном кабинете Мерчанта, либо указать нужный тип при вызове метода `Init` в параметре `PayType`.

      ### Стандартный платеж для мерчантов с PCI DSS
      #### Инициализация платежа
      Для того, чтобы создать платеж, Мерчант должен инициировать платеж методом `Init`, в котором передается сумма платежа и номер заказа.  

      При создании платежа (вызов метода /Init), в объекте DATA в атрибуте OperationInitiatorType необходимо передавать признак инициатора операции. См. метод [Init](#tag/Standartnyj-platyozh/paths/~1Init/post).

      В ответ MAPI создаст новый платеж в статусе **NEW** и вернёт обратно его идентификатор в параметре `PaymentId`.

      На следующем этапе Мерчант вызвает метод `Check3DSVersion`, в котором передает зашифрованные карточные данные клиента и `PaymentId`. Это нужно для проверки версии протокола 3D-Secure по карте. Она может быть либо версии 1.0, либо 2.0.

      Если в ответе метода `Check3DSVersion` есть параметр `ThreeDSMethodURL`, то браузер клиента должен вызывать ресурс, адрес которого пришел в параметре >`ThreeDSMethodURL`. В запросе нужно передать строковый параметр `threeDSMethodData`. Эта строка - закодированный в формате `base64` JSON-объект с параметрами:
      |Название параметра|Тип данных|Описание|
      |---|---|---|
      |threeDSMethodNotificationURL|string|Обратный адрес, на который будет >отправлен запрос после прохождения `3DS Method`|
      |threeDSServerTransID|string|Идентификатор транзакции из ответа метода `Check3DSVersion`|

      Браузер должен вызвать `3DS Method` в скрытом iframe и передать данные в формате `x-www-form-urlencoded`.

      Пример запроса на `ThreeDSMethodURL`:

      ``` js
      <body onload="document.form.submit()">
      <form name="form" action="{ThreeDSMethodURL}" method="post" >
      <input type="hidden" name="threeDSMethodData" value="eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6IjU2ZTcxMmE1LTE5MGEtNDU4OC05MWJjLWUwODYyNmU3N2M0NCIsInRocmVlRFNNZXRob2ROb3RpZmljYXRpb25VUkwiOiJodHRwczovL3Jlc3QtYXBpLXRlc3QudGlua29mZi5ydS92Mi9Db21wbGV0ZTNEU01ldGhvZHYyIn0">
      </form>
      </body>
      ```

      Пример декодированного значения `threeDSMethodData`:
      ```json
      {

      "threeDSServerTransID":"56e712a5-190a-4588-91bc-e08626e77c44",
      "threeDSMethodNotificationURL":"https://rest-api-test.tinkoff.ru/v2/>Complete3DSMethodv2"

      }
      ```

        

      ### Стандартный платеж

      За проведение платежа отвечает метод - `FinishAuthorize`. Через него Мерчант передает в MAPI карточные данные клиента, таким образом продолжая обработку платежа.

        

      >Если платеж **одностадийный**, то после вызова метода деньги будут списаны с карты клиента.
      >
      >Если платеж **двухстадийный**, то после вызова метода деньги будут заблокированы на карте клиента. Мерчант должен дополнительно подтвердить списание, вызвав метод `Confirm`.

        

      В ответ MAPI вернет один из возможных статусов:

      |Статус|Описание|Доступные действия|
      |---|---|---|
      |AUTH_FAIL|Неуспешная авторизация|Провести платеж заново|
      |REJECTED|Платеж отклонен|Провести платеж заново|
      |CONFIRMED|Успешный одностадийный платеж|-|
      |AUTHORIZED|Успешный двухстадийный платеж|Подтвердить платеж|
      |3DS_CHECKING|Требуется подтверждение платежа по 3D-Secure|<ul><li>Отменить платеж (действие доступно для клиента)</li><li>Пройти подтверждение (действие доступно для клиента)</li></ul>|


      #### Без 3DS-подтверждения

      Если по платежу не требуется проходить подтверждение 3DS, то MAPI в ответе `FinishAuthorize` вернет один из трех конечных статусов платежа:

      - **CONFIRMED** (при одностадийном платеже);

      - **AUTHORIZED** (при двухстадийном платеже);

      - **REJECTED** (при отказе в проведении платежа).

        

      #### C 3DS-подтверждением

      Если в ответе метода `FinishAuthorize` вернулся статус платежа **3DS_CHECKING**, то это означает, что требуется пройти проверку 3D-Secure. Для этого Мерчант должен сформировать запрос в сервис аутентификации банка, выпустившего карту. Адрес сервиса возвращается в ответе `FinishAuthorize` в параметре `ACSUrl`. Вместе с этим требуется перенаправить клиента на эту же страницу `ACSUrl` для прохождения 3DS.

      В заголовке запроса требуется передать параметр `Content-Type` со значением ` application/x-www-form-urlencoded`. Набор параметров в теле запросе зависит от версии протокола 3DS по карте.

      **Важно:** Проведение тестовых платежей возможно только на тестовом окружении

      ##### 3DS 1.0
      Если версия **3DS 1.0**, то в запросе передаются параметры:

      |Название параметра|Описание|
      |---|---|
      |MD| Информация для идентификации платежной сессии на стороне торговой точки. Придет в ответе метода `FinishAuthorize`|
      |PaReq| Запрос на аутентификацию плательщика, который содержит разные детали транзакции. Придет в ответе метода `FinishAuthorize`|
      |TermURL|Адрес перенаправления после аутентификации 3DS. Должен содержать ссылку на обработчик на стороне Мерчанта, принимающий результаты прохождения 3-D Secure|

      ##### 3DS 2.0
      Если версия **3DS 2.0**, то в запросе передаются параметры, в зависимости от типа устройства клиента. Тип устройства передается в запросе `FinishAuthorize` в параметре `deviceChannel`. Возможны два варианта - браузер (BRW, код `02`) и приложение (APP, код `01`).

      **Параметры для браузера:**
      |Название параметра|Тип данных| Описание|
      |---|---|---|
      |creq|string|JSON с параметрами `threeDSServerTransID`, `acsTransID`,`challengeWindowSize`, `messageType`, `messageVersion` закодированный в формат `base64`|
        
      Строка `creq` для браузера формируется из следующих параметров:
      |Название параметра|Тип данных| Описание|
      |---|---|---|
      |threeDSServerTransID|string|Идентификатор транзакции из ответа метода `FinishAuthorize`|
      |acsTransID|string|Идентификатор транзакции, присвоенный ACS, полученный в ответе на `FinishAuthorize`|
      |challengeWindowSize|string|Размер экрана, на котором открыта страница ACS.Допустимые значения:<li>**01** = 250 x 400</li><li>**02** = 390 x 400</li><li>**03** = 500 x 600</li><li>**04** = 600 x 400</li><li>**05** = Full screen</li></ul>|
      |messageType|string|Передается фиксированное значение «CReq»|
      |messageVersion|string|Версия 3DS, полученная из ответа метода `Check3dsVersion`|

      **Параметры для приложения:**
      |Название параметра|Тип данных| Описание|
      |---|---|---|
      |creq|string|JWE object с параметрами `threeDSServerTransID`, `acsTransID`, `messageType`, `messageVersion`, `sdkTransID`, `sdkCounterStoA` закодированный в формат `PS256`|

      Строка `creq` для приложения формируется из следующих параметров:
      |Название параметра|Тип данных| Описание|
      |---|---|---|
      |threeDSServerTransID|string|Идентификатор транзакции из ответа метода `FinishAuthorize`|
      |acsTransID|string|Идентификатор транзакции, присвоенный ACS, полученный в ответе на `FinishAuthorize`|
      |messageType|string|Передается фиксированное значение «CReq»|
      |messageVersion|string|Версия 3DS, полученная из ответа метода `Check3dsVersion`|
      |sdkTransID|string|Уникальный идентификатор транзакции, назначенный 3DS SDK для идентификации одной транзакции, полученный в ответе на `FinishAuthorize`|
      |sdkCounterStoA|string|Внутренний счетчик 3DS SDK внутри ACS. Поддерживаемые значения:<br>000-255</br>|


      #### Подтверждение прохождения 3DS
      После того, как сервис аутентификации банка, выпустившего карту, прислал результат прохождения 3D-Secure, Мерчант должен передать эту информацию в MAPI. В зависимости от версии протокола 3DS для этого нужно вызвать один из методов:
      - Для 3DS 1.0 - `Submit3DSAuthorization`
      - Для 3DS 2.0 - `Submit3DSAuthorizationV2`

      ### Стандартный платеж для Мерчантов без PCI DSS
      #### Инициализация платежа
      Для того, чтоды создать платеж, Мерчант должен инициировать платеж методом `Init`, в котором передается сумма платежа и номер заказа. При успешном прохождении запроса в ответе на метод `Init` будет прислан параметр `PaymentURL`, на который необходимо переадресовать клиента. При переходе на `PaymentURL` клиенту откроется платежная форма Тинькофф Кассы, где необходимо ввести реквизиты карты, а дальше - этап прохождения 3DS.

      > Методы Authorize и FinishAuthorize вызываются системами Тинькофф Кассы при переадресации клиента на PaymentURL (возвращается в ответе на метод Init). Актуально для Мерчантов, использующих платежную форму Банка.

      При создании платежа (вызов метода /Init), в объекте DATA в атрибуте OperationInitiatorType необходимо передавать признак инициатора операции. См. метод [Init](#tag/Standartnyj-platyozh/paths/~1Init/post).

      #### Метод Authorize
      Вызов происходит автоматически при переадресации клиента на страницу PaymentURL, указанную в ответе на Init. Статус платежа выставляется в FORM_SHOWED.

      #### Метод FinishAuthorize
      Подтверждает инициированный платеж передачей карточных данных и осуществляет списание денежных средств с карты клиента.

      #### Осуществление платежа на платежной форме Тинькофф Кассы
      Вызывается формой оплаты, доступной по адресу PaymentURL, при заполнении клиентом карточных данных и нажатии кнопки «Оплатить».

      Статус перевода:
      * при успешном сценарии: CONFIRMED;
      * при неуспешном: REJECTED.

      Переадресация клиента:
      * в случае успешного перевода на Success URL;
      * в случае неуспешного перевода на Fail URL.


      #### Завершение платежа
      Если платёж завершился успешно, то клиент будет перенаправлен на страницу `Success URL` из настроек терминала.

      ### Двухстадийный платеж

      Двухстадийный платеж — платеж, состоящий из двух этапов. На первом этапе проверяется наличие средств у клиента и осуществляется их блокировка (холдирование средств). На втором этапе Мерчант должен либо подтвердить списание средств, либо отменить холдирование средств. 

      Когда клиент оплачивает заказ, деньги за покупку замораживаются (холдируются) на его счете до семи дней.
      Если клиент за это время отказался от заказа, он автоматически получает деньги обратно, а компания избегает комиссии за эквайринг. 

      Если клиент не стал отказываться от товара и вы подтвердили продажу в течение семи дней, деньги на его счете размораживаются и поступают на счет компании. В этом случае Тинькофф Касса списывает комиссию. 

      Если Мерчант не подтвердит платеж вовремя, может столкнуться с негативом от клиента.

      Например,  в случае, когда клиент может не вспомнить, за что списались деньги, и может обратиться в свой банк для возврата средств.

      **Техническая реализация двухстадийных платежей:**  

      Если терминал настроен на прием двухстадийный платежей, то после вызова метода `FinishAuthorize` деньги блокируются на карте клиента, и платёж переходит в статус **AUTHORIZED**.

      Когда Мерчант захочет списать деньги, он должен вызвать метод `Confirm` и передать в запросе `PaymentId`. После успешного списания платеж перейдет в статус **CONFIRMED**. Если Мерчант хочет отменить заказ (например, данный товар закончился), он должен вызвать метод `Cancel`.

      ### Рекуррентные платежи
      Мерчант может сохранять платежные данные клиента и использовать их для повторных списаний. Такие платежи называются **рекуррентными**. В этом случае клиент должен совершить хотя бы один платеж, который был настроен как рекуррентный. Для этого Мерчант должен передать параметр `Recurrent` в методе **Init**.

      После успешной оплаты MAPI отправит Мерчанту уведомление об изменении статуса платежа на **AUTHORIZED** или **CONFIRMED** и передаст параметр `RebillId`. Следующие платежи этого клиента будут рекуррентными, если Мерчант вызовет метод **Init**, а затем без переадресации на `PaymentURL` вызовет метод **Charge** и передаст параметр `RebillId`.
        
      >Метод `Charge` работает как по одностадийной, так и по двухстадийной схеме оплаты. Чтобы перейти на двухстадийную схему, нужно переключить терминал в [Личном кабинете](https://business.tinkoff.ru/oplata/main), а также написать обращение на <acq_help@tinkoff.ru> с просьбой переключить схему рекуррентов.

      ## Возврат и отмена платежа
      Мерчант может отменить успешный платеж. В таком случае, деньги вернутся на ту карту, которую клиент указывал при совершении платежа.

      Успешный платеж - платеж, который находится в статусе **AUTHORIZED** или **CONFIRMED**. Если Мерчант отменяет платеж в статусе **AUTHORIZED**, то происходит разморозка заблокированной суммы на карте клиента. Если платеж в статусе **CONFIRMED**, то деньги списываются со счета Мерчанта и возвращаются на карту клиента.
        
      > Возврат может быть частичный или полный. Частичный возврат - отмена не на всю сумму платежа. Полный возврат - отмена на полную сумму платежа.

      Чтобы отменить платеж, Мерчант должен вызвать метод `Cancel` и передать в запросе идентификатор платежа `PaymentId`. По умолчанию, MAPI сделает полный возврат. Если требуется частичная отмена, то во входящем запросе Мерчант должен передать сумму, которая вернется клиенту, в параметре `Amount`.  

      ## Получение данных о платеже
      Мерчант может получить информацию об основных параметрах платежа в любой момент.

      Если требуется получить данные по конкретному платежу, то Мерчант должен вызвать метод [`GetState`](#tag/Standartnyj-platyozh/paths/~1GetState/post) и передать в запросе `PaymentId`.

      Если по одному заказу было несколько, то получить историю платежей и их текущий статус можно с помощью метода [`CheckOrder`](#tag/Standartnyj-platyozh/paths/~1CheckOrder/post). Мерчант должен передать в запросе `OrderId`. 

      *`OrderId` не является уникальным параметром. Рекомендуется сверять дополнительные данные заказа - `PaymentId` и `Amount`.*

      ## Статусная модель платежа
      В процессе обработки платеж меняет свое состояние. В таблице ниже описаны основные статусы, а также условия перехода в них.

      |Статус|Правило перехода|
      |---|---|
      |**NEW**|MAPI получил запрос `Init`. После этого, он создает новый платеж в статусе **NEW** и возвращает обратно его идентификатор в параметре `PaymentId` и ссылку на платежную форму в параметре `PaymentURL`.|
      |**FORM_SHOWED**|Мерчант перенаправил клиента на страницу платежной формы `PaymentURL`, и страница загрузилась у клиента в браузере|
      |**AUTHORIZING**|Платеж обрабатывается MAPI и платежной системой|
      |**3DS_CHECKING**|Платеж проходит проверку 3D-Secure|
      |**3DS_CHECKED**|Платеж успешно прошел проверку 3D-Secure|
      |**AUTHORIZED**|Платеж авторизован, деньги заблокированы на карте клиента|
      |**CONFIRMING**|Подтверждение платежа обрабатывается MAPI и платежной системой|
      |**CONFIRMED**|Платеж подтвержден, деньги списаны с карты клиента|
      |**REVERSING**|Мерчант запросил отмену авторизованного, но еще не подтвержденного платежа. Возврат обрабатывается MAPI и платежной системой|
      |**PARTIAL_REVERSED**|Частичный возврат по авторизованному платежу завершился успешно|
      |**REVERSED**|Полный возврат по авторизованному платежу завершился успешно|
      |**REFUNDING**|Мерчант запросил отмену подтвержденного платежа. Возврат обрабатывается MAPI и платежной системой|
      |**PARTIAL_REFUNDED**| Частичный возврат по подтвержденному платежу завершился успешно|
      |**REFUNDED**|Полный возврат по подтвержденному платежу завершился успешно|
      |**СANCELED**|Мерчант отменил платеж|
      |**DEADLINE_EXPIRED**|1. Клиент не завершил платеж в срок жизни ссылки на платежную форму `PaymentURL`. Этот срок Мерчант настраивает в Личном кабинете, либо передает в параметре `RedirectDueDate` при вызове метода `Init` <br>2. Платеж не прошел проверку 3D-Secure в срок|
      |**REJECTED**|Банк отклонил платеж|
      |**AUTH_FAIL**|Платеж завершился ошибкой или не прошел проверку 3D-Secure|

      На схеме ниже - полный жизненный цикл платежа
      [![scheme](https://acdn.tinkoff.ru/static/documents/payment%20schema%20EACQ.jpg)](https://acdn.tinkoff.ru/static/documents/payment%20schema%20EACQ.jpg)
  - name: Методы работы с клиентами
  - name: Сценарии привязки карты
    description: "## Общая информация\nМерчант может сохранить платежные данные клиента, чтобы при последующих оплатах ему не приходилось заполнять платежную форму. Для этого клиент привязывается к терминалу, через который будут проходить платежи. После, для этого клиенту можно сохранять карты. \n\nМерчант может выбрать способ привязки клиента - с проверкой 3D-Secure или без. \n\nЕсли выбрана опция с проверкой, то клиент должен будет подтвердить операцию уже на этом этапе. Все дальнейшие платежи будут проходить по схеме рекуррентного платежа, то есть подтверждать каждое списание не нужно.\n\nЕсли Мерчант выбрал опцию привязки без проверки 3D-Secure, то клиент и его карты будут сохранены без подтверждения. Однако, оно подтребуется при первом платеже по привязанной карте.\n\nЗа способ привязки отвечает параметр `CheckType` в запросе метода `AddCard`. Если Мерчант не передаст этот параметр, то MAPI, по умолчанию, будет считать, что привязка прошла без подтверждения клиента.\n\n> Для корректной работы методов Тинькофф Касса должна разрешить Мерчанту привязывать карты и клиентов к терминалу. В результате привязки карты к параметру `CustomerKey` будет привязана `CardId`.\n\n## Сценарии работы с картами и клиентами\n### Добавление, получение и удаление клиента\nДля сохранения идентификатора клиента `CustomerKey` Мерчант должен вызвать метод `AddCustomer` и передать в запросе параметр `CustomerKey`.\n\nДля удаления клиента из списка привязанных к терминалу Мерчант должен вызвать метод `RemoveCustomer`передать в запросе параметр `CustomerKey`.\n\nДля получения сохраненных данных клиента Мерчант должен вызвать метод `GetCustomer` и передать в запросе параметр `CustomerKey`.\n\n### Добавление, получение и удаление карты\n<span style=\"color:#900C3F\">для Мерчантов с PCI DSS</span>\n\n#### Инициализация привязки\nПосле сохранения клиента в списке привязанных к терминалу Мерчант может добавить карту. Для этого он вызывает метод `AddCard` и передает в запросе параметр `CustomerKey`. В ответ MAPI пришлет идентификатор сессии привязки карты `PaymentId`.\n\n#### Проверка версии 3DS\nНа следующем этапе Мерчант вызвает метод `Check3DSVersion`, в котором передает зашифрованные карточные данные клиента и `PaymentId`. Это нужно для проверки версии протокола 3D-Secure по карте. Она может быть либо версии 1.0, либо 2.0.\n\n>Если в ответе метода `Check3DSVersion` есть параметр `ThreeDSMethodURL`, то браузер клиента должен вызывать ресурс, адрес которого пришел в параметре >`ThreeDSMethodURL`. В запросе нужно передать строковый параметр `threeDSMethodData`. Эта строка - закодированный в формате `base64` JSON-объект с параметрами:\n>|Название параметра|Тип данных|Описание|\n>|---|---|---|\n>|threeDSMethodNotificationURL|string|Обратный адрес, на который будет отправлен запрос после прохождения `3DS Method`|\n>|threeDSServerTransID|string|Идентификатор транзакции из ответа метода `Check3DSVersion`|\n>\n>Браузер должен вызвать `3DS Method` в скрытом iframe и передать данные в формате `x-www-form-urlencoded`.\n>\n>Пример запроса на `ThreeDSMethodURL`:\n>\n>``` js\n><body onload=\"document.form.submit()\">\n><form name=\"form\" action=\"{ThreeDSMethodURL}\" method=\"post\" >\n> <input type=\"hidden\" name=\" threeDSMethodData\"\n>value=\"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6IjU2ZTcxMmE1LTE5MGEtNDU4OC05MWJjLWUwODYyNmU3N2M0NCIsInRocm\n>VlRFNNZXRob2ROb3RpZmljYXRpb25VUkwiOiJodHRwczovL3Jlc3QtYXBpLXRlc3QudGlua29mZi5ydS92Mi9Db21wbGV0ZTNEU0\n>1ldGhvZHYyIn0\">\n></form>\n></body>\n>```\n>\n>Пример декодированного значения `threeDSMethodData`:\n>```json\n>{\n>\"threeDSServerTransID\":\"56e712a5-190a-4588-91bc-e08626e77c44\",\n>\"threeDSMethodNotificationURL\":\"https://rest-api-test.tinkoff.ru/v2/>Complete3DSMethodv2\"\n>}\n>```\n\n#### Завершение привязки\nДля завершения привязки карты Мерчант вызывает метод `AttachCard` и передает зашифрованные карточные данные, а также набор параметров для прохождения проверки 3D-Secure. \n\nВ ответ MAPI вернет один из возможных статусов:\n|Статус|Описание|Доступные действия|\n|---|---|---|\n|REJECTED|Привязка отклонена|Провести привязку заново|\n|COMPLETED|Успешная привязка карты|-|\n|3DS_CHECKING|Требуется подтверждение привязки по 3D-Secure|<ul><li>Отменить привязку</li><li>Пройти подтверждение</li></ul>\n\nЕсли в ответе метода `AttachCard` вернулся статус платежа **3DS_CHECKING**, то это означает, что требуется пройти проверку 3D-Secure. Для этого Мерчант должен\nсформировать запрос в сервис аутентификации банка, выпустившего карту. Адрес сервиса возвращается в ответе `AttachCard` в параметре `ACSUrl`. Вместе с\nэтим требуется перенаправить клиента на эту же страницу `ACSUrl` для прохождения 3DS.\n\nВ заголовке запроса требуется передать параметр `Content-Type` со значением ` application/x-www-form-urlencoded`. Набор параметров в теле запросе зависит от версии протокола 3DS по карте.\n\n##### 3DS 1.0\nЕсли версия **3DS 1.0**, то в запросе передаются параметры:\n\n|Название параметра|Описание|\n|---|---|\n|MD| Информация для идентификации платежной сессии на стороне торговой точки. Придет в ответе метода `AttachCard`|\n|PaReq|\tЗапрос на аутентификацию плательщика, который содержит разные детали транзакции. Придет в ответе метода `AttachCard`|\n|TermURL|Адрес перенаправления после аутентификации 3DS. Должен содержать ссылку на обработчик на стороне Мерчанта, принимающий результаты прохождения 3-D Secure|\n\n##### 3DS 2.0\nЕсли версия **3DS 2.0**, то в запросе передаются параметры, в зависимости от типа устройства клиента.\n\n**Параметры для браузера:**\n|Название параметра|Тип данных| Описание|\n|---|---|---|\n|creq|string|JSON с параметрами `threeDSServerTransID`, `acsTransID`,`challengeWindowSize`, `messageType`, `messageVersion` закодированный в формат `base64`|\n\nСтрока `creq` для браузера формируется из следующих параметров:\n|Название параметра|Тип данных| Описание|\n|---|---|---|\n|threeDSServerTransID|string|Идентификатор транзакции из ответа метода `AttachCard`|\n|acsTransID|string|Идентификатор транзакции, присвоенный ACS, полученный в ответе на `AttachCard`|\n|challengeWindowSize|string|Размер экрана, на котором открыта страница ACS.Допустимые значения:<li>**01** = 250 x 400</li><li>**02** = 390 x 400</li><li>**03** = 500 x 600</li><li>**04** = 600 x 400</li><li>**05** = Full screen</li></ul>|\n|messageType|string|Передается фиксированное значение «CReq»|\n|messageVersion|string|Версия 3DS, полученная из ответа метода `Check3dsVersion`|\n\n**Параметры для приложения:**\n|Название параметра|Тип данных| Описание|\n|---|---|---|\n|creq|string|JWE object с параметрами `threeDSServerTransID`, `acsTransID`, `messageType`, `messageVersion`, `sdkTransID`, `sdkCounterStoA` закодированный в формат `PS256`|\n\nСтрока `creq` для приложения формируется из следующих параметров:\n|Название параметра|Тип данных| Описание|\n|---|---|---|\n|threeDSServerTransID|string|Идентификатор транзакции из ответа метода `AttachCard`|\n|acsTransID|string|Идентификатор транзакции, присвоенный ACS, полученный в ответе на `AttachCard`|\n|messageType|string|Передается фиксированное значение «CReq»|\n|messageVersion|string|Версия 3DS, полученная из ответа метода `Check3dsVersion`|\n|sdkTransID|string|Уникальный идентификатор транзакции, назначенный 3DS SDK для идентификации одной транзакции, полученный в ответе на `AttachCard`|\n|sdkCounterStoA|string|Внутренний счетчик 3DS SDK внутри ACS. Поддерживаемые значения:<br>000-255</br>|\n\n#### Подтверждение прохождения 3DS\nПосле того, как сервис аутентификации банка, выпустившего карту, прислал результат прохождения 3D-Secure, Мерчант должен передать эту информацию в MAPI. В зависимости от версии протокола 3DS для этого нужно вызвать один из методов:\n- Для 3DS 1.0 - `Submit3DSAuthorization`\n- Для 3DS 2.0 - `Submit3DSAuthorizationV2`\n\n#### Завершение привязки\nЕсли привязка завершилась успешно, то клиент будет перенаправлен на страницу `Success Add Card URL` из настроек терминала.\n\n## Статусная модель привязки карты\nВ процессе обработки операция привязки меняет свое состояние. В таблице ниже описаны основные статусы, а также условия перехода  в них.\n\n| Статус | Описание |\n| --- | --- |\n| NEW | Новая сессия |\n| FORM_SHOWED | Показ формы привязки карты |\n| 3DS_CHECKING | Отправка клиента на проверку 3DS |\n| 3DS_CHECKED | Клиент успешно прошел проверку 3DS |\n| AUTHORIZING | Отправка платежа на 0 руб |\n| AUTHORIZED | Платеж на 0 руб прошел успешно |\n| COMPLETED | Привязка успешно завершена |\n| REJECTED | Привязка отклонена |\n\n\nНа схеме ниже - полный жизненный цикл привязки карты\n\n[![scheme](https://acdn.tinkoff.ru/static/documents/Status%20scheme%20of%20linking%20cards.png)](https://acdn.tinkoff.ru/static/documents/Status%20scheme%20of%20linking%20cards.png)"
  - name: Оплата через СБП
    description: |-
      ## Общая информация для оплат по QR
      В этом разделе перечислены методы для взаимодействия с СБП.

      >Внимание! Тестирование оплаты через Систему быстрых платежей возможно на prod окружении и только на demo терминале. 

      URL: https://securepay.tinkoff.ru/v2/

      ## Статусная модель платежа 
      В процессе обработки платеж меняет свое состояние. В таблице ниже описаны основные статусы, а также условия перехода в них.
      |Статус|Правило перехода|
      |---|---|
      |**NEW**|MAPI получил запрос `Init`. После этого, он создает новый платеж в статусе **NEW** и возвращает обратно его идентификатор в параметре `PaymentId` и ссылку на платежную форму в параметре `PaymentURL`.|
      |**FORM_SHOWED**|Мерчант перенаправил клиента на страницу платежной формы `PaymentURL`, и страница загрузилась у клиента в браузере|
      |**AUTHORIZING**|Платеж обрабатывается MAPI и платежной системой|
      |**AUTHORIZED**|Платеж авторизован, деньги заблокированы на карте клиента|
      |**CONFIRMING**|Подтверждение платежа обрабатывается MAPI и платежной системой|
      |**CONFIRMED**|Платеж подтвержден, деньги списаны с карты клиента|
      |**REFUNDING**|Мерчант запросил отмену подтвержденного платежа. Возврат обрабатывается MAPI и платежной системой|
      |**ASYNC_REFUNDING**|Обработка возврата денежных средств по QR|
      |**PARTIAL_REFUNDED**| Частичный возврат по подтвержденному платежу завершился успешно|
      |**REFUNDED**|Полный возврат по подтвержденному платежу завершился успешно|
      |**CANCELED**|Мерчант отменил платеж|
      |**DEADLINE_EXPIRED**|1. Клиент не завершил платеж в срок жизни ссылки на платежную форму `PaymentURL`. Этот срок Мерчант настраивает в Личном кабинете, либо передает в параметре `RedirectDueDate` при вызове метода `Init` <br>2. Платеж не прошел проверку 3D-Secure в срок|
      |**ATTEMPTS_EXPIRED**|Клиент превысил количество попыток открытия формы|
      |**REJECTED**|Банк отклонил платеж|
      |**AUTH_FAIL**|Платеж завершился ошибкой или не прошел проверку 3D-Secure|
      |**PREAUTHORIZING**|Проверка платежных данных Покупателя(актуально только для рекуррентных платежей)|

      На схемах ниже изображен полный жизненный цикл платежа
      [![scheme](https://acdn.tinkoff.ru/static/documents/schemaSBPPayments.png)](https://acdn.tinkoff.ru/static/documents/schemaSBPPayments.png)

      ## Привязка счёта
      ### Таблица статусов привязки счётч
      |Статус|Правило перехода|
      |---|---|
      |**NEW**|MAPI получил запрос AddAccountQr или GetQr для сессии с рекуррентным платежом|
      |**PROCESSING**|QR сформирован и отправлен мерчанту|
      |**ACTIVE**|Привяза счета прошла успешно|
      |**INACTIVE**|Банк отклонил привязку счета|
      ### Схема привязки счёта 
      [![scheme](https://acdn.tinkoff.ru/static/documents/perehody_statysa_privyazki.png)](https://acdn.tinkoff.ru/static/documents/perehody_statysa_privyazki.png)

      На схеме ниже приведены переходы статуса привязки счета при оплате с одновременной привязкой. Переходы статуса платежа в данной операции показаны на схеме полного жизненного цикла платежа
      [![scheme](https://acdn.tinkoff.ru/static/documents/Privyazka_pri_odnovremennoi_oplate.png)](https://acdn.tinkoff.ru/static/documents/Privyazka_pri_odnovremennoi_oplate.png)

      ## Схема проведения рекуррентного платежа 
      [![scheme](https://acdn.tinkoff.ru/static/documents/schtmaSBPRecurrent.png)](https://acdn.tinkoff.ru/static/documents/schtmaSBPRecurrent.png)   

      ### Логика привязки при наличии нескольких терминалов
      [![scheme;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbp_recurrent_multiterminal_scheme.png)](https://acdn.tinkoff.ru/static/documents/sbp_recurrent_multiterminal_scheme.png)   
      Если клиент привязывает счёт к терминалу мерчанта, у которого есть несколько терминалов, то клиент имеет возможность выполнять рекуррентные платежи на всех терминалах Мерчанта

      Процесс выглядит следующим образом:
      1. Мерчанту принадлежат терминалы "А" и "Б", покупатель ранее проводил оплату только по терминалу "А"
      2. Покупатель пропбует провести рекуррентный платеж по терминалу "Б"
      3. Система проверяет наличие привязки по терминалу "Б"
      4. Так как привязка по этому терминалу не проводилась, система с помощью идентификатора магазина проверяет наличие привязки на других терминалах мерчанта. 
      5. Система успешно находит привязку по терминалу "А", в связи с чем разрешает проведение рекуррентного платежа

      # Тесты по QR
      * Сценарий “Платеж-успех”
      1) Инициировать начало платежной сессии – вызывать метод **Init**.
      2) Запросить формирование Динамического QR-кода **GetQr**.
      3) Отобразить Динамический QR-код на странице клиенту. 
      4) Вызвать метод **SbpPayTest**, передавая в нем внутренний идентификатор платежной сессии Тинькофф Кассы (PaymentId).
      5) Запросить текущий статус платежа вызывая метод **GetState**.
      6) Получить ответ со статусом CONFIRMED.
      * Сценарий “Платеж - отказ по таймауту”
      1) Инициировать начало платежной сессии – вызывать метод **Init**.
      2) Запросить формирование Динамического QR-кода **GetQr**.
      3) Отобразить Динамический QR-код на странице клиенту.
      4) Вызвать метод **SbpPayTest**, передавая в нем внутренний идентификатор платежной сессии Тинькофф Кассы (PaymentId) и параметр IsDeadlineExpired = true.
      5) Запросить текущий статус платежа вызывая метод **GetState**.
      6) Получить ответ со статусом DEADLINE_EXPIRED.
      * Сценарий “Платеж – отказ, отклонен Тинькофф Кассой”
      1) Инициировать начало платежной сессии – вызывать метод **Init**.
      2) Запросить формирование Динамического QR-кода **GetQr**.
      3) Отобразить Динамический QR-код на странице клиенту.
      4) Вызвать метод **SbpPayTest**, передавая в нем внутренний идентификатор платежной сессии
      Тинькофф Кассы (PaymentId) и параметр IsRejected = true.
      5) Запросить текущий статус платежа вызывая метод **GetState**.
      6) Получить ответ со статусом REJECTED.
      * Сценарий “Возврат – успех
      1) Инициировать возврат (не отмену) методом Cancel тестового платежа по QR-коду СБП,
      выполненного успешно в тесте “Платеж-успех”
      2) Запросить текущий статус платежа вызывая метод **GetState**.
      3) Получить ответ со статусом REFUNDED.

      # Подключение СБП
      ## Откройте расчетный счёт
      Для подключения СБП клиент должен быть резидентом. Если клиент нерезидент, СБП работать не будет

      Заполните [заявку](https://www.tinkoff.ru/business/) и откройте расчетный счет в Тинькофф.

      ## Подключите Интернет эквайринг
      Подайте [заявку](https://www.tinkoff.ru/kassa/) на подключение интернет эквайринг и заполните данные об организации и магазине
      ## Выберите доступные типы интеграций
      СБП доступен для следующих типов интеграций:
      * Платежный [виджет](https://www.tinkoff.ru/kassa/dev/payments/#tag/Oplata-cherez-SBP/Vidzhet-SBP);
      * Платежный [API](https://www.tinkoff.ru/kassa/dev/payments/#tag/Oplata-cherez-SBP/Obshaya-informaciya-dlya-oplat-po-QR);
      * Мобильный [SDK](https://www.tinkoff.ru/kassa/dev/payments/index.html#section/Vvedenie/Sposoby-integracii);
      * Через Агента ТСП;
      * Стикер с QR-кодом для размещения на кассе

      Далее, настройте интеграцию на сайте, в мобильном приложении или в любом другом интерфейсе.

      ## Включение СБП

      ### Требования к подключению СБП
      Расчётный счёт в Тинькофф установлен в магазине счётом для выплат.

      ### Подключение СБП в Личном Кабинете
      Войдите в свой личный кабинет и откройте страницу магазина, для которого вы хотите подключить оплату
      через СБП. Перейдите на вкладку “Способы оплаты“.

      [![sposobioplati;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/fa5996fc-d52a-4f4b-b1cb-71bf4ebcd910.jpg)](https://acdn.tinkoff.ru/static/documents/fa5996fc-d52a-4f4b-b1cb-71bf4ebcd910.jpg)

      Нажмите "Настроить“ на плашке Система быстрых платежей.
      Далее выбираете тот способ интеграции, который планируете использовать

      #### Платежная форма тинькофф
      Если планируете использовать её, то выбираете данную вкладку и нажимаете "Включить".

      [![sbp_pf_tinkoff_off;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbp_pf_tinkoff_off.jpg)](https://acdn.tinkoff.ru/static/documents/sbp_pf_tinkoff_off.jpg)

      После подключения вкладка будет выглядить следующим образом 

      [![sbp_pf_tinkoff_on;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbp_pf_tinkoff_on.jpg)](https://acdn.tinkoff.ru/static/documents/sbp_pf_tinkoff_on.jpg)

      #### Собственная платежная форма
      Если у вас уже есть собственная платежная форма или вы хотите подключить виджет СБП, то необходимо нажать "Включить" как в данной вкладке, так и во вкладке "Платежная форма тинькофф". После включения останется настроить интеграцию по API. 

      [![sbp_pf_svoya_off;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbp_pf_svoya_off.jpg)](https://acdn.tinkoff.ru/static/documents/sbp_pf_svoya_off.jpg)

      После подключения вкладка будет выглядить следующим образом 

      [![sbp_pf_svoya_on;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbp_pf_svoya_on.jpg)](https://acdn.tinkoff.ru/static/documents/sbp_pf_svoya_on.jpg)

      #### Приложение 
      Если вы планируете использовать СБП в своём приложении, то включаете соответствующую настройку, после чего следуете инструкции размещенной в данном разделе. 

      [![app_sbp_off:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/app_sbp_off.jpg)](https://acdn.tinkoff.ru/static/documents/app_sbp_off.jpg)

      После включения вкладка будет выглядить следующим образом

      [![app_sbp_on:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/app_sbp_on.jpg)](https://acdn.tinkoff.ru/static/documents/app_sbp_on.jpg)

      #### Статический QR
      Вне зависимости от того, какой способ интеграции вы используете, вы всегда можете скачать статический QR-код в данном разделе.

      [![novii_static_qr:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/novii_static_qr.png)](https://acdn.tinkoff.ru/static/documents/novii_static_qr.png)


      ### Настройка интеграций при включении способа оплаты СБП
      #### Платежная форма Тинькофф
      После подключения СБП в Личном кабинете, QR код автоматически отобразится на платежной форме, ничего
      дополнительно интегрировать не нужно.
      [Описание](https://www.tinkoff.ru/kassa/develop/widget/install/), как интегрировать Платежную форму на сайт.
      Платёжные формы Тинькофф:
      Мобильная

      [![pfsbpmobile;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/pfsbpmobile.png)](https://acdn.tinkoff.ru/static/documents/pfsbpmobile.png)

      Десктопная
      [![pfsbpdesktop;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/pfsbpdesktop.png)](https://acdn.tinkoff.ru/static/documents/pfsbpdesktop.png)

      Внимание! Способ - Оплата Картой, является обязательным, отключить его нельзя, все остальные
      способы - опциональные и их можно выключить в Личном кабинете.

      #### API
      Если ваша интеграция по API, то вы самостоятельно отображаете полученный QR-код или кнопку на вашем
      сайте или любом другом интерфейсе.

      #### SDK
      Если ваша интеграция предусматривает исопользование мобильного приложения, то в SDK необходимо
      передать специальные параметры в [IOS](https://opensource.tinkoff.ru/tinkoff-mobile-tech/tinkoff-asdk-ios) и [Android](https://opensource.tinkoff.ru/tinkoff-mobile-tech/tinkoff-asdk-android) для отображения QR кода

      #### Агентская интеграция
      Если ваша интеграция настроена с Агентом ТСП, то необходимо
      1. Создать магазин типа – **Выставление счёта**
      2. Включить СБП в способах оплаты
      3. Сообщить Агенту ТСП об успешном включении

      Интерфейс "Тинькофф SDK":   

      [![sbpsdk1;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbpsdk1.png)](https://acdn.tinkoff.ru/static/documents/sbpsdk1.png)

      [![sbpsdk2;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sbpsdk2.png)](https://acdn.tinkoff.ru/static/documents/sbpsdk2.png)

      ### Прием платежей с помощью стикеров с QR-кодом
      Стикер со статичным QR кодом – платежный QR код который размещается в кассовой зоне магазина.
      После создании магазина в Личном кабинете, его можно скачать в режиме онлайн.

      #### Получение стикера
      Для получения стикера с QR кодом небходимо:
      1. Создать магазин с выставлением счета, если у вас уже есть магазин, то далее п.2
      2. Зайдите в настройки СБП в разделе "Способы оплаты"
      3. Нажать на кнопку "скачать" в разделе Статический QR 
      4. Полученный QR код необходимо распечатать и разместить в кассовой зоне вашего магазина.
      Стикер “Тинькофф QR”:


      [![sbpqr;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/novii_static_qr_skrin.png)](https://acdn.tinkoff.ru/static/documents/novii_static_qr_skrin.png)


      После сканирования покупателем Стикера с QR кодом ему необходимо будет ввести сумму и
      подтвердить оплату.

      **Внимание!** Фискализация по операциям с помощью Стикера с QR-кодом не происходит через онлайн
      кассы, даже если онлайн кассы подключенны в личном кабинете.

      #### Нотификации об оплате
      После оплаты вам придет нотификация в зависимости от настроек, на email или по http на ваш сервер.

      **Магазин - Выставление счетов**   
      Настройка нотификаций происходит через acq_help@tinkoff.ru

      **Магазин - Интернет магазин**   
      Если у вас уже есть интернет-магазин, то нотификации вы можете самостоятельно настроить в разделе
      Терминал


      [![nastroikiterminala;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/nastroikiterminala.png)](https://acdn.tinkoff.ru/static/documents/nastroikiterminala.png)

      ### Настроить выбор банка при интеграции по API
      Если вы интегрировались по API, то можно настроить выбор банка при оплате по СБП.
      Для этого нужно создать прямую ссылку, которая существует для того, чтобы перенаправить
      клиента при клике на ссылку в конкретное приложение банка.
      1. Чтобы сформировать прямую ссылку на переход в приложение банка, необходимо заменить
      https из функциональной ссылки на значение параметра schema из списка банков.
      2. Список банков лежит по ссылке - https://qr.nspk.ru/proxyapp/c2bmembers.json

      Например:
      Функциональная ссылка https://qr.nspk.ru/AS10004UVOQ9J4I489A8SG8NIA6P3F8B
      Заменить https на соответствующую schema банка Тинькофф -
      bank100000000004://qr.nspk.ru/AS10004UVOQ9J4I489A8SG8NIA6P3F8B
      Для каждого из банков сделать прямую ссылку по логике указанной в п.1. На Вашей платёжной форме
      необходимо отобразить список банков из п. 2

      # Виджет СБП
      СБП можно интегрировать с помощью виджета, ниже будет описан порядок такой интеграции. 

      ## Подключение платежного виджета

      ### Установка платежного виджета на сайт
      Вставьте следующий код на ваш сайт в место, где должна располагаться кнопка "Оплатить СБП" (подробное описание скрипта в п.1.2). 
      ```
      <html lang="ru">
      <head> 
      <script defer src="https://securepay.tinkoff.ru/html/payForm/js/tinkoff_v2.js"></script> 
      <meta name="viewport" content="width=device-width, initial-scale=1"> 
      </head> 
      <body> 
      <style>.tinkoffPayRow{display:block;margin:1%;width:160px;}</style> 
      <!--    tinkoffWidgetContainer – уникальный id, задается произвольно-->
      <div id="tinkoffWidgetContainer1"></div> 
      <form name="TinkoffPayForm"> 
      <input class="tinkoffPayRow" type="hidden" name="terminalkey" value=""/> 
      <input class="tinkoffPayRow" type="hidden" name="language" value="ru" /> 
      <input class="tinkoffPayRow" type="text" placeholder="Сумма заказа" name="amount" value="111" required min="10.00"/> <input class="tinkoffPayRow" type="text" placeholder="Номер заказа" name="order"/> 
      <input class="tinkoffPayRow" type="text" placeholder="Описание заказа" name="description"/> 
      <input class="tinkoffPayRow" type="text" placeholder="ФИО плательщика" name="name"/> 
      <input class="tinkoffPayRow" type="text" placeholder="E-mail" name="email"/> 
      <input class="tinkoffPayRow" type="text" placeholder="Контактный телефон" name="phone"/> 
      </form> 
      </body>
      ```
      Сумма заказа "amount" указывается в рублях, копейки через точку

      ### Настройка платежного виджета
      Вставьте идентификатор магазина в код платежного виджета в значение параметра terminalkey. Идентификатор магазина выдаётся банком,
      его можно получить в личном кабинете (раздел «Магазины», вкладка "Терминалы"):

      Для корректного отображения, добавьте в тег ```<head> </head>``` у себя на странице:
      ```
      <meta name="viewport" content="width=device-width, initial-scale=1">
      ```
      Если необходимо изменить состав полей платежного виджета, укажите у полей, которые хотите скрыть, type="hidden":
      ```
      <input class="tinkoffPayRow" type="hidden" placeholder="ФИО клиента" name="name"> 
      ```
      Если необходимо сделать обязательным для заполнения какое-либо поле, выставьте у этого поля параметр required:
      ```
      <input class="tinkoffPayRow" type="text" placeholder="E-mail" name="email" required>
      ```
      Стилизация платежного виджета производится магазином самостоятельно. Ограничений на стилизацию со стороны Тинькофф Банка нет:
      ```
      <meta name="viewport" content="width=device-width, initial-scale=1"> 
      <input class="tinkoffPayRow" type="hidden" placeholder="ФИО плательщика" name="name"> 
      <input class="tinkoffPayRow" type="text" placeholder="E-mail" name="email" required> 
      <input class="tinkoffPayRow" type="hidden" name="terminalkey" value="Идентификатор вашего магазина"> 

      ```
      Проверить статус платежа можно в личном кабинете интернет-эквайринга, просмотрев операции по СБП, по APIс помощью метода [GetState](https://www.tinkoff.ru/kassa/dev/payments/index.html#tag/Standartnyj-platyozh/paths/~1GetState/post) или с помощью нотификации по http или на e-mail (https://www.tinkoff.ru/kassa/develop/api/notifications/). 

      ## Подключение СБП

      ### Подключение СБП в Личном Кабинете
      1. Перейдите в свой личныӗ кабинет и откройте страницу интернетмагазина, для которого вы хотите подключить оплату через СБП на сайте. Перейдите на вкладку “Способы оплаты”. Для подключения СБП надо провести первый платеж любым доступным способом
      2. Нажмите на плашку СБП для подключения оплаты через СБП на сайте.
      3. В случае успешного подключения СБП для интернет-магазина плашка должна стать активной. 

      ## Настройка оплаты товаров
      Для подключения оплаты СБП для одного и более товаров потребуется передавать в метод initPayments объект настроек, в котором определено поле paymentItems. 

      Значением поля paymentItems является массив объектов, которые определяют размещение платёжных кнопок и информацию о платеже.

      Пример кода приведен ниже:
       
      ```
        const terminalkey = document.forms.TinkoffPayForm.terminalkey;

        const widgetParameters = {
          terminalKey: terminalkey.value,
          paymentItems: [
            {
              container: document.getElementById("tinkoffWidgetContainer1"),
              paymentInfo: function () {
                return {
                  paymentData: document.forms.TinkoffPayForm,
                };
              },
            },
          ],
          paymentSystems: { TinkoffFps: {} },
        };

        window.addEventListener("load", function () {
          initPayments(widgetParameters);
        });

      ```

      ### Структура объекта массива paymentItems
      |Наименование|Обязательный|Тип данных|Описание|
      |-|---|--|-|
      |container|Да|HTMLFormElement|Элемент, в который вставляют кнопки|
      |paymentInfo|Да|Function/Object|Информация о платеже| 

      ## Формирование чека

      Добавьте в код поле ввода receipt:
      ```
      <input class="tinkoffPayRow" type="hidden" name="receipt" value="">
      ```
      В значении атрибута value поля receipt нужно указывать параметры чека. Например, добавьте следующий код:
      ```
       const form = document.forms.TinkoffPayForm;

            // Данные для чека
            Object.defineProperty(form.receipt, 'value', {
              get: function () {
                return JSON.stringify({
                  Email: form.email.value,
                  Phone: form.phone.value,
                  EmailCompany: 'mail@mail.com',
                  Taxation: 'patent',
                  Items: [
                    {
                      Name: form.description.value || 'Оплата',
                      Price: form.amount.value + '00',
                      Quantity: 1.0,
                      Amount: form.amount.value + '00',
                      PaymentMethod: 'full_prepayment',
                      PaymentObject: 'service',
                      Tax: 'none',
                    },
                  ],
                });
              },
            });
      ```
  - name: Оплата через Tinkoff Pay
    description: "## Общая информация\nОплата доступна на мобильных устройствах и десктопах, проводится последовательным вызовом\nметодов:\n\n- `/TinkoffPay/terminals/{terminalKey}/status`\n- `/Init`\n- `/TinkoffPay/transactions/{paymentId}/versions/{version}/link` либо `/TinkoffPay/{paymentId}/QR`\n\n# Другие способы интеграции \n\n## Tinkoff pay SDK\nTinkoff pay SDK - интеграция способа оплаты в приложение. Документация по SDK активно поддерживается на GitHub.   \nАдреса:   \n* [SDK Android](https://opensource.tinkoff.ru/tinkoff-mobile-tech/tinkoff-asdk-android)\n* [SDK IOS](https://opensource.tinkoff.ru/tinkoff-mobile-tech/tinkoff-asdk-ios#%D0%BE%D0%BF%D0%BB%D0%B0%D1%82%D0%B0-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-tinkoffpay)\n\n## Tinkoff pay web\nTinkoff pay web - способ интеграции через установку виджета на сайт\n\n\n### Подключение платежного виджета\n\n#### Установка платежного виджета на сайт\nВставьте следующий код на ваш сайт в место, где должна располагаться кнопка «Оплатить»\n```\n<style>.tinkoffPayRow{display:block;margin:1%;width:160px;}</style>\n\n<link rel=\"stylesheet\" href=\"./html/payForm/static/css/t-widget.css\" type=\"text/css >\n\n<script src=\"https://securepay.tinkoff.ru/html/payForm/js/tinkoff.js ></script>\n\n<form name=\"TinkoffPayForm\" onsubmit=\"pay(this); return false; >\n\n\t<input class=\"tinkoffPayRow\" type=\"hidden\" name=\"terminalkey\" value=\"EatFit3DS >\n\n\t<input class=\"tinkoffPayRow\" type=\"hidden\" name=\"frame\" value=\"true\">\n\n\t<input class=\"tinkoffPayRow\" type=\"hidden\" name=\"language\" value=\"ru\">\n\n\t<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"Сумма заказа\" name=\"amount\n \trequired>\n\n\t<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"Номер заказа\" name=\"order\">\n\n\t<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"Описание заказа\n \tname=\"description\">\n\n\t<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"ФИО клиента\" name=\"name\">\n\n\t<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"E-mail\" name=\"email\">\n\n\t<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"Контактный телефон\n \tname=\"phone\">\n\n\t<input class=\"tinkoffPayRow\" type=\"submit\" value=\"Оплатить\">\n\n</form>\n```\n#### Настройка платежного виджета\nВставьте идентификатор мерчанта в код платежного виджета в значение параметра terminalkey. Идентификатор мерчанта выдаётся Тинькофф Кассой,\nего можно получить в личном кабинете (раздел «Магазины»):\nЕсли необходимо изменить состав полей платежного виджета,\nукажите у полей, которые хотите скрыть, type=\"hidden\":\n```\n<input class=\"tinkoffPayRow\" type=\"hidden\" placeholder=\"ФИО\nклиента\" name=\"name\"> \n```\nЕсли необходимо сделать обязательным для заполнения какое-либо\nполе, выставьте у этого поля параметр required:\n```\n<input class=\"tinkoffPayRow\" type=\"text\" placeholder=\"E-mail\"\nname=\"email\" required> \n```\nЕсли требуется открывать платежную форму в текущем окне,\nукажите у данного атрибута значение true:\n```\n<input class=\"tinkoffPayRow\" type=\"hidden\" name=\"frame\"\nvalue=\"true\"> \n```\nСтилизация платежного виджета производится мерчантом\nсамостоятельно. Ограничений на стилизацию со стороны Тинькофф\nКассы нет:\n```\n<input class=\"tinkoffPayRow\" type=\"hidden\" name=\"terminalkey\"\nvalue=\"Идентификатор вашего магазина\"> \n```\n### Подключение Tinkoff Pay\n#### Подключение Tinkoff Pay в личном кабинете\n1. Перейдите в свой личный кабинет и откройте страницу интернет-магазина, для которого вы хотите подключить оплату через Tinkoff Pay на сайте. Перейдите на вкладку «Способы оплаты».\n2. Нажмите кнопку «Настроить» на плашке Tinkoff Pay, перейдите в подраздел «Своя платежная\nформа» и нажмите «Включить»\n3. В случае успешного подключения Tinkoff Pay для интернет-магазина должна отобразиться\nстраница активного статуса подключения Tinkoff Pay на сайте.\n\n\n#### Подключение Tinkoff Pay на страницах интернет-магазина\nВставьте приведенный ниже код на страницу вашего сайта сразу после кода платежного виджета:\n```\n<script type=\"text/javascript\">\n\n\tconst terminalkey = document.forms.TinkoffPayForm.terminalkey\n\n\tconst widgetParameters = {\n\n \tcontainer: 'tinkoffWidgetContainer',\n\n \t terminalKey: terminalkey.value,\n\n \tpaymentSystems: {\n\n \tTinkoffPay: {\n\n \tpaymentInfo: function () {\n\n \treturn {\n\n \tinfoEmail: \"E-mail для отправки информации о платеже\",\n\n \tpaymentData: document.forms.TinkoffPayForm\n\n \t}\n\n \t}\n\n \t},\n\n \t},\n\n\t};\n\n\twindow.addEventListener('load', function () {\n\n \tinitPayments(widgetParameters);\n\n\t});\n</script>\n\n```\n\n\nМетод initPayments запускает инициализацию платежных кнопок Tinkoff Pay.\nВходным параметром метода является объект с данными о настройках проведения платежей. \n##### Структура объекта Tinkoff Pay\n|Наименование|Обязательный|Тип данных|Описание|\n|-|---|--|-|\n|paymentInfo|Да|Function/Object|Платежная информация|\n\n\n### Настройка оплаты множества товаров\nДля подключения оплаты Tinkoff Pay на одной странице для нескольких товаров потребуется передавать в метод initPayments объект\nнастроек, в котором определено поле paymentItems.\nЗначением поля paymentItems является массив объектов, которые определяют размещение платежных кнопок и информацию о платеже.\nПример кода страницы приведен ниже:\n```\n<div id=\"tinkoffWidgetContainer1\"></div>\n\n<div id=\"tinkoffWidgetContainer2\"></div>\n\n<script type=\"text/javascript\">\n\n\tconst terminalkey = document.forms.TinkoffPayForm.terminalkey\n\n\tconst widgetParameters = {\n\n \tterminalKey: terminalkey.value,\n\n \tpaymentItems: [{\n\n \tcontainer: document.getElementById('tinkoffWidgetContainer1'),\n\n \tpaymentInfo: function () {\n\n \treturn {\n\n \tinfoEmail: \"E-mail для отправки информации о платеже\",\n\n \tpaymentData: document.forms.TinkoffPayForm\n\n \t}\n\n \t}},\n\n \t{\n\n \tcontainer: document.getElementById('tinkoffWidgetContainer2'),\n\n \tpaymentInfo: function () {\n\n \treturn {\n\n \tinfoEmail: \"E-mail для отправки информации о платеже\",\n\n paymentData: document.forms.TinkoffPayForm\n\n \t}\n\n \t}}],\n\n \tpaymentSystems: {\n\n \tTinkoffPay: {\n\n \t},\n\n \t},\n\n\t};\n\n\twindow.addEventListener('load', function () {\n\n \tinitPayments(widgetParameters);\n\n\t});\n\n</script>\n```\n\n#### Структура объекта массива paymentItems\n|Наименование|Обязательный|Тип данных|Описание|\n|-|---|--|-|\n|container|Да|HTMLFormElement|Элемент, в который вставляют кнопки|\n|paymentInfo|Да|Function/Object|Платежная информация|\n\n## Tinkoff Pay + Tinkoff ID.\nДля интеграции Tinkoff Pay + Tinkoff ID, предварительно требуется настроить интеграцию с ID. Ознакомиться с его API можно по ссылке https://developer.tinkoff.ru/products/scenarios/TID/w2w\n\n### Подключение платежного виджета\n\n#### Установка платежного виджета на сайт\nВставьте следующий код на ваш сайт в место, где должна располагаться кнопка «Оплатить».\n```\n<link rel=\"stylesheet\" href=\"https://securepay.tinkoff.ru/tpaytid/styles.css\" media=\"print\"\nonload=\"this.media='all'\">\n\n<tinkoff-pay-id-button\n\nterminalkey=”%yourterminalkey%”\n\nredirectsuccess=false\n\nrederectfail=false\n\n></tinkoff-pay-id-button>\n\n<script src=\"https://securepay.tinkoff.ru/tpaytid/tinkoff-pay-button.js\" type=\"module\"></\nscript>\n```\n#### Настройка платежного виджета\nВставьте идентификатор магазина в код платежного виджета в значение параметра terminalkey. Идентификатор магазина выдаётся Тинькофф Кассой, его можно получить в личном кабинете (раздел «Магазины»).   \nЕсли требуется переход по ссылке в случае удачной оплаты,\nвыставите “redirectsuccess=true” или задайте атрибут у себя в коде:\n```\nconst tpayIdButton = document.querySelector('tinkoff-pay-id-button');\ntpayIdButton.setAttribute('redirectsuccess', true);\n```\nЕсли требуется переход по ссылке в случае неудачной оплаты,\nвыставите “redirectfail=true” или задайте атрибут у себя в коде\n```\nconst tpayIdButton = document.querySelector('tinkoff-pay-id-button');\ntpayIdButton.setAttribute('redirectfail', true);\n```\nДля получения данных об оплате подпишитесь на событие\n“onSessionChange”\n```\nconst tpayIdButton = document.querySelector('tinkoff-pay-id-button');\ntinkoffPayIdButton.addEventListener('onSessionChange', e => {\n\n// Ваш код здесь\n\n})\n```\n#### Структура объекта события о платеже onSessionChange\n|Наименование|Обязательный|Тип данных|Описание|\n|-|---|--|-|\n|eventType|Да|String|Тип события|\n|sessionId|Да|String|Идентификатор сессии|\n|paymentId|Нет|Number|Идентификатор платежи|\n|accountId|Нет|String|Идентификатор карты|\n|data|Нет|Object|Набор параметров ключ-значение|\n|eventSessionId|Нет|String|Идентификатор события открытия карт|\n\n#### Схема интеграции сценария Tinkoff Pay + Tinkoff ID\n[![scheme](https://acdn.tinkoff.ru/static/documents/Tpay_ID_schema.png)](https://acdn.tinkoff.ru/static/documents/Tpay_ID_schema.png)\nИмплементация сценария Tinkoff Pay+Tinkoff ID требует установку на сайте SDK виджета. Необходимо подписаться на события генерируемые виджетом и дублировать их на backend в зашифрованном виде методом /v2/TinkoffPayEvent, обогащая его данными о клиенте (в данном случае это авторизационный токен AccessToken, выпущенный Tinkoff ID).\n\nВсего предполагается три типа событий, для каждого из которых передается набор параметров для последующей валидации:\n*\tИнициализация кнопки – процесс отображения кнопки;\n*\tОтображение счета – процесс отображения счетов, доступных клиенту для оплаты. При получении события с таким типом требуется сгенерировать платежную сессию эквайринга (в случае если она не была сгенерирована ранее – т.е. в параметрах события отсутствует PaymentId) стандартно методом /v2/Init, учитывая особенности для Tinkoff Pay (пп 2.3.). Возможны несколько сценариев развития событий: \n1. Клиент определен и имеет счета для оплаты – отобразится список счетов;\n2. Клиент не определен или требуется дополнительная аутентификация – произойдет редирект в мобильное приложение Тинькофф;\n3. Клиент определен и не имеет подходящих счетов – отобразится ошибка;\n\n*\tОплата – проведение оплаты по выбранному счету.\n\nРезультат авторизации следует принимать асинхронно через нотификации.\n\n"
  - name: Оплата через Yandex Pay
    description: |-
      ## Общая информация
      ### Описание продукта
      С Yandex Pay можно оплачивать покупки на сайтах банковской картой, не вводя её данные. Для этого подойдёт карта, привязанная к аккаунту на Яндексе. Кнопка Yandex Pay отображается на платёжной странице рядом с другими способами оплаты.

      При использовании Yandex Pay необходимо соблюдать:
      1. Правила оформления бренда;
      2. Список запрещенных товаров и услуг;

      ### Чек-лист для подключения Yandex Pay

      1. Подключить Интернет-эквайринг;
      2. Выбрать тип интеграции;
      3. Подключить в личном кабинете.

      #### Подключите Интернет-эквайринг
      Подайте [заявку](https://www.tinkoff.ru/kassa/solution/classic/) на подключение интернет-эквайринг и заполните данные об организации и магазине
      #### Выберите интеграцию
      Yandex Pay доступен для следующих типов интеграций:
      * Кнопка Yandex Pay на Платежном [виджете](https://www.tinkoff.ru/kassa/develop/widget/install/) Тинькофф
      (Интеграция с Yandex Pay реализована на стороне Тинькофф Кассы)
      * Кнопка Yandex Pay на сайте Мерчанта;
      (Необходима прямая интеграция Мерчанта с API Тинькофф и Yandex Pay)

      #### Yandex Pay на Платежном виджете Тинькофф
      При таком варианте интеграции клиент находится на сайте Мерчанта только до момента ввода данных своей платежной карты или до оплаты с Yandex Pay
      Для оплаты клиент перенаправляется на платежную страницу Тинькофф Кассы, на которой будет отображен способ оплаты Yandex Pay
      После оплаты клиент будет проинформирован о результате и возвращен обратно на сайт Мерчанта, а Мерчанту будут отправлены уведомления с результатом платежа.
      Мерчанту не требуется интегрироваться с Yandex Pay, все необходимое уже реализовано на стороне Тинькофф Кассы

      #### Yandex Pay на сайте Мерчанта (API)
      Для добавления кнопки Yandex Pay на сайт необходимо иметь сертификат PCI DSS и самостоятельно выполнить [интеграцию](https://yandex.ru/dev/yandex-pay-partners/doc/concepts/methods.html#methods__gateway) с Yandex Pay. Для выполнения платежа необходимо получить токен в Yandex Pay и передать его в платежный шлюз Тинькофф Кассы.

      Для выполнения оплаты через [API](https://acdn.tinkoff.ru/static/documents/merchant_api_protocoI_eacq_pci_dss.pdf) необходимо:
      1. Передать в Тинькофф Кассу токен, полученный на сайте с помощью Yandex Pay Web SDK в
      параметре «Token».
      2. Yandex Pay формирует токен в Base64. Токен необходимо декодировать и передавать в [API](https://acdn.tinkoff.ru/static/documents/merchant_api_protocoI_eacq_pci_dss.pdf).

      **Внимание!**

      Для большинства карт в Yandex Pay будет проведена 3-D Secure аутентификация клиента

      ### Включение Yandex Pay
      Для включения кнопки Yandex Pay в Платежном виджете и API, необходимо переключить тоггл Yandex
      Pay в Личном кабинете Тинькофф Кассы.
      * Если интеграция с помощью Платежного виджета, то кнопка Yandex Pay автоматически
      появится на Платежном виджете Тинькофф Кассы.
      * Если интеграция по API, то отображение кнопки Yandex Pay находится на стороне Мерчанта.

      ### Настройка нотификаций об оплате
      После оплаты вам придет нотификация в зависимости от настроек, на email или по http на ваш сервер.
      #### Магазин - Выставление счетов
      Настройка нотификаций происходит через acq_help@tinkoff.ru
      #### Магазин - Интернет-магазин
      Если у вас уже есть интернет-магазин, то нотификации вы можете самостоятельно настроить в
      разделе "Терминал"
  - name: Оплата через Mir Pay
    description: |+
      ## Общая информация для оплат по MirPay
      В этом разделе перечислены методы для взаимодействия с СБП.

      Прием платежей осуществляется вызовом методов с передачей параметров методом POST в формате
      JSON. Все методы и передаваемые параметры являются чувствительными к регистру.
      Для POST запроса в заголовке должен присутствовать Content Type: application/json.

      Тестовый URL*: https://rest-api-test.tinkoff.ru/v2/   
      Боевой URL: https://securepay.tinkoff.ru/v2/

      *Для возможности отправки запросов на тестовую среду напишите на почту acq_help@tinkoff.ru c
      просьбой добавить ваши IP в WL

      ## Схема проведения платежа
      [![scheme](https://acdn.tinkoff.ru/static/documents/mirpaychema.png)](https://acdn.tinkoff.ru/static/documents/mirpaychema.png)
      1. Клиент со своего мобильного устройства с предустановленным приложением MirPay на
      web-сайте магазина мерчанта открывает страницу оплаты товара
      2. Мерчант иницирует платежную сессию, отправляя запрос /init с данными по платежу в MAPI
      3. MAPI создает платежную сессию в статусе NEW
      4. MAPI возвращает Мерчанту данные о платежной сессии
      5. Мерчант отображает клиенту кнопку MirPay
      6. Клиент выбирает оплату по MirPay
      7. Если мерчант не интегрирован с НСПК, то он запрашивает deeplink для перехода клиента в
      приложение MirPay у мапи, иначе он может пройти этот этап сам и перейти к этапу авторизации
      платежа и передаче платежных данных с помощью метода FinishAuthorize
      8. Во время проведения оплаты, мерчант может узнать статус платежа, вызвав метод GetState
      9. В конце платежа мерчант в зависимости от того был ли платеж успешный/не успешный
      переводит мерчанта на страницу success/fail url

  - name: Оплата через SberPay
    description: |+
      ## Подключение SberPay
      ### Подключение SberPay в личном кабинете
      1. Перейдите в свой личный кабинет и откройте страницу интернет-магазина, для которого вы хотите подключить оплату через SberPay на сайте. Перейдите на вкладку «Способы оплаты».
      2. Нажмите кнопку «Настроить» на плашке SberPay, перейдите в подраздел «Своя платежная форма» и нажмите «Включить». Если плашка отсутствует – магазин находится на регистрации/перерегистрации в эквайринге Сбербанка.
      3. В случае успешного подключения SberPay для интернет-магазина должна отобразиться страница активного статуса подключения SberPay на сайте.

      ## Оплата через SberPay
      ### Требования к фронтовому решению
      Требования к функционалу и дизайну фронтового решения кнопки определяются Сбербанком и расположены по ссылкам https://ecomtest.sberbank.ru/promo/deeplink_select_mWeb2app_3.pdf и https://securepayments.sberbank.ru/wiki/doku.php/integration:sbol:guide_book

      ### Общая информация
      Оплата доступна на мобильных устройствах и десктопах, проводится последовательным вызовом методов:
      * /Init
      * /SberPay/transactions/{PaymentId}/link либо /SberPay/{PaymentId}/QR
      * /Confirm
      * /Cancel

      ### Особенности в /Init
      При реализации подключения оплаты через SberPay Web, необходимо обязательно передавать следующие параметры в объекте Data. Пример:
      ```
      "DATA": {
       "SberPayWeb": "true",
       "Device": "Desktop"
      }
      ```
      ### Особенности /Confirm
      Ввиду особенностей работы эквайринга Сбербанка подтверждение по платежной сессии можно провести только единожды (частичное или полное).   
      Так же ввиду асинхронного характера приема запросов на подтверждение при деградации производительности сервисов партнера может быть получен статус платежа **CONFIRMING**, схема работы в таком случае описана ниже.

      ### Особенности /Cancel
      Ввиду особенностей работы эквайринга Сбербанка отмену платежной сессии можно провести только единожды и только на полную сумму платежа, возврат может быть как частичным, так и полным, проведен несколько раз до исчерпания суммы платежа.   
      Так же ввиду асинхронного характера приема запросов на подтверждение при деградации производительности сервисов партнера может быть получен статус платежа **REVERSING**, **REFUNDING**, схема работы в таком случае описана ниже.

      ## Схемы прохождения операций
      ### Инициализация и авторизация платежа 
      [![sp_scheme_init;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sp_scheme_init.png)](https://acdn.tinkoff.ru/static/documents/sp_scheme_init.png)

      ### Подтверждение
      [![sp_scheme_confirm;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sp_scheme_confirm.png)](https://acdn.tinkoff.ru/static/documents/sp_scheme_confirm.png)

      ### Отмена
      [![sp_scheme_cancel;display:block;margin:auto|](https://acdn.tinkoff.ru/static/documents/sp_scheme_cancel.png)](https://acdn.tinkoff.ru/static/documents/sp_scheme_cancel.png)

  - name: Получение справки по операции
  - name: Нотификации Мерчанта об операциях
    description: |-
      Нотификации – это уведомления магазину о статусе выполнения платежа. На основании этих уведомлений магазин должен предоставлять услугу/товар клиенту.


      Для выполнения самостоятельной настройки нотификаций необходимо зайти в <i>ЛК ИЭ</i>→<i>Магазины</i>→<i>Настройки</i> и выбрать необходимый вариант получения нотификаций (почта, HTTP(s) либо оба варианта).

      # Нотификации по E-mail

      Тинькофф Касса может присылать письма с уведомлениями об успешных платежах (статус CONFIRMED). Настроить нотификации на электронную почту можно в личном кабинете. Уведомления на почту можно комбинировать с уведомлениями, отправляемыми по http(s).


      # Нотификации по HTTP(s)
      При совершении операций `Authorize`, `FinishAuthorize`, `Confirm`, `Cancel` на адрес `Notification URL`
      высылается уведомление POST-запросом с информацией об операции. При использовании
      одностадийного проведения платежа при обращении к методу `FinishAuthorize` нотификация
      отправляется на сайт Мерчанта на адрес `Notification URL` синхронно и ожидает ответа в течение 10
      секунд. 

      После получения ответа или неполучения его за заданное время сервис переадресует
      клиента на `Success URL` или `Fail URL` в зависимости от результата платежа.


      В случае успешной обработки нотификации Мерчант должен вернуть ответ c HTTP-кодом сообщения `200` с телом сообщения: `OK`
      (без тегов и заглавными английскими буквами).
      Если тело сообщения отлично от OK, любая нотификация считается неуспешной, и сервис будет
      повторно отправлять нотификацию раз в час в течение 24 часов. Если нотификация за это время так и
      не доставлена, она складывается в дамп.


      Вышесказанное так же действительно и при вызове метода `Charge` за исключением того, что данный
      метод не осуществляет переадресации клиента. <br>

      Тинькофф оплата может уведомлнять магазин об успешных/ошибочных привязках счёта. Для этого в настройках терминала необходимо указать URL на который будут отправляться POST-запросы со статусами

      Если в `NotificationURL` используются порты, допустимо использование порта **443 (HTTPS)**.
      Актуальный список внешних сетей*, используемых Тинькофф Касса, для отправки нотификаций:
      * 91.194.226.0/23
      * 91.218.132.0/24
      * 91.218.133.0/24
      * 91.218.134.0/24
      * 91.218.135.0/24
      * 212.233.80.0/24
      * 212.233.81.0/24
      * 212.233.82.0/24
      * 212.233.83.0/24
      * 91.194.226.181 (тестовая среда)

      Чтобы нотификации работали корректно, добавьте эти сети в исключения сетевых фильтров или других видов защиты, которыми пользуетесь.

      Если есть потребность в получении дополнительных параметров в нотификациях, то необходимо передать параметр **DATA** (данный параметр включается через менеджера или техническую поддержку) с возможными ключами:
      | Ключ |
      | --- |
      | aftbankaccount |
      | data_area |
      | description |
      | email |
      | extactid |
      | filling_fuel_type |
      | filling_point |
      | filling_station |
      | LS |
      | mfoagreement |
      | name |
      | number |
      | order_number |
      | paymentId |
      | paymentpurpose |
      | paymentreference |
      | phone |
      | registryTerminalId |
      | s_firstname |
      | s_lastname |
      | s_middlename |
      | SpAccumulationId |
      | StartSpAccumulation |
      | target |
      | target_name |
      | terminalKey |


      Укажите в настройках терминала URL, чтобы получать на него POST-запросы со статусами:
      | Статус | Описание |
      | --- | --- |
      | AUTHORIZED | Деньги захолдированы на карте клиента. Ожидается подтверждение операции * |
      | CONFIRMED | Операция подтверждена |
      | PARTIAL_REVERSED | Частичная отмена |
      | REVERSED | Операция отменена |
      | PARTIAL_REFUNDED | Произведён частичный возврат |
      | REFUNDED | Произведён возврат |
      | REJECTED | Списание денежных средств закончилась ошибкой |
      | 3DS_CHECKING ** | Автоматическое закрытие сессии, которая превысила срок пребывания в статусе 3DS_CHECKING (более 36 часов) |

      \* *Операция может быть подтверждена:*
       - *Через Личный Кабинет;*
       - *Запросом `Confirm`;*
       - *Автоматически, если у магазина настроена одностадийная схема оплаты для магазина в Личном Кабинете.*

       * По неподтвержденным операциям возмещение не производится. Узнать статус платежа можно с помощью вызова метода GetState.

      \*\* *Напишите на почту acq_help@tinkoff.ru c просьбой включить отправку нотификаций об автозакрытии сессий в статусе 3DS_CHECKING*


      ## Ответ на HTTP(s)-нотификацию
      В случае успешной обработки нотификации Мерчанту необходимо вернуть ответ `HTTP CODE = 200` с телом сообщения: `OK` (без тегов и заглавными английскими буквами).

      **PHP. Пример ответа на http(s)-нотификацию**
      ```
      <?php
      echo «OK»;
      ?>
      ```

      **Java. Пример ответа на http(s)-нотификацию**
      ```
      @POST
      @Path("/ok")
      public Response NotifyResponse() {
      return Response.status(200).entity("OK").build();
      }
      ```

      Если ответ «OK» не получен, нотификация считается неуспешной, и сервис будет повторно отправлять данную нотификацию раз в час в течение 24 часов. Если нотификация за это время не доставлена, она будет сложена в архив.

      При получении нотификации и перед её обработкой настоятельно рекомендуем проверить подпись запроса.

      ## Проверка токенов

      Для формирования подписи запроса для нотификации небходимо:
      1. Собрать массив всех обязательных передаваемых параметров для конкретного метода в виде пар Ключ-Значение (кроме параметра Token). Например:
      ```
      [["TerminalKey": "1321054611234DEMO"],["OrderId": "201709"],["Success": "true"],["Status": "AUTHORIZED"],["PaymentId": "8742591"],["ErrorCode": "0"],["Amount": "9855"],["CardId": "322264"],["Pan": "430000******0777"],["ExpDate": "1122"],["RebillId": "101709"]]
      ```
      2. Добавить в массив пару (`Password`, значение). Password – пароль для терминала, указан в [личном кабинете](https://business.tinkoff.ru/oplata/main) мерчанта: 
      ```
      [["TerminalKey": "1321054611234DEMO"],["OrderId": "201709"],["Success": "true"],["Status": "AUTHORIZED"],["PaymentId": "8742591"],["ErrorCode": "0"],["Amount": "9855"],["CardId": "322264"],["Pan": "430000******0777"],["ExpDate": "1122"],["RebillId": "101709"],["Password": "Dfsfh56dgKl"]]
      ```

      3. Отсортировать массив по Ключам по алфавиту:
      ```
      [["Amount": "9855"],["CardId": "322264"],["ErrorCode": "0"],["ExpDate": "1122"],["OrderId": "201709"],["Pan": "430000******0777"],["Password": "Dfsfh56dgKl"],["PaymentId": "8742591"],["RebillId": "101709"],["Status": "AUTHORIZED"],["Success": "true"],["TerminalKey": "1321054611234DEMO"]]
      ```

      4. Конкатенировать значения всех пар:
      ```
      985532226401122201709430000******0777Dfsfh56dgKl8742591101709AUTHORIZEDtrue1321054611234DEMO
      ```

      5. Вычислить SHA-256 от полученного в п.4. значения:
      ```
      b906d28e76c6428e37b25fcf86c0adc52c63d503013fdd632e300593d165766b
      ```

      Пример генерации токена:
      ```
      private static final String PASSWORD_KEY = "Password"; private static final String PASSWORD_VALUE = "12345678";
      private String generateToken(final Map<String, String> parameters) throws UnsupportedEncodingException,
      NoSuchAlgorithmException { final Map<String, String> sortedParameters = new TreeMap<String, String>(parameters);
      if (sortedParameters.containsKey(TOKEN)) {
      sortedParameters.remove(TOKEN);
      }
      sortedParameters.put(PASSWORD_KEY, PASSWORD_VALUE); final String paramString =
      Joiner.on("").skipNulls().join(sortedParameters.values()); return
      calculateSha256(paramString);
      }
      ```

      Пример сравнения токенов:
      ```
      private boolean checkToken(final Map<String,String> params, final String expectedToken) {
      final String actualToken = params.get(TOKEN);
      return !(expectedToken == null || !expectedToken.equals(actualToken));
      }
      ```
  - name: Общая информация
    description: |-
      Если на терминале включена фискализация чеков и к нему привязана онлайн-касса, то вместе с платежом возможна отправка чека. 

      Передаваемый чек может быть в формате ФФД 1.05 и ФФД 1.2 (зависит от привязанной к терминалу онлайн-кассы). Для передачи чека в формате ФФД 1.2 необходимо наличие привязанной к терминалу кассы с поддержкой ФФД 1.2 и передача в чеке параметра "FfdVersion" "1.2".


      Чек прихода передается при вызове методов Init или Confirm. В случае двустадийного платежа, при передачи чека прихода как в Init, так и в Confirm приоритетным будет считаться чек, переданный в Confirm.


      Чек возврата передается в методе Cancel. В чеке должна быть указаны позиции возврата, сумма чека возврата должна совпадать с возвращаемой суммой.
  - name: Подключение Онлайн-кассы
    description: |-
      Подробная инструкция по подключению Онлайн-кассы находится в разделе ["Help"](https://www.tinkoff.ru/business/help/business-payments/internet-acquiring/kassa/how-connect/?card=q2) на лендинге.

      Чтобы пройти тест-кейсы 7 и 8, нужно следующее:
      <ol>
          <li>Настроить передачу чека в платеже</li>
          <li>Создать платёж через DEMO-терминал</li>
          <li>Оплатить его картой, указанной в тест-кейсе</li>
      </ol>
      Формирование чека лежит на плечах клиента. В зависимости от типа подключения:
      <ul>
          <li>

      При подключении по API объект "Receipt" нужно передавать в запросе ["Init"](https://www.tinkoff.ru/kassa/dev/payments/#tag/Standartnyj-platyozh).
          </li>
          <li>

      При подключении через виджет объект "Receipt" нужно сформировать в [виджете](https://www.tinkoff.ru/kassa/dev/widget/index.html).
          </li>
          <li>

      При подключении через модуль нужно настроить передачу чека по инструкции для соответствующего модуля (если модуль поддерживает интеграцию с онлайн-кассой). Это можно проверить на [странице](https://www.tinkoff.ru/kassa/develop/cms/), поставив галочку «Поддерживает онлайн-кассу». Если модуль разработан не нами, нужно обратиться в поддержку соответствующего сервиса и уточнить, поддерживает ли он формирование чека.
          </li>
      </ul>

      **ВАЖНО**: для подключения онлайн-кассы нужен <i>активированный терминал</i>, а также необходимо указать <i>корректный сайт магазина</i> в настройках терминала, иначе может возникнуть ошибка подключения кассы.
  - name: Методы работы с чеками
    description: ' '
  - name: Описание дополнительных объектов
    description: |
      ### Структура объекта Receipt для ФФД 1.05
      JSON-объект с данными чека. Обязателен, если подключена онлайн-касса. 

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Items | Array of objects | Да | Массив, содержащий в себе информацию о товарах. <br> См. *Структура объекта Items* |
      | FfdVersion | String | Нет | <br>Версия ФФД. <br>Возможные значения:<br> • "FfdVersion": "1.2"<br> • "FfdVersion": "1.05"<br>По умолчанию версия ФФД - 1.05. |
      | Email | String | Нет* | Электронная почта для отправки чека |
      | Phone | String | Нет* | Телефон для отправки чека |
      | Taxation | Enum | Да | Система налогообложения. Перечисление с возможными значениями:<br> - osn - общая СН;<br> - usn_income - упрощенная СН;<br> - usn_income_outcome - упрощенная СН (доходы минус расходы);<br> - envd - единый налог на вмененный доход;<br> - esn - единый сельскохозяйственный налог;<br> - patent - патентная СН; |
      | Payments | Object | Нет** | Объект c информацией о видах суммы платежа. <br> См. *Структура объекта Payments* |

      *Должен быть заполнен параметр или `Phone`, или `E-mail`<br>
      **Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты "Безналичный".<br>
      Если передан объект `receipt.Payments`, то значение в `Electronic` должно быть равно итоговому значению `Amount` в методе [**Init**](#tag/Standartnyj-platyozh/paths/~1Init/post). При этом сумма введенных значений по всем видам оплат, включая `Electronic`, должна быть равна сумме (`Amount`) всех товаров, переданных в объекте `receipt.Items`.

      ### Структура объекта Shops
      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | ShopCode | String | Да | Присвоенный идентификатор точки на стороне банка |
      | Amount | String | Да | Сумма в копейках, которая относится к указанному ShopCode |
      | Name | String | Нет | Наименование позиции. Максимум 128 символов |
      | Fee | String | Нет | Сумма комиссии в копейках, удерживаемая из возмещения Партнера в пользу Маркетплейса. <br>Если не передано, используется комиссия, указанная при регистрации. |

      ### Структура объекта Items
      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Name | String | Да | Наименование товара |
      | Price | Number | Да | Цена в копейках |
      | Quantity | Number | Да | Количество/вес:<br> - целая часть не более 5 знаков;<br> - дробная часть не более 3 знаков для Атол, не более 2 знаков для CloudPayments.|
      | Amount | Number | Да | Сумма в копейках. Целочисленное значение не более 10 знаков |
      | PaymentMethod | Enum | Да | Признак способа расчёта. Если значение не передано, по умолчанию в онлайн-кассу передается признак способа расчёта "full_payment". Возможные значения:<br> − «full_prepayment» – предоплата 100%.<br> − «prepayment» – предоплата.<br> − «advance» – аванс.<br> − «full_payment» – полный расчет.<br> − «partial_payment» – частичный расчет и<br> кредит.<br> − «credit» – передача в кредит.<br> − «credit_payment» – оплата кредита. |
      | PaymentObject | Enum | Да | Признак предмета расчёта.Если значение не передано, по умолчанию в онлайн-кассу отправляется признак предмета расчёта "commodity".<br>Возможные значения:<br> − «commodity» – товар.<br> − «excise» – подакцизный товар.<br> − «job» – работа.<br> − «service» – услуга.<br> − «gambling_bet» – ставка азартной игры.<br> − «gambling_prize» – выигрыш азартной игры.<br> − «lottery» – лотерейный билет.<br> − «lottery_prize» – выигрыш лотереи.<br> − «intellectual_activity» – предоставление результатов интеллектуальной деятельности.<br> − «payment» – платеж.<br> − «agent_commission» – агентское вознаграждение.<br> − «composite» – составной предмет расчета.<br> − «another» – иной предмет расчета |
      | Tax | Enum | Да | Ставка налога. Перечисление со значениями:<br> - none - без НДС;<br> - vat0 - НДС по ставке 0%;<br> - vat10 - НДС чека по ставке 10%;<br> - vat20 - НДС чека по ставке 20%;<br> - vat110 - НДС чека по расчетной ставке 10/110;<br> - vat120 - НДС чека по расчетной ставке 20/120. |
      | Ean13 | String | Нет | Штрих-код в требуемом формате. В зависимости от типа кассы требования могут отличаться:<br>• **АТОЛ Онлайн** - шестнадцатеричное представление с пробелами. Максимальная длина – 32 байта (^[a-fA-F0-9]{2}$)(^([afA-F0-9]{2}\\s){1,31}[a-fA-F0-9]{2}$)<br> Пример:<br> *00 00 00 01 00 21 FA 41 00 23 05 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 AB 00*<br>• **CloudKassir** - длина строки: четная, от 8 до 150 байт, т.е. от 16 до 300 ASCII символов ['0' - '9' , 'A' - 'F' ] шестнадцатеричного представления кода маркировки товара.<br> Пример:<br> *303130323930303030630333435*<br>• **OrangeData** - строка, содержащая base64 кодированный массив от 8 до 32 байт<br> Пример:<br> *igQVAAADMTIzNDU2Nzg5MDEyMwAAAAAAAQ==*<br>В случае передачи в запросе не прошедшего валидацию параметра Ean13, возвращается неуспешный ответ с текстом ошибки в параметре message = "Неверный параметр Ean13".  |
      | ShopCode | String | Нет | Код магазина. Для параметра ShopСode необходимо использовать значение параметра Submerchant_ID, полученного в ответ при регистрации магазинов через xml. Если xml не используется, передавать поле не нужно. |
      | AgentData | Object | Да, если используется агентская схема | Данные агента. Параметры объекта описаны в таблице *Структура объекта AgentData* |
      | SupplierInfo | Object | Да, если передается значение `AgentSign` в объекте AgentData | Данные поставщика платежного агента. араметры объекта описаны в таблице *Структура объекта AgentData* |


      ### Структура объекта Payments
      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Cash | Number(14) | Нет | Вид оплаты "Наличные". Сумма к оплате в копейках не более 14 знаков. |
      | Electronic | Number(14) | Да | Вид оплаты "Безналичный" |
      | AdvancePayment | Number(14) | Нет | Вид оплаты "Предварительная оплата (Аванс)" |
      | Credit | Number(14) | Нет | Вид оплаты "Постоплата (Кредит)" |
      | Provision | Number(14) | Нет | Вид оплаты "Иная форма оплаты" |

      ### Структура объекта AgentData
      Данные агента. Обязателен, если используется агентская схема.
      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | AgentSign | String | Нет | Признак агента.<br> Возможные значения:<br> • bank_paying_agent – банковский платежный агент<br> • bank_paying_subagent – банковский платежный субагент<br> • paying_agent – платежный агент<br> • paying_subagent – платежный субагент<br> • attorney – поверенный<br> • commission_agent – комиссионер<br> • another – другой тип агента<br> |
      | OperationName | String | Нет | Наименование операции.<br> Атрибут обязателен, если AgentSign передан в значениях:<br> • bank_paying_agent <br> • bank_paying_subagent |
      | Phones | Array of Strings | Нет | Телефоны платежного агента, в формате +{Ц}. <br> Атрибут обязателен, если в AgentSign передан в значениях:<br> • bank_paying_agent<br> • bank_paying_subagent<br> • paying_agent<br> • paying_subagent |
      | ReceiverPhones | Array of Strings | Нет | Телефоны оператора по приему платежей, в формате +{Ц}.<br> Атрибут обязателен, если в AgentSign передан в значениях:<br> • paying_agent<br>• paying_subagent |
      | TransferPhones | Array of Strings | Нет | Телефоны оператора перевода, в формате +{Ц}.<br> Атрибут обязателен, если в AgentSign передан в значениях:<br> • bank_paying_agent<br>• bank_paying_subagent |
      | OperatorName | String | Нет | Наименование оператора перевода.<br> Атрибут обязателен, если в AgentSign передан в значениях:<br> • bank_paying_agent<br> • bank_paying_subagent |
      | OperatorAddress | String | Нет | Адрес оператора перевода.<br> Атрибут обязателен, если в AgentSign передан в значениях:<br> • bank_paying_agent<br> • bank_paying_subagent |
      | OperatorInn | String | Нет | ИНН оператора перевода.<br> Атрибут обязателен, если в AgentSign передан в значениях:<br> • bank_paying_agent <br> • bank_paying_subagent |

      ### Структура объекта SupplierInfo
      Данные поставщика платежного агента. Обязателен, если передается значение `AgentSign` в объекте `AgentData`.
      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Phones | Массив String | Да, если передается значение AgentSign в объекте AgentData | Телефон поставщика, в формате +{Ц} (1-19 символов в каждой строке массива). |
      | Name | String | Да, если передается значение AgentSign в объекте AgentData | Наименование поставщика. <br>Внимание: в данные 239 символов включаются телефоны поставщика + 4 символа на каждый телефон. <br>Например, если передано два телефона поставщика длиной 12 и 14 символов, то максимальная длина наименования поставщика будет 239 – (12 + 4) – (14 + 4) = 205 символов |
      | Inn | String | Да, если передается значение AgentSign в объекте AgentData | ИНН поставщика, в формате ЦЦЦЦЦЦЦЦЦЦ (10-12 символов). |

      Пример запроса:
      ```json
      {
      "TerminalKey":"TinkoffBankTest",
      "Amount":140000,
      "OrderId":"21050",
      "Description":"Подарочная карта на 1000 рублей",
      "Token":"871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6"
      "DATA":{
      "Phone":"+71234567890",
      "Email":"a@test.com"},
      "Receipt": {
            "Email":"a@test.ru",
            "Phone":"+79031234567",
            "Taxation":"osn",
            "Items": [
              {
                "Name":"Наименование товара 1",
                "Price":10000,
                "Quantity":1.00,
                "Amount":10000,
                "Tax":"vat10"
              },
              {
                "Name":"Наименование товара 2",
                "Price":20000,
                "Quantity":2.00,
                "Amount":40000,
                "Tax":"vat20"
              },
              {
                "Name":"Наименование товара 3",
                "Price":30000,
                "Quantity":3.00,
                "Amount":90000,
                "Tax":"vat10"
              }
            ]
          }
      }
      ```

      Пример запроса, если используется агентская схема:
      ```json
      {
      "TerminalKey":"TinkoffBankTest",
      "Amount": 50000,
      "OrderId":"21050",
      "Description":"Подарочная карта на 1000 рублей",
      "Token":"2ED30E046136931431B5251B7C9A1EAC68DAB082203BD42676BA14A851359DF4",
      "DATA":{"Phone":"+71234567890","Email":"a@test.com"},
      "Receipt": {
            "Email": "a@test.ru",
            "Phone": "+79031234567",
            "Taxation": "osn",
         "Customer":"TestCustomer",
         "CustomerInn":"1234567890",
         "Payments": {
                  "electronic": 50000,
                  "cash": 90000,
                  "advancePayment": 0,
                  "credit": 0,
                  "provision": 0
              },
         "AgentData": {
                  "AgentSign": "bank_paying_subagent",
                  "OperationName": "Чек",
                  "Phones": ["+19221210697", "+19098561231"],
                  "ReceiverPhones": ["+29221210697", "+29098561231"],
                  "TransferPhones": ["+39221210697"],
                  "OperatorName": "Tinkoff",
                  "OperatorAddress": "г.Москва",
                  "OperatorInn": "7710140679"
              },
              "SupplierInfo": {
                  "Phones": ["+49221210697", "+49098561231"]
              },
            "Items": [
              {
          "AgentData": {
                 "AgentSign": "paying_agent",
                   "OperationName": "Позиция чека",
                   "Phones": ["+790912312398"],
                   "ReceiverPhones": ["+79221210697", "+79098561231"],
                   "TransferPhones": ["+79221210697"],
                   "OperatorName": "Tinkoff",
                   "OperatorAddress": "г. Тольятти",
                   "OperatorInn": "7710140679"
            },
                  "SupplierInfo": {
                    "Phones": ["+79221210697", "+79098561231"],
                    "Name": "ООО Вендор товара",
                    "Inn": "7710140679"
            },
                "Name": "Наименование товара 1",
                "Price": 10000,
                "Quantity": 1.00,
                "Amount": 10000,
                "Tax": "vat10",
                "Ean13": "303130323930303030630333435",
                "ShopCode": "12345",
                "MeasurementUnit": "шт"
              },
              {
                "Name": "Наименование товара 2",
                "Price": 20000,
                "Quantity": 2.00,
                "Amount": 40000,
                "Tax": "vat20"
              },
              {
                "Name": "Наименование товара 3",
                "Price": 30000,
                "Quantity": 3.00,
                "Amount": 90000,
                "Tax": "vat10"
              }
            ]
          }
      }
      ```


      ### Структура объекта Receipt для ФФД 1.2


      JSON-объект с данными чека. Обязателен, если подключена онлайн-касса. 

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Items | Array of objects | Да | Массив, содержащий в себе информацию о товарах. <br> См. *Структура объекта Items* |
      | FfdVersion | String | Нет | <br>Версия ФФД. <br>Возможные значения:<br> • "FfdVersion": "1.2"<br> • "FfdVersion": "1.05"<br>По умолчанию версия ФФД - 1.05. |
      | Email | String | Нет* | Электронная почта для отправки чека |
      | Phone | String | Нет* | Телефон для отправки чека |
      | Taxation | Enum | Да | Система налогообложения. Перечисление с возможными значениями:<br> - osn - общая СН;<br> - usn_income - упрощенная СН;<br> - usn_income_outcome - упрощенная СН (доходы минус расходы);<br> - envd - единый налог на вмененный доход;<br> - esn - единый сельскохозяйственный налог;<br> - patent - патентная СН; |
      | Payments | Object | Нет** | Объект c информацией о видах суммы платежа. <br> См. *Структура объекта Payments* |

      *Должен быть заполнен параметр или `Phone`, или `E-mail`<br>
      **Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты "Безналичный".<br>
      Если передан объект `receipt.Payments`, то значение в `Electronic` должно быть равно итоговому значению `Amount` в методе [**Init**](#tag/Standartnyj-platyozh/paths/~1Init/post). При этом сумма введенных значений по всем видам оплат, включая `Electronic`, должна быть равна сумме (`Amount`) всех товаров, переданных в объекте `receipt.Items`.



      | **Наименование** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | FfdVersion | String | Нет | <br>Версия ФФД. <br>Возможные значения:<br> • "FfdVersion": "1.2"<br> • "FfdVersion": "1.05"<br>По умолчанию версия ФФД - 1.05. |
      | ClientInfo | Object | Нет* | Информация по покупателю |
      | Taxation | Enum | Да | Система налогообложения. Перечисление с возможными значениями:<br> - osn - общая СН;<br> - usn_income - упрощенная СН;<br> - usn_income_outcome - упрощенная СН (доходы минус расходы);<br> - envd - единый налог на вмененный доход;<br> - esn - единый сельскохозяйственный налог;<br> - patent - патентная СН; |
      | Email | String | Нет** | Электронная почта для отправки чека |
      | Phone | String | Нет** | Телефон для отправки чека |
      | Customer | String | Нет | Идентификатор/Имя покупателя |
      | CustomerInn | String | Нет | ИНН покупателя |
      | Items | Array of objects | Да | Массив, содержащий в себе информацию о товарах |
      | Payments | Object | Нет*** | Объект c информацией о видах суммы платежа. См. Структура объекта Payments |
      | OperatingСheckProps | Object | Нет | Операционный реквизит чека (тег 1270) |
      | SectoralCheckProps | Object | Нет | Отраслевой реквизит чека (тег 1261) |
      | AddUserProp | Object | Нет | Дополнительный реквизит пользователя (тег 1084) |
      | AdditionalCheckProps | String | Нет | Дополнительный реквизит чека (БСО) (тег 1192) |

      *Обязателен для товаров с маркировкой <br>
      **Должен быть заполнен параметр или `Phone`, или `E-mail`<br>
      ***Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты "Безналичный"<br>
      Если передан объект `receipt.Payments`, то значение в `Electronic` должно быть равно итоговому значению `Amount` в методе [**Init**](#tag/Standartnyj-platyozh/paths/~1Init/post). При этом сумма введенных значений по всем видам оплат, включая `Electronic`, должна быть равна сумме (`Amount`) всех товаров, переданных в объекте `receipt.Items`.

      ### Структура объекта ClientInfo

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Birthdate | String | Нет | Дата рождения покупателя в формате ДД.ММ.ГГГГ |
      | Citizenship | String | Нет | Числовой код страны, гражданином которой является покупатель. Код страны указывается в соответствии с Общероссийским классификатором стран мира ОКСМ |
      | DocumentСode | String | Нет | Числовой код вида документа, удостоверяющего личность. <br> Может принимать только значения: <br> • 21 - Паспорт гражданина Российской Федерации <br> • 22 - Паспорт гражданина Российской Федерации, дипломатический паспорт, служебный паспорт, удостоверяющие личность гражданина Российской Федерации за пределами Российской Федерации <br> • 26 - Временное удостоверение личности гражданина Российской Федерации, выдаваемое на период оформления паспорта гражданина Российской Федерации <br> • 27 - Свидетельство о рождении гражданина Российской Федерации (для граждан Российской Федерации в возрасте до 14 лет) <br> • 28 - Иные документы, признаваемые документами, удостоверяющими личность гражданина Российской Федерации в соответствии с законодательством Российской Федерации <br> • 31 - Паспорт иностранного гражданина <br> • 32 - Иные документы, признаваемые документами, удостоверяющими личность иностранного гражданина в соответствии с законодательством Российской Федерации и международным договором Российской Федерации <br> • 33 - Документ, выданный иностранным государством и признаваемый в соответствии с международным договором Российской Федерации в качестве документа, удостоверяющего личность лица безгражданства. <br> • 34 - Вид на жительство (для лиц без гражданства) <br> • 35 - Разрешение на временное проживание (для лиц без гражданства) <br> • 36 - Свидетельство о рассмотрении ходатайства о признании лица без гражданства беженцем на территории Российской Федерации по существу <br> • 37 - Удостоверение беженца <br> • 38 - Иные документы, признаваемые документами, удостоверяющими личность лиц без гражданства в соответствии с законодательством Российской Федерации и международным договором Российской Федерации <br> • 40 - Документ, удостоверяющий личность лица, не имеющего действительного документа, удостоверяющего личность, на период рассмотрения заявления о признании гражданином Российской Федерации или о приеме в гражданство Российской Федерации <br> |
      | DocumentData | String | Нет | Реквизиты документа, удостоверяющего личность (например: серия и номер паспорта) |
      | Address | String | Нет | Адрес покупателя (клиента), грузополучателя. Максимум 256 символов |

      ### Структура объекта OperatingСheckProps

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Name | String | Да | Идентификатор операции (тег 1271) <br> Принимает значения «0» до определения значения реквизита ФНС России. |
      | Value | String | Да | Данные операции (тег 1272) |
      | Timestamp | String | Да | Дата и время операции в формате ДД.ММ.ГГГГ ЧЧ:ММ:СС (тег 1273) |

      ### Структура объекта SectoralCheckProps

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | FederalId | String | Да | Идентификатор ФОИВ (тег 1262). Максимальное количество символов – 3 |
      | Date | String | Да | Дата документа основания в формате ДД.ММ.ГГГГ (тег 1263) |
      | Number | String | Да | Номер документа основания (тег 1264) |
      | Value | String | Да | Значение отраслевого реквизита (тег 1265) |

      ### Структура объекта AddUserProp

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Name | String | Да | Наименование дополнительного реквизита пользователя (тег 1085) |
      | Value | String | Да | Значение дополнительного реквизита пользователя (тег1086) |

      ### Структура объекта Items

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | Name | String | Да | Наименование товара <br> Максимум 128 символов |
      | Price | Number | Да | Цена в копейках |
      | Quantity | Number | Да | Количество/вес:<br> - целая часть не более 5 знаков;<br> - дробная часть не более 3 знаков для Атол, не более 2 знаков для CloudPayments <br> Значение «1», если передан объект markCode |
      | Amount | Number | Да | Сумма в копейках. Целочисленное значение не более 10 знаков |
      | PaymentMethod | Enum | Да | Признак способа расчёта. Если значение не передано, по умолчанию в онлайн-кассу передается признак способа расчёта "full_payment". Возможные значения:<br> − «full_prepayment» – предоплата 100%.<br> − «prepayment» – предоплата.<br> − «advance» – аванс.<br> − «full_payment» – полный расчет.<br> − «partial_payment» – частичный расчет и<br> кредит.<br> − «credit» – передача в кредит.<br> − «credit_payment» – оплата кредита. |
      | PaymentObject | Enum | Да | Признак предмета расчёта.Если значение не передано, по умолчанию в онлайн-кассу отправляется признак предмета расчёта "commodity".<br>Возможные значения:<br> − «commodity» – товар.<br> − «excise» – подакцизный товар.<br> − «job» – работа.<br> − «service» – услуга.<br> − «gambling_bet» – ставка азартной игры.<br> − «gambling_prize» – выигрыш азартной игры.<br> − «lottery» – лотерейный билет.<br> − «lottery_prize» – выигрыш лотереи.<br> − «intellectual_activity» – предоставление результатов интеллектуальной деятельности.<br> − «payment» – платеж.<br> − «agent_commission» – агентское вознаграждение.<br> − «contribution» – выплата.<br> − «property_rights» – имущественное право.<br> – «unrealization» – внереализационный доход.<br> – «tax_reduction» – иные платежи и взносы.<br> – «trade_fee» – торговый сбор.<br> – «resort_tax» – курортный сбор.<br> – «pledge» – залог.<br> – «income_decrease» – расход.<br> – «ie_pension_insurance_without_payments» – взносы на ОПС ИП.<br> – «ie_pension_insurance_with_payments» – взносы на ОПС.<br> – «ie_medical_insurance_without_payments» – взносы на ОМС ИП.<br> – «ie_medical_insurance_with_payments» – взносы на ОМС.<br> – «social_insurance» – взносы на ОСС.<br> – «casino_chips» – платеж казино.<br> – «agent_payment» – выдача ДС.<br> – «excisable_goods_without_marking_code» – АТНМ.<br> – «excisable_goods_with_marking_code» – АТМ.<br> – «goods_without_marking_code» – ТНМ.<br> – «goods_with_marking_code» – ТМ.<br> – «another» – иной предмет расчета. |
      | UserData  | String | Нет | Дополнительный реквизит предмета расчета |
      | Excise | Number | Нет | Сумма акциза в рублях с учетом копеек, включенная в стоимость предмета расчета.<br> Целая часть не более 8 знаков<br> Дробная часть не более 2 знаков<br> Значение не может быть отрицательным<br> |
      | CountryCode | String | Нет | Цифровой код страны происхождения товара в соответствии с Общероссийским классификатором стран мира (3 цифры) |
      | DeclarationNumber | String | Нет | Номер таможенной декларации (32 цифры максимум) |
      | MeasurementUnit | String | Да | Единицы измерения. Передовать в соответствии с ОК 015-94 (МК 002-97)<br> Возможные варианты указаны в <a href="https://www.consultant.ru/document/cons_doc_LAW_362322/0060b1f1924347c03afbc57a8d4af63888f81c6c/">статье</a> (также возможна передача произвольных значений)<br> MeasurementUnit обязателен, в случае если ФФД онлайн-кассы 1.2. |
      | MarkProcessingMode | String | Нет* | Режим обработки кода маркировки. Должен принимать значение равное «0» |
      | MarkCode | Object | Нет* | Код маркировки в машиночитаемой форме, представленный в виде одного из видов кодов, формируемых в соответствии с требованиями, предусмотренными правилами, для нанесения на потребительскую упаковку, или на товары, или на товарный ярлык. Параметры объекта описаны в таблице *Структура объекта MarkCode* |
      | MarkQuantity | Object | Нет** | Реквизит «дробное количество маркированного товара». MarkQuantity не является обязательным объектом, в том числе для товаров с маркировкой. Этот объект МОЖНО передавать, если товар с маркировкой. Т.е. даже при ФФД 1.2 этот объект не является обязательным |
      | SectoralItemProps | Array of objects | Нет*** | Отраслевой реквизит предмета расчета. Параметры объекта описаны в таблице *Структура объекта SectoralItemProps* |
      | Tax | Enum | Да | Ставка налога. Перечисление со значениями:<br> - none - без НДС;<br> - vat0 - НДС по ставке 0%;<br> - vat10 - НДС чека по ставке 10%;<br> - vat20 - НДС чека по ставке 20%;<br> - vat110 - НДС чека по расчетной ставке 10/110;<br> - vat120 - НДС чека по расчетной ставке 20/120. |
      | AgentData | Object | Да, если используется агентская схема | Данные агента. Параметры объекта описаны в таблице *Структура объекта AgentData* |
      | SupplierInfo | Object | Да, если передается значение `AgentSign` в объекте AgentData | Данные поставщика платежного агента. Параметры объекта описаны в таблице *Структура объекта AgentData* |

      *Включается в чек в случае, если предметом расчета является товар, подлежащий обязательной
      маркировке средством идентификации (соответствующий код в поле paymentObject).<br>
      **Передается только в случае, если расчет осуществляется за маркированный товар (соответствующий
      код в поле paymentObject) и значение в поле measurementUnit равно «0» <br>
      Состоит из двух параметров, где <br>
      • Numerator – Числитель дробной части предмета расчета. Значение должно быть строго меньше
      значения реквизита «знаменатель». <br>
      • Denominator - Знаменатель дробной части предмета расчета. Значение равно количеству товара в партии (упаковке), имеющей общий код маркировки товара. <br>
      Пример:
      ```json
      {
      "numerator": "1",
      "denominator": "2"
      }
      ```
      ***Необходимо указывать только для товаров подлежащих обязательной маркировке средством идентификации и включение данного реквизита предусмотрено НПА отраслевого регулирования для соответствующей товарной группы <br>

      ### Структура объекта MarkCode

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      | MarkCodeType | String | Да | Тип штрих кода. Возможные значения: <br> • UNKNOWN - код товара, формат которого не идентифицирован, как один из реквизитов <br> • EAN8 - код товара в формате EAN-8 <br> • EAN13 - код товара в формате EAN-13 <br> • ITF14 - код товара в формате ITF-14 <br> • GS10 - код товара в формате GS1, нанесенный на товар, не подлежащий маркировке <br> • GS1M - код товара в формате GS1, нанесенный на товар, подлежащий маркировке <br> • SHORT - код товара в формате короткого кода маркировки, нанесенный на товар <br> • FUR - контрольно-идентификационный знак мехового изделия <br> • EGAIS20 - код товара в формате ЕГАИС-2.0 <br> • EGAIS30 - код товара в формате ЕГАИС-3.0 <br> • RAWCODE - Код маркировки, как он был прочитан сканером. |
      | value | String | Да | Код маркировки |

      ### Структура объекта SectoralItemProps

      | **Параметр** | **Тип** | **Обязательность** | **Описание** |
      | ------ | -------- | ------ | -------- |
      |FederalId | Enum (string) | Да | Идентификатор ФОИВ (федеральный орган исполнительной власти) |
      | Date | String | Да | Дата нормативного акта ФОИВ |
      | Number | String | Да | Номер нормативного акта ФОИВ |
      | Value | String | Да | Состав значений, определенных нормативного актом ФОИВ |

      Пример запроса с маркировкой:
      ```json
      {
          "TerminalKey": "testRegressTwoFiscalAtolBank",
          "Amount": 90000,
          "OrderId": "{{$timestamp}}",
          "Description": "RS_TESTING",
          "CustomerKey": "a.grigorash",
          "Receipt": {
              "FfdVersion": "1.2",
              "ClientInfo": {
                  "Birthdate": "21.11.1995",
                  "Сitizenship": "643",
                  "DocumentCode": "40",
                  "DocumentData": "4507 443564",
                  "Address": "г. Краснодар ул. Привокзальная 1"
              },
              "Taxation": "osn",
              "Email": "ext.test.qa@tinkoff.ru",
              "Phone": "88005553535",
              "Customer": "Клиент",
              "CustomerInn": "516974792202",
              "Items": [
                  {
                      "AgentData": {
                          "AgentSign": "paying_agent",
                          "OperationName": "Позиция чека",
                          "Phones": [
                              "+790912312398"
                          ],
                          "ReceiverPhones": [
                              "+79221210697",
                              "+79098561231"
                          ],
                          "TransferPhones": [
                              "+79221210697"
                          ],
                          "OperatorName": "Tinkoff",
                          "OperatorAddress": "г. Тольятти",
                          "OperatorInn": "7710140679"
                      },
                      "SupplierInfo": {
                          "Phones": [
                              "+79221210697",
                              "+79098561231"
                          ],
                          "Name": "ООО Вендор товара",
                          "Inn": "7710140679"
                      },
                      "Name": "Тестовый товар",
                      "Price": 100000,
                      "Quantity": 1,
                      "Amount": 90000,
                      "Tax": "vat20",
                      "PaymentMethod": "full_prepayment",
                      "PaymentObject": "goods_with_marking_code",
                      "UserData": "Данные пользователя ext.test.qa@tinkoff.ru",
                      "Excise": 12.2,
                      "CountryCode": "056",
                      "DeclarationNumber": "12345678901",
                      "MeasurementUnit": "шт",
                      "MarkProcessingMode": "0",
                      "MarkCode": {
                          "MarkCodeType": "EAN8",
                          "Value": "12345678"
                      },
                      "MarkQuantity": {
                          "Denominator": "2",
                          "Numerator": "1"
                      },
                      "SectoralItemProps": [
                          {
                              "Number": "123/43",
                              "Date": "21.11.2020",
                              "Value": "test value SectoralItemProps",
                              "FederalId": "001"
                          }
                      ]
                  }
              ]
          }
      }
      ```

      Пример запроса без маркировки:
      ```json
      {
          "TerminalKey": "testRegressTwoFiscalAtolBank",
          "Amount": 90000,
          "OrderId": "{{$timestamp}}",
          "Description": "RS_TESTING",
          "CustomerKey": "a.grigorash",
          "Receipt": {
              "FfdVersion": "1.2",
              "Taxation": "osn",
              "Email": "ext.test.qa@tinkoff.ru",
              "Phone": "88005553535",
              "Customer": "Клиент",
              "CustomerInn": "516974792202",
              "Items": [
                  {
                      "AgentData": {
                          "AgentSign": "paying_agent",
                          "OperationName": "Позиция чека",
                          "Phones": ["+790912312398"],
                          "ReceiverPhones": ["+79221210697", "+79098561231"],
                          "TransferPhones": ["+79221210697"],
                          "OperatorName": "Tinkoff",
                          "OperatorAddress": "г. Тольятти",
                          "OperatorInn": "7710140679"
                      },
                      "SupplierInfo": {
                          "Phones": ["+79221210697", "+79098561231"],
                          "Name": "ООО Вендор товара",
                          "Inn": "7710140679"
                      },
                      "Name": "Тестовый товар",
                      "Price": 100000,
                      "Quantity": 1,
                      "Amount": 90000,
                      "Tax": "vat20",
                      "PaymentMethod": "full_prepayment",
                      "PaymentObject": "commodity",
                      "MeasurementUnit": "шт"
                       
                  }
              ]
          }
      }
      ```
  - name: Коды ошибок
    description: "\n| CODE | MESSAGE | DETAILS (опционально) |\n|---|---|---|\n| 0 | None |  |\n| 1 | Параметры не сопоставлены |  |\n| 2 | Отсутствуют обязательные параметры |  |\n| 3 | Внутренняя ошибка системы интернет эквайринга |  |\n| 4 | Не получится изменить статус платежа |  |\n| 5 | Обратитесь в поддержку, чтобы уточнить детали |  |\n| 6 | Не получилось привязать карту покупателя. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 7 | Неверный статус покупателя |  |\n| 8 | Неверный статус транзакции |  |\n| 9 | Переадресовываемый url пуст |  |\n| 10 | Метод Charge заблокирован для данного терминала |  |\n| 11 | Невозможно выполнить платеж |  |\n| 12 | Неверный параметр RedirectDueDate |  |\n| 13 | Оплата с мобильного телефона недоступна |  |\n| 13 | Оплата через WebMoney недоступна |  |\n| 14 | Платеж неверный. |  |\n| 15 | Не удалось осуществить платеж через EINV. |  |\n| 16 | Счет был отклонен. |  |\n| 17 | Неверные введенные данные. |  |\n| 18 | Не удалось осуществить платеж через MC. |  |\n| 19 | Не удалось осуществить платеж через WebMoney. |  |\n| 20 | Ошибка повторного идентификатора заказа. |  |\n| 21 | Внутренняя ошибка вызова сервиса ACQAPI. |  |\n| 27 | Кассовая ссылка на текущий момент недоступна для повторной активации |  |\n| 50 | Ошибка отправки нотификации. |  |\n| 51 | Ошибка отправки Email. |  |\n| 52 | Ошибка отправки Sms. |  |\n| 53 | Обратитесь к продавцу |  |\n| 54 | Повторное прохождение 3DS авторизации не допустимо. |  |\n| 55 | Повторите попытку позже | Не найдено оплаченных назначений платежа |\n| 60 | Запрещено получение документов по url для текущего терминала | Запрещено получение документов по url для текущего терминала |\n| 61 | Должен быть заполнен один из параметров: emailList или Url | Должен быть заполнен один из параметров: emailList или Url |\n| 62 | Запрещено получение документов по url для текущего systemId | Запрещено получение документов по url для текущего systemId |\n| 63 | Не найдена операция | Не найдена операция |\n| 64 | Невалидные данные в запросе | Невалидные данные в запросе |\n| 65 | Не удалось сформировать документ. Обратитесь в службу поддержки | Не удалось сформировать документ. Повторите операцию позднее |\n| 66 | Не удалось сформировать документ. Повторите операцию позднее | Запрещено получение документов по url для текущего терминала |\n| 67 | Не удалось сформировать документ. Повторите операцию позднее | Не удалось сформировать документ. Повторите операцию позднее |\n| 68 | Не удалось сформировать документ. Обратитесь в службу поддержки | Стороний сервис не доступен. |\n| 76 | Операция по иностранной карте недоступна. | Операция по иностранной карте недоступна. Воспользуйтесь картой российского банка |\n| 77 | Оплата иностранной картой недоступна. | Оплата по иностранной карте недоступна. Воспользуйтесь картой российского банка |\n| 78 | Выплата на иностранную карту недоступна. | Выплата на иностранную карту недоступна. Воспользуйтесь картой российского банка |\n| 79 | Возврат на иностранную карту недоступен. | Возврат на иностранную карту недоступен. Обратитесь в поддержку |\n| 96 | Ошибка Iris. |  |\n| 97 | Ошибка Jasper. |  |\n| 98 | Ошибка SubExt. |  |\n| 99 | Попробуйте повторить попытку позже | Банк, выпустивший карту, отклонил операцию |\n| 100 | • Попробуйте еще раз. Если ошибка повторится — обратитесь в поддержку<br>• Платеж не получится отменить, потому что деньги покупателя не были зарезервированы<br>• Платеж уже отменен<br>• Не получилось отменить платеж. Укажите сумму не больше, чем зарезервировано<br>• Покупатель опротестовал платеж в банке. Обратитесь в поддержку,чтобы уточнить детали<br>• Платеж уже подтвержден<br>• Нужно настроить подтверждение платежа через СМС (3DS) — для этого обратитесь в поддержку<br>• Карта покупателя неактивна |  |\n| 101 | Не пройдена идентификация 3DS. | Ошибка прохождения 3-D Secure |\n| 102 | • Обратитесь в поддержку, чтобы уточнить детали<br>• Сообщите покупателю, чтобы попробовал оплатить еще раз. Если ошибка повторится — обратитесь в поддержку |  |\n| 102 | Операция отклонена, пожалуйста обратитесь в интернет-магазин или воспользуйтесь другой картой. | Заказ не может быть оплачен, обратитесь службу поддержки |\n| 102 | Превышен лимит на сумму выплат в месяц. |  |\n| 102 | Отказ. Более двух успешных оплат с одного email в неделю по проекту dolyame.ru |  |\n| 102 | Отказ. Более двух успешных оплат с одного phone в неделю по проекту dolyame.ru. |  |\n| 102 | Отказ. Более двух успешных оплат с одной карты в неделю по проекту dolyame.ru. |  |\n| 102 | Отказ. Более двух успешных оплат с одной карты в сутки по проекту dolyame.ru. |  |\n| 102 | Отказ. Более двух успешных оплат с одного устройства в сутки по проекту dolyame.ru. |  |\n| 102 | Отказ. Более двух успешных оплат с одного устройства в неделю по проекту dolyame.ru. |  |\n| 102 | Отказ. Более двух успешных оплат с одного куки/идентификатора клиентского агента в сутки по проекту dolyame.ru. |  |\n| 102 | Отказ. Более двух успешных оплат с одного куки/идентификатора клиентского агента в неделю по проекту dolyame.ru. |  |\n| 102 | Отказ. Попытка оплаты с виртуальных или мошеннических бинов по проекту dolyame.ru. |  |\n| 103 | Недостаточно средств на счете |  |\n| 104 | Ошибка выполения рекуррента |  |\n| 105 | Нужно настроить автоплатежи по Maestro — для этого обратитесь в поддержку |  |\n| 106 | Карта не поддерживает 3DS проверку. Попробуйте другую карту. |  |\n| 107 | Неверно введен CardId. Проверьте, что такая карта была ранее привязана. |  |\n| 108 | Оплата разрешена только по 3DS картам. Попробуйте другую карту. |  |\n| 109 | Не найден dsTranId для сессии |  |\n| 110 | Не передан cres |  |\n| 111 | Передан некорректный cres |  |\n| 116 | Недостаточно средств на карте. |  |\n| 119 | Превышено допустимое количество запросов авторизации операции |  |\n| 120 | Попробуйте повторить попытку позже |  |\n| 123 | Попробуйте повторить попытку позже |  |\n| 125 | Попробуйте повторить попытку позже |  |\n| 191 | Некорректный статус договора, обратитесь к вашему менеджеру |  |\n| 201 | Поле PaymentId не должно быть пустым. |  |\n| 201 | Поле paymentMethod не должно быть пустым. |  |\n| 201 | Поле paymentObject не должно быть пустым. |  |\n| 201 | Поле measurementUnit не должно быть пустым. |  |\n| 202 | Терминал заблокирован. |  |\n| 203 | Параметры запроса не должны быть пустыми. |  |\n| 204 | Неверный токен. Проверьте пару TerminalKey/SecretKey. |  |\n| 205 | Неверный токен. Проверьте пару TerminalKey/SecretKey. | Указанный терминал не найден |\n| 206 | Email не может быть пустым. |  |\n| 207 | Параметр DATA превышает максимально допустимый размер. |  |\n| 208 | Наименование ключа из параметра DATA превышает максимально допустимый размер. |  |\n| 209 | Значение ключа из параметра DATA превышает максимально допустимый размер. |  |\n| 210 | Размер поля TerminalKey должен быть от {min} до {max}. |  |\n| 211 | Неверный формат IP. |  |\n| 212 | Размер поля OrderId должен быть от {min} до {max}. |  |\n| 213 | Размер поля Description должен быть от {min} до {max}. |  |\n| 214 | Поле Currency должно быть меньше или равно {value}. |  |\n| 215 | Размер поля PayForm должен быть от {min} до {max}. |  |\n| 216 | Размер поля CustomerKey должен быть от {min} до {max}. |  |\n| 217 | Поле PaymentId числовое значение должно укладываться в формат (<{integer} цифр>.<{fraction} цифр>). |  |\n| 218 | Значение PAN не является числовым. |  |\n| 219 | Неверный срок действия карты. |  |\n| 220 | Размер поля CardHolder должен быть от {min} до {max}. |  |\n| 221 | Значение CVV не является числовым. |  |\n| 222 | Поле CardId числовое значение должно укладываться в формат (<{integer} цифр>.<{fraction} цифр>). |  |\n| 223 | Поле RebillId числовое значение должно укладываться в формат (<{integer} цифр>.<{fraction} цифр>). |  |\n| 224 | Неверный формат Email. |  |\n| 225 | Неверный формат Email. |  |\n| 226 | Размер поля Email должен быть от {min} до {max}. |  |\n| 227 | Размер поля Phone должен быть от {min} до {max}. |  |\n| 228 | Размер поля MD должен быть от {min} до {max}. |  |\n| 229 | Размер поля PaRes должен быть от {min} до {max}. |  |\n| 230 | Размер поля Code должен быть от {min} до {max}. |  |\n| 231 | Не найден идентификатор карты. |  |\n| 233 | Размер поля CardId должен быть от {min} до {max}. |  |\n| 234 | Размер поля PAN должен быть от {min} до {max}. |  |\n| 235 | Размер поля RebillId должен быть от {min} до {max}. |  |\n| 236 | Размер поля Token должен быть от {min} до {max}. |  |\n| 237 | Размер поля PaymentId должен быть от {min} до {max}. |  |\n| 238 | Размер поля ExpDate должен быть от {min} до {max}. |  |\n| 239 | Размер поля CVV должен быть от {min} до {max}. |  |\n| 240 | Поле Amount числовое значение должно укладываться в формат (<{integer} цифр>.<{fraction} цифр>). |  |\n| 241 | Поле Currency должно быть больше или равно {value}. |  |\n| 242 | Размер поля InfoEmail должен быть от {min} до {max}. |  |\n| 243 | Ошибка шифрования карточных данных. |  |\n| 244 | Ошибка сопоставления карточных данных. |  |\n| 245 | Параметр AddCard не сопоставлен. |  |\n| 246 | Параметр SendEmail не сопоставлен. |  |\n| 247 | Параметр Amount не сопоставлен. |  |\n| 248 | Параметр CVV не сопоставлен. |  |\n| 249 | Параметр Currency не сопоставлен. |  |\n| 250 | Параметр DATA не сопоставлен. |  |\n| 251 | Неверная сумма. Сумма должна быть больше или равна {value} копеек. |  |\n| 252 | Срок действия карты истек. |  |\n| 253 | Валюта {value} не разрешена для данного терминала |  |\n| 254 | Дополнительные возможности отключены |  |\n| 255 | Платеж не найден |  |\n| 256 | Указан некорректный тип безопасной сделки | Указан некорректный тип безопасной сделки |\n| 257 | Некорректное значение признака последней выплаты. Используйте значения true или false | Некорректное значение признака последней выплаты. Используйте значения true или false |\n| 258 | Неверный параметр Ean13. |  |\n| 259 | Параметр EncryptedPaymentData не сопоставлен |  |\n| 260 | Максимальная длина номера телефона 30 символов |  |\n| 261 | Параметр Source не сопоставлен |  |\n| 262 | Истек срок действия родительского платежа |  |\n| 308 | Сумма всех позиций в чеке должна равняться сумме всех видов оплаты |  |\n| 309 | Поле Receipt не должно быть пустым. |  |\n| 310 | Дробная часть параметра Quantity не должна быть более {value} знаков |  |\n| 310 | Целая часть параметра Quantity не должна быть более {value} знаков |  |\n| 311 | Ошибка регистрации чека в Receipt Service. |  |\n| 312 | Ошибка получения чека из Receipt Service. |  |\n| 313 | Ошибка создания организации в Receipt Service. |  |\n| 314 | Ошибка создания кассы в Receipt Service. |  |\n| 315 | Касса не найдена. |  |\n| 316 | Максимальная длина номера телефона 19 символов. |  |\n| 317 | Неверное значение поля agentSign. |  |\n| 318 | Поле AgentSign не должно быть пустым. |  |\n| 319 | Поле SupplierInfo не должно быть пустым. |  |\n| 320 | Поле Inn в объекте SupplierInfo не должно быть пустым. |  |\n| 321 | Поле Receipts не должно быть пустым. |  |\n| 322 | Передана некорректная подпись |  |\n| 323 | Amount не совпадают |  |\n| 324 | Указанный тип отмены не может быть выполнен по операции |  |\n| 325 | Транзакция не найдена. |  |\n| 326 | Неверный amount. |  |\n| 327 | \"Терминал не поддерживает C2C переводы или не передан Route=\"\"C2C\"\" для C2C терминала\" |  |\n| 328 | Должны присутствовать данные для списания и данные для пополнения. |  |\n| 329 | Email или Phone обязательны при передаче чека |  |\n| 330 | Сумма в запросе больше чем в оригинальной транзакции |  |\n| 331 | Неверный терминал |  |\n| 332 | Поле Fee в объекте Shops должно быть больше или равно 0 |  |\n| 333 | Поле Amount в объекте Shops должно быть больше или равно 1 |  |\n| 334 | Суммы в чеке и в платеже не совпадают. |  |\n| 335 | OrderId {value} не найден для TerminalKey {value} |  |\n| 381 | Возможна привязка только резидентных карт |  |\n| 382 | Возможна привязка только нерезидентных карт |  |\n| 383 | Поле markProcessingMode должно быть заполнено для маркированных товаров |  |\n| 383 | Поле markCode должно быть заполнено для маркированных товаров |  |\n| 383 | Поле sectoralItemProps должно быть заполнено для маркированных товаров |  |\n| 383 | Поле markQuantity должно быть заполнено для маркированных товаров |  |\n| 383 | Поле {value} для маркированных товаров должно принимать значение: {value} |  |\n| 383 | markCode.value имеет некорректное значение |  |\n| 383 | numerator и denominator должны быть больше 0 |  |\n| 383 | numerator должен быть строго меньше denominator |  |\n| 383 | Для версии кассы ФФД 1.2 объекты AgentData и SupplierInfo должны быть переданы в Items |  |\n| 384 | Для C2C запрещено проводить рекуррент по данной ПС | Для C2C запрещено проводить рекуррент по данной ПС |\n| 385 | Поле markQuantity передается только для маркированных товаров |  |\n| 385 | Поле markProcessingMode передается только для маркированных товаров |  |\n| 386 | markQuantity заполняется только для дробного расчета за штучный маркированный товар |  |\n| 401 | Внутренняя ошибка системы. |  |\n| 402 | Повторите попытку позже. |  |\n| 403 | Превышен лимит на количество пополнений в месяц. |  |\n| 404 | Превышен лимит на сумму пополнения через бесконтактные сервисы. |  |\n| 405 | Превышен лимит на сумму пополнения по виртуальной карте. |  |\n| 406 | Превышен лимит на сумму пополнения в месяц через мобильное приложение. |  |\n| 407 | Не найдено |  |\n| 410 | Данный тип перевода для терминала не доступен |  |\n| 411 | Сертификат не найден |  |\n| 412 | Истек срок действия сертификата |  |\n| 413 | Сертификат заблокирован |  |\n| 414 | Сертификат уже сохранен для данного терминала |  |\n| 415 | Дата начала срока действия сертификата еще не наступила |  |\n| 416 | Некорректное значение параметра SetStatus |  |\n| 417 | Ошибка обработки сертификата |  |\n| 419 | Параметр account объекта DATA должен быть заполнен корректно для MCC: 6050/6051 |  |\n| 500 | Добавление карты к данному терминалу запрещено. |  |\n| 501 | Терминал не найден. |  |\n| 502 | Карта по requestKey не найдена. |  |\n| 503 | CustomerKey не найден. |  |\n| 504 | Не удалось провести платеж при привязке карты. |  |\n| 505 | Не удалось привязать карту. Внутренняя ошибка. |  |\n| 506 | Карта добавлена в черный список. |  |\n| 507 | Карта не поддерживает 3DS проверку. Попробуйте другую карту. |  |\n| 508 | Неверный номер карты. |  |\n| 509 | Не удалось выполнить отмену при привязке карты. |  |\n| 510 | Карта уже привязана к переданному CustomerKey. |  |\n| 511 | Проверка 3DS не пройдена. |  |\n| 512 | Не удалось выполнить запрос на проверку 3DS. |  |\n| 513 | Не удалось выполнить платеж после прохождения 3DS. |  |\n| 514 | Введена неверная сумма холдирования. |  |\n| 515 | Внутренняя ошибка. |  |\n| 600 | Карта добавлена в черный список |  |\n| 600 | Интернет-магазин отклонил операцию по данной карте. Обратитесь в интернет-магазин для выяснения причин отказа в платеже. |  |\n| 601 | Разрешены операции только по MasterCard |  |\n| 603 | Превышено количество попыток оплаты с данной карты |  |\n| 604 | Обратитесь в поддержку, чтобы уточнить детали |  |\n| 619 | Отсутствуют обязательные данные отправителя | Не переданы персональные данные отправителя для операции emoney2card более 15000 руб. |\n| 620 | Проверьте сумму — она не может быть равна 0 | Сумма операции не может быть равна 0 |\n| 623 | Выплата по этому заказу уже прошла | Запрещено проводить платеж с OrderId для которого уже есть успешный платеж. |\n| 632 | Превышен лимит на сумму операции | Лимит на сумму пополнения emoney2card. См. лимиты |\n| 633 | Превышен лимит на количество переводов в день по иностранным картам | Лимит на кол-во пополнений emoney2card для карт эмитированных нерезидентами РФ за 1 отчетный день |\n| 634 | Превышен лимит на сумму переводов по номеру карты в месяц | Лимит на сумму пополнения emoney2card по номеру карты одного получателя в отчетный месяц |\n| 637 | Не хватает данных получателя или отправителя для выплаты на иностранную карту. Проверьте заполнение | Отсутствуют персональные данные получателя/отправителя при переводе на иностранную карту |\n| 642 | Проверьте номер карты | Карта не прошла проверку по алгоритму Луна |\n| 648 | Магазин заблокирован или еще не активирован. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 650 | Сообщите покупателю, чтобы попробовал оплатить еще раз. Если ошибка повторится — обратитесь в поддержку |  |\n| 651 | Не получилось совершить платеж. Свяжитесь с поддержкой | Передаваемый Request_Id не найден. |\n| 700 | Список карт Masterpass недоступен для данного магазина. |  |\n| 701 | Сервис MasterPass недоступен. |  |\n| 702 | Поле maid и saav должно быть задано в настройках терминала. |  |\n| 703 | Обратитесь в поддержку, чтобы уточнить детали |  |\n| 800 | Комиссия не найдена |  |\n| 903 | Повторите попытку позже |  |\n| 914 | Платеж не найден |  |\n| 926 | Сделка уже закрыта | Сделка уже закрыта |\n| 927 | Сделка не найдена | Сделка не найдена |\n| 991 | Для использования 3dsType необходимо установить 3ds терминал | Для использования TDS роутинга необходимо пользоваться ТДС терминалом |\n| 999 | Попробуйте повторить попытку позже |  |\n| 1001 | Свяжитесь с банком | Свяжитесь с банком, выпустившим карту, чтобы провести платеж |\n| 1003 | Неверный магазин | Неверный номер магазина. Идентификатор магазина недействителен. |\n| 1004 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1005 | Платеж отклонен банком, выпустившим карту | Платеж отклонен банком, выпустившим карту |\n| 1006 | Платеж не прошел | Свяжитесь с банком, выпустившим карту, чтобы провести платеж |\n| 1007 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1008 | Банк, который выпустил карту, отклонил платеж  |  |\n| 1012 | Банк, который выпустил карту, отклонил платеж  |  |\n| 1013 | Банк, который выпустил карту, отклонил платеж — сумма превышает лимит по карте | Сумма превышает\_лимит платежа вашего банка. Воспользуйтесь другой картой или обратитесь в банк |\n| 1014 | Карта недействительна | Неправильные реквизиты — проверьте их или воспользуйтесь другой картой |\n| 1015 | Неверный номер карты | Неверный номер карты |\n| 1017 | Попробуйте снова или свяжитесь с банком, выпустившим карту | Попробуйте снова или свяжитесь с банком, выпустившим карту |\n| 1018 | Неизвестный статус платежа |  |\n| 1019 | Банк, который выпустил карту, отклонил платеж — сумма превышает лимит по карте |  |\n| 1030 | Повторите попытку позже. | Не получилось оплатить. Попробуйте еще раз |\n| 1033 | Истек срок действия карты |  |\n| 1034 | Попробуйте повторить попытку позже | Не получилось оплатить. Воспользуйтесь другой картой или обратитесь в банк, выпустивший карту |\n| 1038 | Превышено количество попыток ввода ПИН-кода — попробуйте снова или обратитесь в банк, выпустивший карту |  |\n| 1039 | Платеж отклонен — счет не найден |  |\n| 1041 | Карта утеряна | Карта утеряна. Свяжитесь с банком, выпустившим карту |\n| 1043 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1051 | Недостаточно средств на карте. | Не получилось оплатить. На карте недостаточно средств |\n| 1053 | Платеж отклонен — счет не найден |  |\n| 1054 | Истек срок действия карты | Неправильные реквизиты — проверьте их или воспользуйтесь другой картой |\n| 1055 | Неверный ПИН |  |\n| 1057 | Покупатель запретил такие операции для своей карты |  |\n| 1058 | Покупатель запретил такие операции для своей карты |  |\n| 1059 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1061 | Покупатель превысил лимит платежей по своей карте |  |\n| 1062 | Банк, который выпустил карту, отклонил платеж |  |\n| 1063 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1064 | Проверьте сумму |  |\n| 1065 | Покупатель превысил лимит платежей по своей карте |  |\n| 1071 | Токен просрочен | Токен просрочен |\n| 1075 | Покупатель оплатил максимум раз по своей карте за день |  |\n| 1076 | Не получилось отменить резервирование. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 1077 | Коды не совпадают — попробуйте снова |  |\n| 1078 | Данный тип операции не поддерживается картой |  |\n| 1080 | Плательщик ввел неверный срок действия карты |  |\n| 1082 | Неверный CVV | Неправильные реквизиты — проверьте их или воспользуйтесь другой картой |\n| 1085 | Операция успешна | Успех |\n| 1086 | Платеж отклонен — не получилось подтвердить ПИН-код |  |\n| 1088 | Банк, который выпустил карту, отклонил платеж |  |\n| 1089 | Попробуйте повторить попытку позже | Не получилось оплатить. Попробуйте еще раз или обратитесь в банк, выпустивший карту |\n| 1091 | Технические работы в банке, который выпустил карту |  |\n| 1092 | Банк, который выпустил карту, отклонил платеж |  |\n| 1093 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1094 | Банк, который выпустил карту, считает платеж подозрительным |  |\n| 1096 | Системная ошибка | Системная ошибка |\n| 1099 | Способ оплаты отключен |  |\n| 1116 | Некорректная сумма выдачи | Сумма баланса меньше суммы переданной в операции выдачи |\n| 1119 | Параметр account объекта DATA должен быть заполнен корректно для MCC: 6050/6051 | Передан некорректный номер кошелька |\n| 1125 | Некорректное значение OperationInitiatorType. Должно быть одно из списка\n| 1126 | Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType\n| 1201 | Обратитесь в поддержку, чтобы уточнить детали |  |\n| 1202 | Сумма платежа превышает лимит по разовой операции в этом магазине. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 1203 | Сумма платежа превышает лимит по разовой операции или количеству операций в этом магазине. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 1204 | Достигнут лимит по суточному обороту. Чтобы изменить лимит, обратитесь в поддержку |  |\n| 1205 | Магазин не принимает карты этой страны. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 1207 | Сообщите покупателю, чтобы попробовал оплатить еще раз. Если ошибка повторится — обратитесь в поддержку |  |\n| 1217 | Воспользуйтесь другой картой или обратитесь к продавцу | Воспользуйтесь другой картой или обратитесь к продавцу |\n| 1218 | Воспользуйтесь другой картой или обратитесь к продавцу | Воспользуйтесь другой картой или обратитесь к продавцу |\n| 1235 | Для карт «Мир» нужно настроить подтверждение платежей по СМС 3DS 2.0. Обратитесь в поддержку, чтобы уточнить детали |  |\n| 1316 | Запрещено проведение авторизации | Запрещено проведение авторизации с использованием 3DS |\n| 1502 | Недостаточно средств на счете компании | Insufficient funds |\n| 1503 | Некорректный статус счета, обратитесь в поддержку | Invalid account status |\n| 2014 | Не пройдена идентификация 3DS |  |\n| 2015 | Mерчант с таким именем и паролем не найден. |  |\n| 2200 | Превышено допустимое количество запросов авторизации операции |  |\n| 3001 | Оплата через QrPay недоступна |  |\n| 3002 | Недостаточный баланс счёта для отмены. |  |\n| 3003 | Отмена платежа в связи с мошенничеством. |  |\n| 3004 | Способ СБП недоступен для магазина. |  |\n| 3005 | Оплата через СБП не доступна |  |\n| 3006 | Банк получателя не может принять возврат. Выберите другой банк. |  |\n| 3007 | Отказ в проведении операции от СБП. |  |\n| 3008 | У получателя нет расчетного счета в этом банке. Выберите другой банк. |  |\n| 3009 | Отказ в проведении операции от СБП или банка получателя. |  |\n| 3010 | У получателя нет расчетного счета в этом банке. ФИО некорректное. |  |\n| 3011 | Оплата через E2C недоступна |  |\n| 3012 | Привязка счета не найдена |  |\n| 3013 | Рекуррентные платежи недоступны |  |\n| 3014 | AccountToken не найден |  |\n| 3015 | Неверный статус AccountToken |  |\n| 3016 | Невозможно создать QR |  |\n| 3017 | Переданное значение RedirectDueDate вне допустимого диапазона. |  |\n| 3018 | Список банков не найден. |  |\n| 3019 | Не включен СБП в личном кабинете |  |\n| 3028 | Банк покупателя отклонил возврат. Попросите покупателя обратиться туда или выберите другой его банк |  |\n| 3029 | Слишком много неудачных попыток за час. Попробуйте снова через час или выберите другой банк покупателя | По требованиям НСПК в час допустимо проводить не более 1 попытки возврата по операции |\n| 3030 | Слишком много неудачных попыток за сутки. Попробуйте еще раз завтра или выберите другой банк покупателя | По требованиям НСПК в день допустимо проводить не более 5 попыток возврата по операции |\n| 3031 | Банк покупателя отклонил возврат. Попросите покупателя обратиться туда или выберите другой его банк |  |\n| 3038 | Возврат средств через СБП доступен только со счетом в банке Тинькофф. Измените счет в настройках вашего магазина |  |\n| 3101 | Оплата по MirPay недоступна для магазина |  |\n| 3102 | DeepLink для оплаты по MirPay не создан |  |\n| 8001 | Операция запрещена для рассрочки |  |\n| 8002 | Tinkoff Credit Broker недоступен. Повторите попытку позже. |  |\n| 8003 | Операция запрещена для покупки долями. |  |\n| 8004 | BNPL недоступен. Повторите попытку позже. |  |\n| 9001 | Попробуйте повторить попытку позже |  |\n| 9999 | Внутренняя ошибка системы. |  |\n| - | Количество товара должно быть больше нуля |  |\n| - | Максимальная длина rawcode 223 символов |  |\n| - | Касса принимает значение markCode только с типом rawcode |  |\n| - | Для данной кассы ожидалось одно из itemCode или markСode |  |\n| - | Для данной кассы ожидалось либо itemCode, либо markCode |  |\n| - | Для данной кассы предусмотрена передача только markСode |  |"
  - name: Типовые ошибки Онлайн-кассы
    description: |-
      | Ошибка | Решение | Онлайн-касса |
      |---|---|---|
      |Состояние чека не найдено. Попробуйте позднее|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|На всех кассах|
      |Сервер не смог обработать входной чек|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|На всех кассах|
      |Код ошибки, который начинается с "<!DOCTYPE html" и тд.|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|Orange Data|
      |Произошла ошибка при фискализации, обратитесь в службу технической поддержки|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|На всех кассах|
      |Если чек зависает в очереди на фискализацию (С интеграцией через aQsi)|Нужно исправить ошибку самостоятельно или через поддержку Акси.<br>Инструкция:<br>• в личном кабинете Акси вкладка Настройки / Интеграции / Фискализация чеков на aQsi 5 из Оранж Дата / сгенерировать токен (ключ) / скопируйте токен;<br>• открыть ЛК Оранж Дата / раздел Услуги / вставьте токен(ключ) / сформируйте счет без ошибки.<br>Инструкция доступна по [ссылке](https://aqsi.ru/partner-support/vozmozhnyie-oshibki-i-sposobyi-ih-resheniya).|Orange Data|
      |REGISTRATION_REQUEST_FAILED - Ошибка в запросе. Причины могут быть разные.|Основные причины такой ошибки в том, что вы не передали версию ФФД 1.2 в своем запросе, при том, что терминал и касса настроены на ФФД 1.2.|На всех кассах|
      |Неизвестная организация|Онлайн-касса не зарегистрирована. Вам необходимо обратиться в кассовый сервис и завершить интеграцию.|На всех кассах|
      |Сумма не наличных оплат превышает сумму чека|Ошибка заключается в том, что Вы в запросе передаете в одной или нескольких позициях чека такие параметры, как price (Цена) и quantity (Количество), что их произведение не равняется amount (Сумма) в данной позиции. С такой ошибкой необходимо сделать чек коррекции по этой операции в ЛК кассы.|На всех кассах|
      |Код товарной номенклатуры имеет неизвестный префикс|Неверный код товара (Параметр - EAN13). Вам нужно исправить параметр "EAN13" в своем запросе (Для уточнения можно обратиться в поддержку Вашей кассы). С такой ошибкой необходимо сделать чек коррекции по этой операции в ЛК кассы.|На всех кассах|
      |Указанная версия ФФД не соответствует режиму обработки документов ФФД 1.2|Необходимо проверить версию ФФД на Вашем терминале (В ЛК ИЭ\Раздел Онлайн-кассы) и в запросе. Если версии не совпадают, нужно исправить версию на актуальную в запросе или в настройках онлайн-кассы в ЛК ИЭ.|На всех кассах|
      |Ошибка при закрытии документа: Некорректное значение параметров команды ФН|Исчерпан ресурс ФН (Вам надо обращаться в онлайн-кассу)|На всех кассах|
      |Не удалось перейти в режим регистрации после закрытия смены: Смена превысила 24 часа|Исчерпан ресурс ФН (Вам надо обращаться в онлайн-кассу)|На всех кассах|
      |Если поле статуса чека пустое|Ошибка из-за того, что Вы отправляете запросы на версию ФФД 1.2, а касса и терминал настроены на версию ФФД 1.05. Вам нужно отправлять запросы на версию ФФД 1.05 или переключить настройки кассы и магазина на ФФД 1.2. С такой ошибкой необходимо сделать чек коррекции по этой операции в ЛК кассы.|На всех кассах|
      |AuthWrongUserOrPassword|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|Ekomkassa|
      |Неизвестная ошибка обработки|У Вас не доступна онлайн-касса. Рекомендуем обратиться в поддержку онлайн-кассы.|Бизнес.Ру|
      |Некорректный запрос. (Ошибка в поле items: Количество элементов в поле receipt.items не может превышать 100.)|Необходимо сделать чек коррекции в личном кабинете кассы.<br>Ошибка из-за того, что Вы передали более 100 позиций в чеке. В таком случае для будущих операций рекомендуем делить платеж на 2 и более.|Бизнес.Ру|
      |Не найдена интеграция с платежной системой|Указали неправильные данные для Онлайн-кассы в ЛК Тинькофф. Логин и пароль нужно взять из личного кабинета https://check.business.ru/. Раздел "Интеграции" - Тинькофф. Там указан логин и придуманный пользователем пароль. Также данные можно уточнить в поддержке приложения|Бизнес.Ру|
      |Неизвестная организация|Проблема с настройкой интеграции на стороне кассы. Рекомендуем обратиться в поддержку Вашей кассы|Orange Data и aQsi online|
      |Очередь документов переполнена|Причиной может быть выключенная касса aQsi или отсутствие сети интернет. Именно по этой причине все чеки которые поступают по API, встают в очередь на фискализацию в кассовом аппарате aQsi. Чем дольше касса не в сети, тем больше переполнение чеков на фискализацию.<br>Вам нужно обратиться в поддержку кассы.|Orange Data|
      |В группе нет ни одного устройства|Такая ошибка встречается, если у Вас не прописана/неверно прописана группа касс в настройках кассы в ЛК ИЭ\Раздел онлайн-кассы. Группу можно узнать в кассовом сервисе и внести изменения в ЛК ИЭ. (В 90% случаев надо скорректировать на aQsi)|Orange Data|
      |Нет оплаченных ККМ для обработки чека|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|CloudKassir|
      |Терминал заблокирован|Ошибка происходит на стороне кассы. Вам нужно обратиться в поддержку кассы и уточнить причины блокировки.|CloudKassir|
      |Нет касс без признака БСО для организации|(У партнера настроена касса с включенным параметром "Только для печати БСО"). Чеки, которые направляются на формирование в кассу, должны иметь признак БСО. По чеку, который находится в ошибке, означает, что чек был отправлен без признака БСО.<br>Решение:<br>Нужно отключить передачу БСО на стороне кассы.|CloudKassir|
      |Код группы, указанный в запросе, не соответствует токену|Запрос и терминал настроены на ффд 1.05. Ошибка возникает из-за того, что на стороне кассы настроено ффд 1.2 (Или наоборот. Несоответствие версий). Нужно скорректировать версии ФФД на стороне ИЭ и кассы|На всех кассах|
      |CLIENT_INFO_EMAIL_AND_PHONE_NOT_FOUND|Ошибка происходит из-за того, что Вы не передаете в запросе ФФД 1.2, при том, что касса и терминал настроены на эту версию.|На всех кассах|
      |Неизвестная группа|На терминале установлена некорректная группа касс. Вам нужно уточнить корректную группу касс в поддержке онлайн-кассы и изменить ее в настройках кассы в ЛК ИЭ.|Orange Data и aQsi online|
      |Таймаут сообщения в очереди|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|АТОЛ|
      |Некорректное значение параметров команды ФН|Вам нужно уточнить причины ошибки в поддержке кассы. Скорее всего Вые передаете некорректно СНО (На стороне кассы в настройках указана другая СНО).|АТОЛ|
      |Во время регистрации чека выяснилось, что в группе нет активных касс|Вам необходимо активировать тариф в ОФД Платформа. Нужно обратиться к тех. поддержке ОФД Платформа или самостоятельно активировать тариф в личном кабинете ОФД.|АТОЛ|
      |Пользователь заблокирован|Ошибка возникает на стороне кассы. Скорее всего касса заблокировала Вас из-за того, что их услуги не были оплачены.<br>Уточнение можно получить в поддержке кассы.|АТОЛ|
      |Ошибка обмена с ФН на уровне интерфейса I2C|Данная ошибка произошла из-за того, что ФН не был доступен, могли возникнуть технические неисправности в самой кассе. С такой ошибкой необходимо сделать чек коррекции по этой операции в ЛК кассы.|АТОЛ|
      |Недопустимое сочетание реквизитов|Данная ошибка возникает из-за того, что в запросе передается признак определённого агента, а на кассе данный признак не установлен.<br>Клиенту необходимо подать заявку на изменение данных в ЛК АО.<br>1. Зайти в ЛК АТОЛ Онлайн => раздел "Изменение данных".<br>2. Далее переходите на 3 шаг и поставить галочку "нужный агент".<br>3. Сохранить и отправить заявку администратору.|АТОЛ|
      |Операция "sell" не поддерживается|У Вас приостановлена услуга фискализации. Необходимо пополнить баланс и продлить действие услуги.<br>Вам нужно обращаться в кассу для получения подробностей.|КОМТЕТ Касса|
      |WrongLoginOrPassword|Неправильный логин или пароль.<br>Вам нужно уточнить интеграционные данные от кассы и ввести их в нашем ЛК ИЭ\Магазины\Онлайн-касса повторно.|Ekomkassa|
      |ErrorIncomingMissingToken|Нужно проверить актуальность логина и пароля от кассы, ошибка может возникать либо в случае смены пароля в ЛК кассы, но не поменяли в настройках интеграции (В ЛК ИЭ), либо в случае когда в момент отправки запроса ЛК кассы Вы был заблокированы.  Для уточнений рекомендуем обратиться в поддержку кассы и сделать чек коррекции по этой операции.|Ekomkassa|
      |Retry limit equals 20 was exceeded|Данная ошибка может быть вызвана разными причинами, например: недоступность кассы, как правило чеки с данной ошибкой автоматически обрабатываются через какое-то время, буквально означает что API не получает от кассы статус отправленного ранее запроса на чек. Если чек не сформируется в течение суток, Вам нужно сделать чек коррекции в ЛК кассы.|Ekomkassa|
      |Kkm is busy at the moment|Ошибка появляется на интегрированных кассах Эвотор, означает что касса перегружена задачами, обычно такие ошибки автоматически исправляет сервер, автоматически делает новый запрос через небольшой интервал времени, до тех пор пока касса не примет чек. Если чек не сформируется в течение суток, Вам нужно сделать чек коррекции в ЛК кассы.|Ekomkassa|
      |Операция невозможна, недостаточно питания|Ошибка возникает на интегрированных кассах Эвотор, сервер автоматически перезапускает транзакцию, через определенный период времени, обычно ошибка возникает когда на кассу Эвотора, идет слишком много запросов одновременно. Если чек не сформируется в течение суток, Вам нужно сделать чек коррекции в ЛК кассы|Ekomkassa|
      |Session time expired|Ошибка из-за того, что на кассе не переоткрылась смена. Данная ошибка автоматически исправляется кассовым сервером, запрос на чек перезапускается через определенный интервал времени.​  Если этого не произошло в течение суток, Вам нужно сделать чек коррекции в ЛК кассы.|Ekomkassa|
      |Команда не реализуется в данном режиме ККТ|Ошибка возникает в случае, если касса занята другим процессом, который не дает работать с ФН, в такой ситуации сервер кассы автоматически делает перезапуск чека через определенный интервал времени. Для получения более подробной информации рекомендуем обратиться в поддержку кассы.|Ekomkassa|
      |Авторизация невозможна. Неверные учетные данные|По этой ошибке возможны 2 варианта решения:<br>1. Ошибка связана в тем, что при подключении кассы Ferma Вы указали неверные данные в ЛК ИЭ.<br>2. Также такая ошибка возникает, если у Вас версия ФФД 1.2 на терминале и кассе, но Вы не передаете версию ФФД 1.2 в запросе.|Ferma|
      |По кассе Ferma не завершена регистрация в ФНС|Нужно завершить регистрацию кассы в Личном кабинете Ferma или обратиться в поддержку OFD.RU по адресу ofd@ofd.ru или по номеру 84955409911.|Ferma|
      |Не оплачена касса Ferma|Вам нужно оплатить кассу для восстановления работы: Продлите услугу в Личном кабинете Ferma или обратитесь в поддержку OFD.RU по адресу ofd@ofd.ru или по номеру 84955409911.|Ferma|
      |Таймаут сообщения в очереди|ККТ отключена, или на ПК клиента не запущено приложение для фискализации чеков. Точную причину ошибки рекомендуем уточнить в поддержке кассы.|На всех кассах|
      |Нет касс соответствующих переданному типу платёжного агента|Ошибка говорит о том, что Вы передаете такой тип агента, который не настроен на стороне кассы или отличается от него. С такой ошибкой необходимо сделать чек коррекции по этой операции в ЛК кассы.|На всех кассах|
      |В группе нет ни одного устройства с требуемым признаком агента|Ошибка говорит о том, что Вы передаете такой тип агента, который не настроен на стороне кассы или отличается от него. С такой ошибкой необходимо сделать чек коррекции по этой операции в ЛК кассы.|На всех кассах|
      |Неизвестная ошибка|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|CloudKassir|
      |Network error|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|На всех кассах|
      |Непредвиденная ошибка|Данная ошибка возникает на стороне кассы. Нужно обратиться в поддержку Вашей онлайн-кассы и уточнить причины данной ошибки в чеке.|Ferma|
  - name: Тестовые карты
    description: |-
      Тестовые карты нужны как для прохождения тест-кейсов, так и совершения тестовых платежей. Это два разных процесса, в каждом из которых используются разные данные тестовых карт, а именно:

      * для прохождения тест-кейсов используется тестовый терминал (с приставкой DEMO).
      <br> Запросы с него нужно отправлять на боевую среду (https://securepay.tinkoff.ru/v2) и использовать тестовые карты из тест-кейса. 
      <br> Данные карт для тест-кейсов можно увидеть в личном кабинете. Для этого нужно выбрать раздел «Магазины» - «Терминалы» - «Тестовый» - «Тестировать». При выборе определенного тест-кейса появится информация с данными карты.

      * для совершения тестовых платежей используется боевой терминал (без приставки DEMO). 
      <br> Запросы с него нужно отправлять на тестовую среду (https://rest-api-test.tinkoff.ru/v2) и использовать тестовые карты, указаные ниже

      <details><summary><b>Информация по прохождению тест-кейсов</b></summary>
      <br>

      1. Для прохождения тест-кейса №1 в запросе Init НЕ нужно передавать Reсurrent = Y (recurrent:true), так как флаг рекуррентов не даст системе засчитать платеж как тест-кейс

      2. При получении ошибки "Ошибка нотификации: не получаем ответ ОК" при прохождении тест-кейса №2 нужно проверить правильность передачи ответа на нотификацию. Верный ответ - 200:ОК 

      3. Для прохождения тест-кейсов в запросе Init нельзя передавать параметры, которые противоречат настройкам терминала.
      > Например, на терминале установлена двухстадийная оплата, а в Init был передан pay_type = О (признак одностадийности). 
      Если нужно поменять тип проведения платежа, то в ЛК ИЭ заходим на вкладку "Магазины", переходим в нужный и на вкладке "Способы оплаты" выбираем "Списание средств". Далее ставим отметку напротив нужного пункта: "Списывать сразу (одностадийная)" или "Блокировать на счету покупателя (двустадийная)".
      </details>

      Вы можете использовать любой срок действия для тестовой карты. Можно произвести несколько тестовых привязок с разными сроками действия и потом с помощью метода GetCardList посмотреть, какие карты привязаны. Тестовые карты используются при проведении операций на тестовой среде
       
      Описание параметра **TransStatus** находится в описании параметров ответа cres (JSON/JWE cres объект)

      Список тестовых карт для оплаты через протокол 3ds2.0 

      |Поведение карты|TransStatus|Описание|PAN|
      |---|---|---|---|
      |**Ошибка оплаты** <br />Ошибка при списании|Нет|-|2201382000000021 <br /> expDate: 12/25 <br /> cvv: 123|
      |**Ошибка оплаты** <br /> Недостаточно средств|Нет|-|2201382000000831 <br /> expDate: 12/25 <br /> cvv: 123|
      |**Успешная оплата**<br />3ds 2.0<br /> Frictionless Flow|Нет|**AUTHENTICATION_SUCCESSFUL**<br />Успешное прохождение аутентификации без ввода пароля|2201382000000013<br /> expDate: 12/25<br /> cvv: 123|
      |**Успешная оплата**<br />3ds 2.0<br /> Challenge flow|C|**CHALLENGE_REQURIED**<br />Требуется полное прохождение 3DS с редиректом на acsURL. Открытие формы для ввода одноразового пароля (OTP)|2201382000000047<br /> expDate: 12/25<br /> cvv: 123 <br /> Метод аутентификации на ACS: Static Passcode. Ввести верный пароль **1qwezxc**|
      |**Ошибка оплаты**<br /> 3ds2.0<br />Restricted|R |**ACCOUNT_VERIFICATION_REJECTED**<br />Эмитент отклонил аутентификацию|2201382000000005<br />expDate: 12/25<br />cvv: 123|
      **Ошибка оплаты**<br />Frictionless Flow<br /> Not Authenticated|N |**NOT_AUTHENTICATED**<br />Карта не поддерживает 3DS |2201382000000021<br />expDate: 12/25<br />cvv: 123|
      |**Успешная оплата**<br/> Card not Enrolled (Attempt)|A|**ATTEMPTS_PROCESSING_PERFORMED**<br/>Эмитент недоступен или не поддерживает 3DS v2.1. Платежная система разрешает провести Pay, но эмитент мог отклонить авторизацию|2201382000000039<br/>expDate: 12/25<br/>cvv: 123|

      Список тестовых карт для оплаты без 3ds 

      |Поведение карты|TransStatus|Описание|PAN|
      |---|---|---|---|
      |**Успешная оплата**|Нет|-|2200770239097761 <br /> expDate: 12/25 <br /> cvv: 123|

      Карты Mock-сервиса (если не работает тестовая карта)

      |Поведение карты|TransStatus|Описание|PAN|
      |---|---|---|---|
      |**Успешная оплата**|Y|**AUTHENTICATION_SUCCESSFUL_REASON_18**<br/>Успешное прохождение аутентификации без ввода пароля c заполненной transStatusReason High confidence, т.е. высокая уверенность в надежности|2201382000000591|
  - name: Правила расчета возмещений по операционному реестру
    description: |-
      При наличии РКО от Тинькофф Банка выплаты производятся в календарные дни. При отстутсвии – в дни
      работы расчетно-кассового центра по графику Центробанка.

      Возмещение считается за один календарный день.

      |Тип операции|Пояснение|Плюс/минус|
      |---|---|---|
      |Debit|Операция оплаты|Плюс|
      |Credit|Операция возврата|Минус|
      |Fee|Комиссия по операции оплаты (в том числе неуспешной)|Минус|
      |CancelRefund|Отмена возврата|Плюс|
      |Chargeback|Опротестование операции эмитентом|Минус|
      |2Chargeback|Арбитражное опротестование эмитентом|Минус|
      |Chargeback_Reversal|Отмена опротестования операции эмитентом|Плюс|
      |2Chargeback_Reversal|Отмена арбитражного опротестования операции эмитентом|Плюс|
      |CR_Chargeback|Возврат операции Refund от эмитента (карта или договор закрыты)|Плюс|
      |Representment|Обратное опротестование Chargeback Тинькофф|Плюс|
      |Representment_Reversal|Отмена обратного опротестования 2Chargeback Тинькофф|Минус|
      |AUTH_FAIL|Неуспешная авторизация. Сама операция в расчете не участвует. Участвует только комиссия за них.|-|
      |CreditClientCorrection|FeeColl (Ручное урегулирование операции с банкомэмитентом по договоренности или при списании с Тинькофф по клирингу)|Минус|
      |DebitClientCorrection|FeeColl (Ручное урегулирование операции с банкомэмитентом по договоренности или при списании с Тинькофф по клирингу)|Плюс|
      |CreditCorrection|Списание с ТСП претензии клиента банка Тинькофф|Минус|
      |DebitCorrection|Зачисление ТСП претензии клиента банка Тинькофф|Плюс|
  - name: Формат реестра
    description: |
      **Тип файла:** текстовый файл в кодировке Win CP-1251. Разделитель полей — символ «;» (точка с запятой).

      **Тело Реестра** состоит из строк. Одна строка — одна Операция. Каждая строка тела Реестра заканчивается знаком конец строки/перевод каретки (CR/LF) и должна содержать информацию из таблицы ниже.

      |№ Поля|Наименование/содержание поля|Размерность поля|
      |---|---|---|
      |1|Порядковый номер|Порядковый номер строк и тела реестра|
      |2|Номер карты/телефона|Маскированный номер карты: 1234 56** **** 7890 / Маскированный номер телефона: +7(903)XXX-XX-11|
      |3|ПС|Наименование Платежной Системы:<br>• Visa<br>• MC<br>• Мir<br>• SBP<br>• Tinkoff Pay<br>• SberPay|
      |4|Номер заказа|Цифры, буквы. Кроме спецсимволов, не более 256 знаков|
      |5|Дата операции|DD.MM.YYYY|
      |6|Время операции|HH:MM:SS|
      |7|Временная зона|MSK|
      |8|Код авторизации|Шестизначный буквенно-цифровой код. Уникальный 32-значный номер операции СБ|
      |9|Код терминала|Номер терминала в системах банка|
      |10|Дата обработки операции|DD.MM.YYYY|
      |11|Дата перечисления|DD.MM.YYYY|
      |12|Сумма операции (руб.)|Сумма Операции, разделитель целой и дробной части «.» (123.45)|
      |13|Комиссия Банка (руб.)|Комиссия Банка, разделитель целой и дробной части «.» (123.45)|
      |13.1*|Комиссия за фискализацию (руб.)|Комиссия за фискализацию, разделитель целой и дробной части «.» (123.45)|
      |14|К перечислению (руб.)|Сумма к Возмещению после удержания Комиссии Банка, разделитель целойидробнойчасти «.» (123.45)|
      |15|Тип операции|• Debit<br>• Chargeback_Fee<br>• 2Chargeback<br>• 2Chargeback_Reversal<br>• DebitCorrection<br>• CreditCorrection<br>• DebitClientCorrection<br>• CR_Chargeback<br>• CR_Chargeback_Fee<br>• Chargeback_Reversal<br>• Representment_Reversal<br>• CancelRefund<br>• CreditClientCorrection<br>• Credit<br>• Chargeback<br>• Chargeback_Reversal_Fee<br>• Representment<br>• Representment_Fee<br>• AUTH_FAIL|
      |16|RRN|Внутренний номер операции в ПС, например, 835508576879, кроме операций по СБП|
      |17|Payment ID|Номер операции, присваиваемый банком|
      |18|Название терминала|От 4 до 20 латинских символов|
      |19|Тип карты|Карта, выпущенная на территории РФ или иностранная карта Dom/Int|
      |20|DATA|Для передачи дополнительных данных в реестр, используется параметр DATA метода Init|
      |21|Описание|Description переданный в методе Init|
  - name: Обратная связь
    description: По техническим вопросам обратитесь на почту acq_help@tinkoff.ru. <br>     Для предоставления обратной связи и по вопросам улучшения обслуживания и предоставляемого сервиса обратитесь к вашему личному менеджеру
  - name: История изменений
    description: |-

      | № | Описание изменений | Дата |
      | ------- | ------ | ------ |
      | 1 | Создан документ | 26.05.2023 |
      | 2 | В описание параметра deviceChannel для метода FinishAuthorize добавлено уточнение, что значение 02 - Browser (BRW) используется по умолчанию | 16.02.2024 |
      | 3 | Раздел "Рекомендации при интеграции" переименован в "Инструкции по безопасности при интеграции" и дополнен описанием про корректность токена и использование новейших версий CMS  | 19.02.2024 |
      | 4 | Раздел "Инструкции по безопасности при интеграции" дополнен описанием про использование ПО для интеграции, полученного не с сайта https://www.tinkoff.ru/kassa/develop/ | 20.02.2024 | 
      | 5 | В раздел "Тестовые карты" добавлено пояснение про карты для тест-кейсов и карты для совершения тестовых платежей | 11.03.2024 |
      | 6 | В раздел "Подпись запроса" добавлена ссылка на сервис для проверки корректности формирования токена | 11.03.2024 |
      | 7 | Исправлено описание параметра "Success" в ответе для всех методов, где он используется | 22.03.2024 |
      | 8 | В раздел "Подпись запроса" добавлено уточнение про поддержку UTF-8 (пункт №5) | 25.03.2024 |
      | 9 | В раздел "Тестирование и обработка ошибок" добавлены типовые ошибки Онлайн-кассы, исправлен URL для закрывающего чека, добавлены параметры "MD", "PaReq", "ACSUrl" в описание метода "Привязка карты" | 04.04.2024 |
      | 10 | В раздел "Возмещения и реестры" добавлен подраздел "Формат реестра" | 11.04.2024 |
      | 11 | В раздел "Платежная форма в webview" были добавлены рекомендации по интеграции | 11.04.2024 |
      | 12 | <li>Исправлено описание параметра "DATA" в методе AttachCard</li><li>В раздел "Подпись запроса" добавлено описание про проверку токена в ЛК ИЭ</li><li>В раздел "Какими терминами пользуемся в документации?" добавлено уточнение по данные тестового терминала</li><li>В описание метода Confirm добавлена ссылка на подробное описание механизма двухстадийного платежа</li><li>В раздел "Сценарии платежа" добавлено уточнение про проведение тестовых платежей в тестовом окружении</li><li>В описание параметра OrderId для метода Init добавлено уточнение про егоповторное использование</li><li>Исправлено описание объекта CardData для метода FinishAuthorize по нахождению открытого ключа</li><li>Исправлено описание параметра Description, который теперь имеет максимальную длину в 140 смволов для всех типов оплат</li> | 12.04.2024 |
      | 13 | <li>Дополнено описание параметра Params в методе GetState</li><li>Добавлена информация по прохождению тест-кейсов в раздел "Тестовые карты"</li> | 16.04.2024 |
      | 14 | В раздел "Фискализация" добавлен подраздел "Подключение Онлайн-кассы",  а также в раздел "Нотификации мерчанта об операциях" добавлены дпоплнительные параметры массива "DATA" | 16.04.2024 |
      | 15 | Обновлено описание пунтка №2 дополнительных мер при интеграции с MAPI в разделе "Инструкции по безопасности при интеграции" | 18.04.2024 |
paths:
  /v2/Init:
    post:
      tags:
        - Стандартный платёж
        - Оплата через Yandex Pay
      summary: Инициализация платежа
      description: |
        Метод инициирует платежную сессию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Init_FULL'
                - $ref: '#/components/schemas/Init_SDK'
            examples:
              Init_FULL:
                summary: Пример запроса (FULL)
                value:
                  TerminalKey: TinkoffBankTest
                  Amount: 140000
                  OrderId: '21090'
                  Description: Подарочная карта на 1000 рублей
                  Token: 68711168852240a2f34b6a8b19d2cfbd296c7d2a6dff8b23eda6278985959346
                  DATA:
                    Phone: '+71234567890'
                    Email: a@test.com
                  Receipt:
                    Email: a@test.ru
                    Phone: '+79031234567'
                    Taxation: osn
                    Items:
                      - Name: Наименование товара 1
                        Price: 10000
                        Quantity: 1
                        Amount: 10000
                        Tax: vat10
                        Ean13: '303130323930303030630333435'
                      - Name: Наименование товара 2
                        Price: 20000
                        Quantity: 2
                        Amount: 40000
                        Tax: vat20
                      - Name: Наименование товара 3
                        Price: 30000
                        Quantity: 3
                        Amount: 90000
                        Tax: vat10
              Init_SDK:
                summary: Пример запроса (SDK)
                value:
                  TerminalKey: TinkoffBankTest
                  Amount: '140000'
                  OrderId: '21090'
                  Token: c744b9711d978c152fb4546c6cdcec24ebd9870678f9f325a9713ca56d6a6826
                  Description: Подарочная карта на 1400.00 рублей
                  CustomerKey: string
                  Recurrent: 'Y'
                  PayType: O
                  Language: ru
                  NotificationURL: http://example.com
                  SuccessURL: http://example.com
                  FailURL: http://example.com
                  DATA:
                    key: value
                  Receipt:
                    Items:
                      Name: Наименование товара 1
                      Price: 140000
                      Quantity: 1
                      Amount: 140000
                      PaymentMethod: full_prepayment
                      PaymentObject: commodity
                      Tax: vat10
                      Ean13: '123456789'
                      AgentData:
                        AgentSign: paying_agent
                        OperationName: Позиция чека
                        Phones: '+790912312398'
                        ReceiverPhones:
                          - '+79221210697'
                          - '+79098561231'
                      SupplierInfo:
                        Phones:
                          - '+79221210697'
                          - '+79098561231'
                        Name: OOO Вендор товара
                        Inn: '7710140679'
                    FfdVersion: '1.05'
                    Email: a@test.ru
                    Phone: '79031234567'
                    Taxation: osn
                    Payments:
                      Cash: 0
                      Electronic: 140000
                      AdvancePayment: 0
                      Credit: 0
                      Provision: 0
              Init_QR_RECURRENT:
                summary: Пример рекуррентного платежа по СБП
                value:
                  TerminalKey: TinkoffBankTest
                  Amount: '140000'
                  OrderId: '21090'
                  Token: c744b9711d978c152fb4546c6cdcec24ebd9870678f9f325a9713ca56d6a6826
                  Description: Подписка на 1400.00 рублей
                  CustomerKey: string
                  Recurrent: 'Y'
                  PayType: O
                  Language: ru
                  NotificationURL: http://example.com
                  SuccessURL: http://example.com
                  FailURL: http://example.com
                  DATA:
                    QR: 'true'
                    key: value
                  Receipt:
                    Items:
                      Name: Наименование товара 1
                      Price: 140000
                      Quantity: 1
                      Amount: 140000
                      PaymentMethod: full_prepayment
                      PaymentObject: commodity
                      Tax: vat10
                      Ean13: '123456789'
                      AgentData:
                        AgentSign: paying_agent
                        OperationName: Позиция чека
                        Phones: '+790912312398'
                        ReceiverPhones:
                          - '+79221210697'
                          - '+79098561231'
                      SupplierInfo:
                        Phones:
                          - '+79221210697'
                          - '+79098561231'
                        Name: OOO Вендор товара
                        Inn: '7710140679'
                    FfdVersion: '1.05'
                    Email: a@test.ru
                    Phone: '79031234567'
                    Taxation: osn
                    Payments:
                      Cash: 0
                      Electronic: 140000
                      AdvancePayment: 0
                      Credit: 0
                      Provision: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                InitResponseExample:
                  summary: Пример ответа
                  value:
                    Success: 'true'
                    ErrorCode: 0
                    TerminalKey: TinkoffBankTest
                    Status: NEW
                    PaymentId: 3093639567
                    OrderId: '21090'
                    Amount: 140000
                    PaymentURL: https://securepay.tinkoff.ru/new/fU1ppgqa
  /v2/InitPayments:
    post:
      tags:
        - Оплата через Tinkoff Pay
        - Оплата через СБП
      summary: Инициировать платеж в виджете
      operationId: initPayments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitPayments'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitPaymentsResponse'
  /v2/Check3dsVersion:
    post:
      tags:
        - Стандартный платёж
      summary: Проверка версии 3DS
      description: |
        `Для Мерчантов с PCI DSS`
         <br> Проверяет поддерживаемую версию 3DS протокола по карточным данным из входящих
         параметров. 

         При определении второй версии, возможно в ответе получение данных для прохождения
         дополнительного метода `3DS Method`, который позволяет эмитенту собрать данные браузера
         клиента – это может быть полезно при принятии решения в пользу **Frictionless Flow**
         (аутентификация клиента без редиректа на страницу ACS) <br>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - PaymentId
                - TerminalKey
                - CardData
                - Token
              properties:
                PaymentId:
                  description: |
                    Идентификатор платежа в системе Тинькофф Кассы
                  type: number
                  maxLength: 20
                  example: 13660
                TerminalKey:
                  description: |
                    Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                  type: string
                  maxLength: 20
                  example: testRegressBank
                CardData:
                  description: |
                    Зашифрованные данные карты в формате:
                    ```
                    PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
                    ```
                    type: string
                  example: U5jDbwqOVx+2vDApxe/rfACMt+rfWXzPdJ8ZXxNFVIiZaLZrOW72bGe9cKZdIDnekW0nqm88YxRD↵jyfa5Ru0kY5cQV alU+juS1u1zpamSDtaGFeb8sRZfhj72yGw+io+qHGSBeorcfgoKStyKGuBPWfG↵d0PLHuyBE6QgZyIAM1XfdmNlV0UAxOnkTGDsskL pIt3AWhw2e8KOar0vwbgCTDjznDB1/DLgOW01↵Aj/bXyLJoG1BkOrPBm9JURs+f+uyFae0hkRicNKNgXoN5pJTSQxOEauOi6ylsVJ B3WK5MNYXtj6x↵GlxcmTk/LD9kvHcjTeojcAlDzRZ87GdWeY8wgg==
                Token:
                  description: |
                    Подпись запроса
                  type: string
                  example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - Version
                  - PaymentSystem
                  - Success
                  - ErrorCode
                properties:
                  Version:
                    description: |
                      Версия протокола 3DS. 
                      Пример:
                      * "1.0.0” – первая версия
                      * “2.1.0” – вторая версия
                    type: string
                    example: 2.1.0
                  TdsServerTransID:
                    description: |
                      Уникальный идентификатор транзакции,
                      генерируемый 3DS-Server, обязательный
                      параметр для 3DS второй версии.
                    type: string
                    example: 17d3791b-5cfa-4318-bc23-3d949e8c4b7e
                  ThreeDSMethodURL:
                    description: |
                      Дополнительный параметр для 3DS второй
                      версии, который позволяет пройти этап по
                      сбору данных браузера ACS-ом
                    type: string
                    format: uri
                    example: https://acs.vendorcert.mirconnect.ru/ds/6300
                  PaymentSystem:
                    description: |
                      Платежная система карты
                    type: string
                    example: mir
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                    example: None
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
                    example: None
  /v2/FinishAuthorize:
    post:
      tags:
        - Стандартный платёж
      summary: Подтверждение платежа
      description: |
        `Для Мерчантов с PCI DSS`
         <br> Метод подтверждает платеж передачей реквизитов, а также списывает средства 
         с карты клиента при одностадийной оплате и блокирует указанную сумму при 
         двухстадийной. Используется, если у площадки есть сертификация PCI DSS и 
         собственная платежная форма
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/FinishAuthorize_FULL'
                - $ref: '#/components/schemas/FinishAuthorize_SDK'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Without3DS'
                  - $ref: '#/components/schemas/With3DS'
                  - $ref: '#/components/schemas/With3DSv2APP'
                  - $ref: '#/components/schemas/With3DSv2BRW'
  /v2/Confirm:
    post:
      tags:
        - Двухстадийный платёж
      summary: Подтверждение платежа
      description: |
        Метод для списания заблокированных денежных средств. Используется при двухстадийном проведении платежа. Применим только к платежам в статусе **AUTHORIZED**. Статус транзакции перед разблокировкой
        выставляется в **CONFIRMING**. Сумма списания может быть меньше или равна сумме авторизации
        > Подробнее про двухстадийный платеж можно прочитать в разделе [Сценарии платежа](https://www.tinkoff.ru/kassa/dev/payments/index.html#tag/Scenarii-oplaty-po-karte/Scenarii-platezha) - "Двухстадийный платеж"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Confirm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Confirm-2'
  /v2/Cancel:
    post:
      tags:
        - Отмена платежа
      summary: Отмена платежа
      description: |
        Отменяет платежную сессию. В зависимости от статуса платежа переводит его в следующие состояния: 
        * NEW - CANCELED
        * AUTHORIZED - PARTIAL_REVERSED – если отмена не на полную сумму
        * AUTHORIZED - REVERSED - если отмена на полную сумму
        * CONFIRMED -  PARTIAL_REFUNDED – если отмена не на полную сумму
        * CONFIRMED -  REFUNDED – если отмена на полную сумму

        Для платежей «в Рассрочку» отмена доступна только из статуса AUTHORIZED <br>
        Для платежей «Долями» если операция в статусе CONFIRMED или PARTIAL_REFUNDED будет осуществлен частичный либо полный возврат <br>
        Если платеж находился в статусе **AUTHORIZED** производится отмена холдирования средств на карте
        клиента. При переходе из статуса **CONFIRMED** – возврат денежных средств на карту клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancel-2'
  /v2/Charge:
    post:
      tags:
        - Рекуррентный платёж
      summary: Автоплатёж
      description: |
        # Схема проведения рекуррентного платежа

        ## Описание

        Осуществляет рекуррентный (повторный) платеж — безакцептное списание денежных средств со счета банковской карты клиента.
        Для возможности его использования клиент должен совершить хотя бы один платеж в пользу Мерчанта, который должен быть указан как рекуррентный (см. параметр Recurrent методе **Init**), фактически являющийся первичным. По завершении оплаты в нотификации на AUTHORIZED или CONFIRMED будет передан параметр `RebillId`.
        В дальнейшем для совершения рекуррентного платежа Мерчант должен вызвать метод **Init**, а затем без переадресации на PaymentURL вызвать метод **Charge** для оплаты по тем же самым реквизитам и передать параметр `RebillId`, полученный при совершении первичного платежа.
        Метод **Charge** работает по одностадийной и двухстадийной схеме оплаты. Чтобы перейти на двухстадийную схему нужно переключить терминал в [личном кабинете](https://business.tinkoff.ru/oplata/main), а также написать обращение на <acq_help@tinkoff.ru> с просьбой переключить схему рекуррентов.

        При проведении рекуррентного платежа учитывать взаимосвязь атрибута RebillId в методе /Charge с:
          * Значением атрибута OperationInitiatorType в методе /Init
          * Значением атрибута Reccurent в методе /Init
          * Типом терминала, используемом для проведения операций (ECOM/AFT)
            
        Наглядно допустимые сценарии взаимосвязи описаны в таблице:
        |CIT/MIT|Тип операции|OperationInitiator в /Init|RebillId в /Charge|Recurrent в /Init|AFT терминал|ECOM терминал|
        |---|---|---|---|---|---|---|
        |CIT|Credential-Not-Captured|0|null|N|Разрешено|Разрешено|
        |CIT|Credential-Captured|1|null|Y|Разрешено|Разрешено|
        |CIT|Credential-on-File|2|not null|N|Запрещено|Разрешено|
        |MIT|Credential-on-File, Recurring|R|not null|N|Запрещено|Разрешено|
        |MIT|Credential-on-File, Installment|I|not null|N|Разрешено|Запрещено|

        В случае передачи значений атрибутов не соответствующих таблице - MAPI вернет ошибку 1126 
        (Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType)

        ## Одностадийная оплата

        1. Совершить родительский платеж путем вызова **Init** с указанием дополнительных параметров `Recurrent=Y` и `CustomerKey`.
        2. Переадресовать клиента на `PaymentUrl` (только <span style="color:#900C3F">для Мерчантов без PCI DSS</span>).
        3. После оплаты заказа клиентом в нотификации на статус **AUTHORIZED** или **CONFIRMED** будет передан параметр `RebillId`, который необходимо сохранить.
        4. Спустя некоторое время для совершения рекуррентного платежа необходимо вызвать метод **Init** со стандартным набором параметров (параметры `Recurrent` и `CustomerKey` здесь не нужны).
        5. Получить в ответ на **Init** параметр `PaymentId`.
        6. Вызвать метод **Charge** с параметром `RebillId`, полученным в п.3, и параметром `PaymentId`, полученным в п.5. При успешном сценарии операция перейдет в статус CONFIRMED.


        ## Двухстадийная оплата

        1. Совершить родительский платеж путем вызова **Init** с указанием дополнительных параметров `Recurrent=Y` и `CustomerKey`.
        2. Переадресовать клиента на `PaymentUrl` (только <span style="color:#900C3F">для Мерчантов без PCI DSS</span>).
        3. После оплаты заказа клиентом в нотификации на статус **AUTHORIZED** или **CONFIRMED** будет передан параметр RebillId, который необходимо сохранить.
        4. Спустя некоторое время для совершения рекуррентного платежа необходимо вызвать метод **Init** со стандартным набором параметров (параметр `Recurrent` и `CustomerKey` здесь не нужны).
        5. Получить в ответ на **Init** параметр `PaymentId`.
        6. Вызвать метод **Charge** с параметром `RebillId`, полученным в п.3, и параметром `PaymentId`, полученным в п.5. При успешном сценарии операция перейдет в статус **AUTHORIZED**. Денежные средства будут заблокированы на карте клиента.
        7. Вызвать метод **Confirm** для подтверждения платежа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Charge_FULL'
                - $ref: '#/components/schemas/Charge_SDK'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - TerminalKey
                  - Amount
                  - OrderId
                  - Success
                  - PaymentId
                  - ErrorCode
                  - Status
                properties:
                  TerminalKey:
                    description: |
                      Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой 
                      при заведении терминала
                    type: string
                    maxLength: 20
                    example: TinkoffBankTest
                  Amount:
                    description: |
                      Сумма в копейках
                    type: number
                    maxLength: 20
                    example: 100000
                  OrderId:
                    description: |
                      Идентификатор заказа в системе Мерчанта
                    type: string
                    maxLength: 36
                    example: '21050'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  Status:
                    description: |
                      Статус платежа 

                      Получает в ответе 1 из 2 статусов:
                      * CONFIRMED - Если платеж выполнен
                      * REJECTED - Если платеж не выполнен
                    type: string
                    maxLength: 20
                    example: NEW
                  PaymentId:
                    description: |
                      Идентификатор платежа в системе Тинькофф Кассы
                    type: number
                    maxLength: 20
                    example: 13660
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
  /v2/GetState:
    post:
      tags:
        - Стандартный платёж
      summary: Получение статуса платежа
      description: |
        Метод возвращает статус платежа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/GetState_FULL'
                - $ref: '#/components/schemas/GetState_SDK'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - TerminalKey
                  - Amount
                  - OrderId
                  - Success
                  - PaymentId
                  - ErrorCode
                  - Status
                properties:
                  TerminalKey:
                    description: |
                      Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
                      при заведении терминала.
                    type: string
                    maxLength: 20
                    example: TinkoffBankTest
                  Amount:
                    description: |
                      Сумма в копейках
                    type: number
                    maxLength: 20
                    example: 100000
                  OrderId:
                    description: |
                      Идентификатор заказа в системе Мерчанта
                    type: string
                    maxLength: 36
                    example: '21050'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  Status:
                    description: |
                      Статус платежа
                    type: string
                    maxLength: 20
                    example: NEW
                    enum:
                      - NEW
                      - CANCELED
                      - PREAUTHORIZING
                      - FORM_SHOWED
                  PaymentId:
                    description: |
                      Идентификатор платежа в системе Тинькофф Кассы
                    type: number
                    maxLength: 20
                    example: 13660
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                    example: OK
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
                    example: '0'
                  Params:
                    description: |
                      Информация по способу оплаты/деталям для платежей в рассрочку
                    type: array
                    items:
                      $ref: '#/components/schemas/Items_Params'
  /v2/AddCustomer:
    post:
      tags:
        - Методы работы с клиентами
      summary: Регистрация клиента
      description: |
        Регистрирует клиента в связке с терминалом.
        Возможна автоматическая привязка клиента и карты, по которой был совершен платеж, при
        передаче параметра `CustomerKey` в методе **Init**. Это можно использовать для сохранения и
        последующего отображения клиенту замаскированного номера карты, по которой будет совершен
        рекуррентный платеж
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomerResponse'
  /v2/GetCustomer:
    post:
      tags:
        - Методы работы с клиентами
      summary: Получение данных клиента
      description: |
        Возвращает данные клиента, сохраненные в связке с терминалом 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrRemoveCustomer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomerResponse'
  /v2/RemoveCustomer:
    post:
      tags:
        - Методы работы с клиентами
      summary: Удаление данных клиента
      description: |
        Удаляет сохраненные данные клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrRemoveCustomer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveCustomerResponse'
  /v2/AddCard:
    post:
      tags:
        - Методы работы с картами
      summary: Инициализация привязки карты к клиенту
      description: |
        `Для Мерчантов с PCI DSS`
         <br> Метод инициирует привязку карты к клиенту. 
         В случае успешной привязки переадресует клиента на `Success Add Card URL`, 
         в противном случае на `Fail Add Card URL`. 
         Можно использовать форму Тинькофф Кассы, возможно заменить на кастомную форму
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AddCard_FULL'
                - $ref: '#/components/schemas/AddCard_SDK'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AddCardResponse_FULL'
                  - $ref: '#/components/schemas/AddCardResponse_SDK'
  /v2/AttachCard:
    post:
      tags:
        - Методы работы с картами
      summary: Привязка карты
      description: |
        `Для Мерчантов с PCI DSS`
         <br> Завершает привязку карты к клиенту.  
         В случае успешной привязки переадресует клиента на **Success Add Card URL**
         в противном случае на **Fail Add Card URL**.  
         Для прохождения 3DS второй версии перед вызовом метода должен быть вызван **/v2/check3dsVersion**
         и выполнен **3DS Method**, который является обязательным при прохождении **3DS** по протоколу версии
         2.0.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachCard'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachCardResponse'
  /v2/GetAddCardState:
    post:
      tags:
        - Методы работы с картами
      summary: Статус привязки карты
      description: |
        `Для мерчантов с PCI DSS`
         <br> Метод возвращает статус привязки карты
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAddCardState'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAddCardStateResponse'
  /v2/GetCardList:
    post:
      tags:
        - Методы работы с картами
      summary: Список карт клиента
      description: |
        Возвращает список всех привязанных карт клиента, включая удаленные
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/GetCardList_FULL'
                - $ref: '#/components/schemas/GetCardList_SDK'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - CardId
                    - Pan
                    - Status
                    - CardType
                  properties:
                    CardId:
                      description: |
                        Идентификатор карты в системе Тинькофф Кассы
                      type: string
                      example: '881900'
                    Pan:
                      description: |
                        Номер карты
                      type: string
                      example: 518223******0036
                    Status:
                      description: |
                        Статус карты:
                        * A – активная, 
                        * I – не активная, 
                        * D - удаленная
                      type: string
                      enum:
                        - A
                        - I
                        - D
                      example: D
                    RebillId:
                      description: |
                        Идентификатор рекуррентного платежа
                      type: string
                      example: '6155312073'
                    CardType:
                      description: |
                        Тип карты:
                        * карта списания (0);
                        * карта пополнения (1);
                        * карта пополнения и списания (2).
                      type: number
                      enum:
                        - 0
                        - 1
                        - 2
                      example: 0
                    ExpDate:
                      description: |
                        Срок действия карты
                      type: string
                      example: '1122'
  /v2/RemoveCard:
    post:
      tags:
        - Методы работы с картами
      summary: Удаление привязанной карты клиента
      description: |
        Метод удаляет привязанную карту клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCard'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveCardResponse'
  /v2/GetQr:
    post:
      tags:
        - Оплата через СБП
      summary: Формирование QR
      description: |
        Метод регистрирует QR и возвращает информацию о нем. 
        Должен быть вызван после вызова метода **Init**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetQr'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/QrResponse_FULL'
                  - $ref: '#/components/schemas/QrResponse_SDK'
  /v2/SubmitRandomAmount:
    post:
      deprecated: true
      tags:
        - Методы работы с привязанными картами и клиентами
      summary: SubmitRandomAmount
      description: Метод предназначен для подтверждения карты путем блокировки случайной суммы
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TerminalKey
                - RequestKey
                - Amount
                - Token
              properties:
                TerminalKey:
                  description: |
                    Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                  type: string
                  maxLength: 20
                  example: testRegressBank
                RequestKey:
                  description: |
                    Идентификатор запроса на привязку карты
                  type: string
                  example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
                Amount:
                  description: |
                    Сумма в копейках
                  type: number
                  maxLength: 20
                  example: 100000
                Token:
                  description: |
                    Подпись запроса
                  type: string
                  example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - TerminalKey
                  - CustomerKey
                  - RequestKey
                  - CardId
                  - ErrorCode
                  - Success
                properties:
                  TerminalKey:
                    description: |
                      Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой 
                      при заведении терминала
                    type: string
                    maxLength: 20
                    example: TinkoffBankTest
                  CustomerKey:
                    description: |
                      Идентификатор клиента в системе Мерчанта
                    type: string
                    maxLength: 36
                    example: testCustomer1234
                  RequestKey:
                    description: |
                      Идентификатор запроса на привязку карты
                    type: string
                    example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
                  RebillId:
                    description: |
                      Идентификатор рекуррентного платежа
                    type: string
                  CardId:
                    description: |
                      Идентификатор карты в системе Тинькофф Кассы
                    type: string
                    maxLength: 40
                    example: '156516516'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
                  Status:
                    description: |
                      Статус платежа
                    type: string
                    maxLength: 20
                    example: NEW
  /v2/Submit3DSAuthorization:
    post:
      tags:
        - Прохождение 3DS
      summary: Подтверждение прохождения 3DS v1.0
      description: |
        `Для Мерчантов с PCI DSS`
         <br> Осуществляет проверку результатов прохождения 3-D Secure и при успешном результате
         прохождения 3-D Secure подтверждает инициированный платеж.
         При использовании одностадийной оплаты осуществляет списание денежных средств с карты
         клиента <br>
         При двухстадийной оплате осуществляет блокировку указанной суммы на карте клиента<br> 

         *Формат запроса*: `x-www-form-urlencoded` <br>

         После получения на `TermUrl` мерчанта ответа ACS с результатами прохождения 3-D Secure необходимо
         сформировать запрос к методу **Submit3DSAuthorization**
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - MD
                - PaRes
              properties:
                MD:
                  description: |
                    Уникальный идентификатор транзакции в системе
                    Тинькофф Кассы (возвращается в ответе от ACS)
                  type: string
                  example: '2561504'
                PaRes:
                  description: |
                    Шифрованная строка, содержащая результаты 3-D Secure аутентификации (возвращается в ответе от ACS)
                  type: string
                  example: eJxVUttygjAU/BWG1w4mXKXOMY5WOrVTrOOtl7cAqeJI1AAO+vVNFKrlaffkZM9mD9Crsq12ZCJPd7yrmy2sa4zHuyTlq66+mD8bvt4jMF8LxoYzFpeCEQhZntMV09JE3vC8Hx9j27A8LzEcN7aNCPu24VIrihKXetiPdAKT/pQdCNSDiJzTsgA1VCqKeE15QYDGh8FoTBy73fZtQDWFjInRkFi4+Uz82JbH1zJwmjEyHcwAXRDEu5IX4kQ8R/Y0BEqxJeui2HcQOlGesKolSkCqCuhmYFIqlEuVKk3IDL8uPwI3jDaBGZ4XeLxZVeFw5I7nX11AqgMSWjDpzPSxb/ma6XRct4Pl4y51oJkar5zLx1wx7NWI/t3BfQFkxkKuoHHfMGDVfseZugLoDwO6+X16UfHFhUyk/32OMH3vZ5+nYBu/2d4xcMTDsn04j19VqJcmpZjKYKT3q6QigJQMqveF6lVL9O8X+AWMIbbt
                PaymentId:
                  description: |
                    Уникальный идентификатор транзакции в системе Тинькофф Кассы
                  type: string
                  example: testRegressBank
                TerminalKey:
                  description: |
                    Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                  type: string
                  maxLength: 20
                  example: testRegressBank
                Token:
                  description: |
                    Подпись запроса
                  type: string
                  example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
      x-codeSamples:
        - lang: Payload
          source: |
            <body onload="document.form.submit()">
            <form name="form" action="https://rest-api-test.tinkoff.ru/v2/Submit3DSAuthorization" method="post">
              <input type="hidden" name="MD" value="2561504">
              <input type="hidden" name="PaRes" value="eJxVUttygjAU/BWG1w4mXKXOMY5WOrVTrOOtl7cAqeJI1AAO+vVNFKrlaffkZM9mD9Crsq12ZCJPd7yrmy2sa4zHuyTlq66+mD8bvt4jMF8LxoYzFpeCEQhZntMV09JE3vC8Hx9j27A8LzEcN7aNCPu24VIrihKXetiPdAKT/pQdCNSDiJzTsgA1VCqKeE15QYDGh8FoTBy73fZtQDWFjInRkFi4+Uz82JbH1zJwmjEyHcwAXRDEu5IX4kQ8R/Y0BEqxJeui2HcQOlGesKolSkCqCuhmYFIqlEuVKk3IDL8uPwI3jDaBGZ4XeLxZVeFw5I7nX11AqgMSWjDpzPSxb/ma6XRct4Pl4y51oJkar5zLx1wx7NWI/t3BfQFkxkKuoHHfMGDVfseZugLoDwO6+X16UfHFhUyk/32OMH3vZ5+nYBu/2d4xcMTDsn04j19VqJcmpZjKYKT3q6QigJQMqveF6lVL9O8X+AWMIbbt">
              <input type="hidden" name="PaymentId" value="10063">
              <input type="hidden" name="TerminalKey" value="TinkoffBankTest">
              <input type="hidden" name="Token" value="871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6" >
            </form>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - TerminalKey
                  - OrderId
                  - Success
                  - Status
                  - PaymentId
                  - ErrorCode
                properties:
                  TerminalKey:
                    description: |
                      Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                    type: string
                    example: TinkoffBankTest
                  OrderId:
                    description: |
                      Номер заказа в системе Мерчанта
                    type: string
                    example: '21050'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  Status:
                    description: |
                      Статус транзакции
                      - CONFIRMED при успешном сценарии и одностадийном проведении платежа
                      - AUTHORIZED при успешном сценарии и двухстадийном проведении платежа 
                      - REJECTED при неуспешном
                    type: string
                    example: CONFIRMED
                  PaymentId:
                    description: |
                      Уникальный идентификатор транзакции в системе Тинькофф Кассы
                    type: string
                    example: '10063'
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
  /v2/Submit3DSAuthorizationV2:
    post:
      tags:
        - Прохождение 3DS
      summary: Подтверждение прохождения 3DS v2.1
      description: |
        `Для Мерчантов с PCI DSS`
         <br> Осуществляет проверку результатов прохождения 3-D Secure v2 и при успешном результате
         прохождения 3-D Secure v2 подтверждает инициированный платеж.
         При использовании одностадийной оплаты осуществляет списание денежных средств с карты
         клиента.
         При двухстадийной оплате осуществляет блокировку указанной суммы на карте клиента. 

         *Формат запроса*: `x-www-form-urlencoded` <br>

         После получения на `cresCallbackUrl` Мерчанта ответа ACS с результатами прохождения 3-D Secure необходимо
         сформировать запрос к методу **Submit3DSAuthorizationV2**
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - PaymentId
                - TerminalKey
                - Token
              properties:
                PaymentId:
                  description: |
                    Уникальный идентификатор транзакции в системе Тинькофф Кассы
                  type: string
                TerminalKey:
                  description: |
                    Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                  type: string
                  maxLength: 20
                  example: testRegressBank
                Token:
                  description: |
                    Подпись запроса
                  type: string
                  example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
      x-codeSamples:
        - lang: Payload
          source: |
            <body onload="document.form.submit()">
            <form name="form" action="https://rest-api-test.tinkoff.ru/v2/Submit3DSAuthorizationV2" method="post">
              <input type="hidden" name="PaymentId" value="10063">
              <input type="hidden" name="TerminalKey" value="TinkoffBankTest">
              <input type="hidden" name="Token" value="871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6" >
            </form>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - OrderId
                  - Status
                  - TerminalKey
                  - Success
                  - ErrorCode
                  - PaymentId
                properties:
                  OrderId:
                    description: |
                      Номер заказа в системе Мерчанта
                    type: string
                    example: '21050'
                  TerminalKey:
                    description: |
                      Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                    type: string
                    example: TinkoffBankTest
                  Status:
                    description: |
                      Статус транзакции
                    type: string
                    example: CONFIRMED
                  PaymentId:
                    description: |
                      Уникальный идентификатор транзакции в системе Тинькофф Кассы
                    type: string
                    example: '10063'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
  /v2/TinkoffPay/terminals/{TerminalKey}/status:
    get:
      tags:
        - Оплата через Tinkoff Pay
      summary: Статус
      description: |
        Метод определения возможности проведения платежа Tinkoff Pay на терминале и устройстве
      parameters:
        - in: path
          name: TerminalKey
          schema:
            type: string
            maxLength: 20
            example: testRegress
          required: true
          description: |
            Платежный ключ, выдается Мерчанту при заведении
            терминала
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - Params
                  - Success
                  - ErrorCode
                properties:
                  Params:
                    description: |
                      Параметры ответа
                    type: object
                    required:
                      - Allowed
                    properties:
                      Allowed:
                        description: |
                          Наличие возможности проведения оплаты
                          Tinkoff Pay по API, SDK
                        example: true
                        type: boolean
                      Version:
                        description: |
                          Версия Tinkoff Pay, доступная на терминале:
                          * 1.0 (e-invoice)
                          * 2.0 (Tinkoff Pay)
                        type: string
                        example: '1.0'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
  /v2/TinkoffPay/transactions/{paymentId}/versions/{version}/link:
    get:
      tags:
        - Оплата через Tinkoff Pay
      summary: Получение ссылки
      description: |
        Метод получения Link для безусловного редиректа на мобильных устройствах
      parameters:
        - in: path
          name: paymentId
          schema:
            type: number
            maxLength: 20
            example: 13660
          required: true
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
        - in: path
          name: version
          required: true
          schema:
            type: string
            example: '1.0'
          description: |
            Версия Tinkoff Pay, доступная на терминале:
            * 1.0 (e-invoice)
            * 2.0 (Tinkoff Pay)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - Params
                  - Success
                  - ErrorCode
                properties:
                  Params:
                    description: |
                      Параметры ответа
                    type: object
                    required:
                      - RedirectUrl
                    properties:
                      RedirectUrl:
                        description: |
                          Link для перехода в приложение MB на мобильных
                          устройствах
                        example: tinkoffbank://Main/EInvoicing?billId=5000015507&providerId=e-invoicing
                        type: string
                        format: uri
                      WebQR:
                        description: |
                          URL для получения QR
                        type: string
                        format: uri
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
  /v2/TinkoffPay/{paymentId}/QR:
    get:
      deprecated: false
      tags:
        - Оплата через Tinkoff Pay
      summary: Получение QR
      description: |
        Метод получения QR для десктопов.
      parameters:
        - in: path
          name: paymentId
          schema:
            type: number
            example: 700001702044
          required: true
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
      responses:
        '200':
          description: OK
          content:
            image/svg:
              schema:
                type: string
                format: binary
  /v2/SberPay/transactions/{paymentId}/QR:
    get:
      deprecated: false
      tags:
        - Оплата через SberPay
      summary: Получение QR
      description: |
        Метод получения QR для десктопов.
      parameters:
        - in: path
          name: paymentId
          schema:
            type: number
            example: 700001702044
          required: true
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
      responses:
        '200':
          description: SVG QR, размером 124*124
          content:
            image/svg:
              schema:
                type: string
                format: binary
  /v2/SberPay/transactions/{paymentId}/link:
    get:
      deprecated: false
      tags:
        - Оплата через SberPay
      summary: Получение ссылки
      description: |
        Получение ссылки
      parameters:
        - in: path
          name: paymentId
          schema:
            type: number
            example: 700001702044
          required: true
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - Params
                  - Success
                  - ErrorCode
                properties:
                  Params:
                    description: |
                      Параметры ответа
                    type: object
                    required:
                      - RedirectUrl
                    properties:
                      RedirectUrl:
                        description: |
                          URL для перехода 
                        example: tinkoffbank://Main/EInvoicing?billId=5000015507&providerId=e-invoicing
                        type: string
                        format: uri
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                  Details:
                    description: |
                      Подробное описание ошибки
                    type: string
  /v2/TinkoffPayEvent:
    post:
      tags:
        - Оплата через Tinkoff Pay
      summary: Передача уведомления о событии
      description: Передача уведомления о событии платежного виджета Tinkoff Pay+Tinkoff ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TinkoffPayEvent'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - Success
                  - ErrorCode
                properties:
                  Success:
                    type: boolean
                    description: Успешность прохождения запроса (true/false)
                    enum:
                      - true
                      - false
                    example: 'true'
                  ErrorCode:
                    type: string
                    description: Код ошибки, «0» - если успешно
                    example: 0
                  Message:
                    type: string
                    description: Краткое описание ошибки
                  Details:
                    type: string
                    description: Подробное описание ошибки
  /v2/QrMembersList:
    post:
      tags:
        - Оплата через СБП
      summary: Список банков-пользователей QR
      description: |
        Метод возвращает список участников куда может быть осуществлен возврат платежа, совершенного
        по QR
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TerminalKey
                - PaymentId
                - Token
              properties:
                TerminalKey:
                  type: string
                  description: |
                    Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                  example: TinkoffBankTest
                PaymentId:
                  type: number
                  description: |
                    Уникальный идентификатор транзакции в системе
                    Тинькофф Кассы
                  example: 10063
                Token:
                  type: string
                  description: Подпись запроса
                  example: 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - OrderId
                  - Success
                  - ErrorCode
                properties:
                  Members:
                    type: array
                    description: |
                      Массив списка участников. Возвращается
                      только если возврат возможен
                    items:
                      $ref: '#/components/schemas/Member'
                  OrderId:
                    description: |
                      Идентификатор заказа в системе Мерчанта
                    type: string
                    maxLength: 36
                    example: '21050'
                  Success:
                    description: |
                      Успешность прохождения запроса (true/false)
                    type: boolean
                    example: true
                  ErrorCode:
                    description: |
                      Код ошибки. «0» в случае успеха
                    type: string
                    maxLength: 20
                    example: '0'
                  Message:
                    description: |
                      Краткое описание ошибки
                    type: string
                    example: OK
  /v2/AddAccountQr:
    post:
      tags:
        - Оплата через СБП
      summary: Привязка счёта к магазину
      description: |
        Метод инициирует привязку счета клиента к магазину
        и возвращает информацию о нём
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAccountQr'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAccountQrResponse'
  /v2/GetAddAccountQrState:
    post:
      summary: Получение статуса привязки счёта к магазину
      tags:
        - Оплата через СБП
      description: |
        Метод возвращает статус привязки счета клиента по магазину
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAddAccountQrState'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAddAccountQrStateResponse'
  /v2/GetAccountQrList:
    post:
      summary: Получение списка счетов, привязанных к магазину
      tags:
        - Оплата через СБП
      description: Метод возвращает список привязанных счетов клиента по магазину
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountQrList'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountQrListResponse'
  /v2/ChargeQr:
    post:
      tags:
        - Оплата через СБП
      summary: Автоплатеж по QR
      description: "Проведение платежа по привязанному счету по QR через СБП.\nДля возможности его использования клиент должен совершить успешную привязку счета с\_\nпомощью метода **AddAccountQr**. После вызова метода будет отправлена нотификация на Notification\nURL о привязке счета , в которой будет указан\nAccountToken.\nДля совершения платежа по привязанному счету Мерчант должен вызвать метод **Init**, в котором поля\_\n**Recurrent= Y** и **DATA= {“QR”:“true”}**, а затем вызвать метод **ChargeQr** для оплаты по тем же самым\_\nреквизитам и передать параметр **AccountToken**, полученный после привязки счета по QR в\_\nнотификации\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeQr'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeQrResponse'
  /v2/SbpPayTest:
    post:
      tags:
        - Оплата через СБП
      summary: Создание тестовой платежной сессии
      description: Тестовая платежная сессия с предопределенным статусом по СБП.
      operationId: SbpPayTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SbpPayTest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SbpPayTestResponse'
  /v2/GetQRState:
    post:
      tags:
        - Оплата через СБП
      summary: Получение статуса возврата
      description: |
        Возвращает статус возврата платежа по СБП
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TerminalKey
                - PaymentId
                - Token
              properties:
                TerminalKey:
                  type: string
                  description: |
                    Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
                  example: TinkoffBankTest
                PaymentId:
                  type: string
                  description: |
                    Уникальный идентификатор транзакции в системе
                    Тинькофф Кассы, полученный в ответе на вызов метода Init
                  example: '700031849'
                Token:
                  type: string
                  description: |
                    Подпись запроса
                  example: l43kb4hyi6lknb23bv4gdfskjn238fsllsdf8
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GetQRStateResponse_FULL'
                  - $ref: '#/components/schemas/GetQRStateResponse_SDK'
  /v2/CheckOrder:
    post:
      tags:
        - Стандартный платёж
      summary: Получение статуса заказа
      description: |
        Метод возвращает статус заказа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckOrder'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckOrder-2'
  /cashbox/SendClosingReceipt:
    post:
      tags:
        - Методы работы с чеками
      summary: Закрывающий чек в кассу
      description: |
        Метод позволяет отправить закрывающий чек в кассу.
        Условия работы метода:
        1. Закрывающий чек может быть отправлен если платежная сессия по первому чеку находится в
          статусе **CONFIRMED**.
        2. В платежной сессии был передан объект `Receipt`.
        3. В объекте `Receipt` был передан хотя бы один объект `Receipt.Items.PaymentMethod` =
          `full_prepayment` или `prepayment` или `advance`      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendClosingReceipt'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendClosingReceipt-2'
  /v2/Notification:
    post:
      description: |
        Метод реализуется на стороне Мерчанта для получения уведомлений об изменении статуса платежа.

        > **Нотификации о привязке (NotificationAddCard)** 
        `Для Мерчантов с PCI DSS`
        <br> Уведомления магазину о статусе выполнения метода привязки карты `AttachCard`.
        После успешного выполнения метода `AttachCard` Тинькофф Касса отправляет POST-запрос с информацией о привязке карты. Нотификация отправляется на ресурс Мерчанта на адрес `Notification URL` синхронно и ожидает ответа в течение 10 секунд. 
        После получения ответа или неполучения его за заданное время сервис переадресует клиента на `Success AddCard URL` или `Fail AddCard URL` в зависимости от результата привязки карты.
        В случае успешной обработки нотификации Мерчант должен вернуть ответ с телом сообщения: OK (без тегов и заглавными английскими буквами). <br>
        Если тело сообщения отлично от **OK**, любая нотификация считается неуспешной, и сервис будет повторно отправлять нотификацию раз в час в течение 24 часов. Если нотификация за это время так и не доставлена, она складывается в дамп.

        > **Нотификация о фискализации (NotificationFiscalization)**
        <br> Если используется подключенная онлайн касса, по результату фискализации будет
        отправлена нотификация с фискальными данными.

        > **Нотификация о статусе привязки счета по QR (NotificationQr)**
        <br> После привязки счета по QR, магазину отправляется статус привязки и токен.
        Нотификация будет приходить по статусам **ACTIVE** и **INACTIVE**.
      summary: Нотификации
      servers:
        - url: http://api.merchant-site.com
          description: Тинькофф Касса будет уведомлять Мерчанта об изменении статуса платежа по этому URL.
      tags:
        - Нотификации Мерчанта об операциях
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/NotificationPayment'
                - $ref: '#/components/schemas/NotificationAddCard'
                - $ref: '#/components/schemas/NotificationFiscalization'
                - $ref: '#/components/schemas/NotificationQr'
      responses:
        '200':
          description: OK
  /v2/GetDeepLink:
    post:
      tags:
        - Оплата через Mir Pay
      summary: Получить DeepLink
      description: Получение deeplink с включенным подписанным JWT-токеном. Предназначен для запроса по API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeepLink'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeepLinkResponse'
  /v2/GetTerminalPayMethods:
    get:
      tags:
        - Оплата через Mir Pay
      summary: Проверить доступность методов на SDK
      operationId: GetTerminalPayMethods
      description: Метод определяет доступность методов оплаты на терминале для SDK и API. Запрос не шифруется токеном
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTerminalPayMethods'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTerminalPayMethodsResponse'
  /v2/getConfirmOperation:
    post:
      tags:
        - Стандартный платёж
      description: 'Справку по конкретной операции можно получить на: <br> 1. URL-сервиса, развернутого на своей стороне <br> 2. Электронную почту'
      summary: Получение справки по операции
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/by_url'
                - $ref: '#/components/schemas/by_email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/response_by_url'
                  - $ref: '#/components/schemas/response_by_email'
components:
  schemas:
    Common:
      type: object
      properties:
        additionalProperties:
          type: string
        OperationInitiatorType:
          type: string
          description: |
            Признак инициатора операции
            * '0' - Оплата без сохранения реквизитов карты для последующего использования. Cценарий "0 - CIT. Credential-Not-Captured"
            * '1' - Используется, если Мерчант сохраняет карту. Cценарий - "1 - Consumer-Initiated, Credential-Captured"
            * '2' - Операция по ранее сохранённой карте, инициирована клиентом. Cценарий - "2 - Consumer-Initiated, Credential-on-File"
            * 'R' - Повторяющаяся операция по сохранённой карте без графика. Является Merchant Initiated сценарием ("R = Merchant-Initiated, Credential-on-File, Recurring")
            * 'I' - Повторяющаяся операция по сохраненной карте  в соответствии с графиком платежей для погашения кредита. Является Merchant Initiated сценарием ("I = Merchant-Initiated, Credential-on-File, Installment") 

            При передаче в объекте DATA атрибута OperationInitiatorType учитывать взаимосвязь его значений с:
              * Значением атрибута Reccurent в методе /Init
              * Значением атрибута RebillId в методе /Charge
              * Типом терминала, используемом для проведения операций (ECOM/AFT)
             
              Подробную таблицу см. в разделе [Передача признака инициатора операции](#section/Peredacha-priznaka-iniciatora-operacii)

              В случае передачи значений атрибутов не соответствующих таблице - MAPI вернет ошибку 1126 
              (Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType)
          enum:
            - '0'
            - '1'
            - '2'
            - R
            - I
    TinkoffPay:
      type: object
      properties:
        Device:
          description: |
            Тип устройства
            * SDK (вызов из мобильных приложений)
            * Desktop (вызов из браузера с десктопа)
            * MobileWeb (вызов из браузера с мобильных устройств)
          type: string
          example: Desktop
          enum:
            - SDK
            - Desktop
            - MobileWeb
        DeviceOs:
          description: ОС устройства
          type: string
          example: iOS
        DeviceWebView:
          description: Признак открытия в WebView
          type: boolean
          example: true
        DeviceBrowser:
          description: Браузер
          type: string
          example: Safari
        TinkoffPayWeb:
          description: Признак проведения операции через Tinkoff Pay по API
          type: boolean
          example: true
    YandexPay:
      type: object
      required:
        - YandexPayWeb
      properties:
        YandexPayWeb:
          description: Признак проведения операции через Yandex Pay
          type: boolean
          example: true
    LongPay1:
      properties:
        ticketNumber:
          description: |
            Номера билетов (с контрольной цифрой) для всех пассажиров, летящих по одному маршруту. В качестве разделителя используйте ';'<br>Необязателен, если передан параметр ticketReservationNumber
          type: string
        ticketReservationNumber:
          description: |
            Номера билетов (с контрольной цифрой) для всех пассажиров, летящих по одному маршруту. В качестве разделителя используйте ';'<br>Необязателен, если передан параметр ticketNumber
          type: string
        ticketSystem:
          description: Код системы продажи
          type: string
        ticketAgencyCode:
          description: Код агентства
          type: string
        ticketAgencyName:
          description: Название агентства
          type: string
        ticketRestricted:
          description: |
            Ограничения билета:
                    * 0 — без ограничений
                    * 1 — невозвратный
          type: string
    LongPay2:
      description: |
        % — порядковый номер пассажира от 1 до 4
      required:
        - ticketPassengerSurname%
        - ticketPassengerFirstname%
      properties:
        ticketPassengerSurname%:
          description: Фамилия латиницей
          type: string
        ticketPassengerFirstname%:
          description: Имя латиницей
          type: string
        passengerPassport%:
          description: Серия и номер паспорта
          type: string
        passengerCountry%:
          description: Гражданство. По стандарту ISO 3166-1 alpha-3
          type: string
        ticketPassengerBirthDate%:
          description: Дата рождения. В формате YYYY-DD-MM
          type: string
    LongPay3:
      description: \# — порядковый номер пассажира от 1 до 4
      required:
        - triplegDate#
        - triplegCarrier#
        - triplegDestinationFrom#
        - triplegDestinationTo#
      properties:
        triplegDate#:
          description: Дата вылета. В формате YYYY-DD-MM
          type: string
        triplegTime#:
          description: Время вылета. В формате hh24:mm:ss
          type: string
        triplegCarrier#:
          description: Код перевозчика ИАТА
          type: string
        triplegFlightNumber#:
          description: Номер рейса
          type: string
        triplegClass#:
          description: Класс перелета
          type: string
        triplegDestinationFrom#:
          description: Код аэропорта вылета ИАТА
          type: string
        triplegDestinationTo#:
          description: Код аэропорта прилета ИАТА
          type: string
        triplegCountryFrom#:
          description: Код страны вылета. По стандарту ISO 3166-1 numeric
          type: string
        triplegCountryTo#:
          description: Код страны прилета. По стандарту ISO 3166-1 numeric
          type: string
        triplegStopover#:
          description: |
            Остановка при пересадке:
            * 0 — разрешена
            * X — запрещена         
          type: string
        triplegFareBasisCode#:
          description: Код тарифа
          type: string
    LongPay:
      description: Расширенный набор параметров авиабилета передается при создании платежа (метод Init) в параметре DATA.
      type: object
      properties:
        Параметры билета:
          type: array
          $ref: '#/components/schemas/LongPay1'
        Параметры пассажира:
          type: array
          $ref: '#/components/schemas/LongPay2'
        Параметры перелета:
          type: array
          $ref: '#/components/schemas/LongPay3'
    AgentData:
      type: object
      description: |
        Данные агента. Обязателен, если используется агентская схема.
      properties:
        AgentSign:
          description: |
            Признак агента. Возможные значения:
            * bank_paying_agent – банковский платежный агент
            * bank_paying_subagent – банковский платежный субагент
            * paying_agent – платежный агент
            * paying_subagent – платежный субагент
            * attorney – поверенный
            * commission_agent – комиссионер
            * another – другой тип агента
          type: string
          example: paying_agent
        OperationName:
          description: |
            Наименование операции.
            Атрибут обязателен, если AgentSign передан в значениях:
            * bank_paying_agent
            * bank_paying_subagent
          type: string
          maxLength: 64
          example: Позиция чека
        Phones:
          description: |
            Телефоны платежного агента, в формате +{Ц}.
            Атрибут обязателен, если в AgentSign передан в значениях:
            * bank_paying_agent
            * bank_paying_subagent
            * paying_agent
            * paying_subagent
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 19
          example:
            - '+790912312398'
        ReceiverPhones:
          description: |
            Телефоны оператора по приему платежей, в формате +{Ц}.
            Атрибут обязателен, если в AgentSign передан в значениях:
            * paying_agent
            * paying_subagent
          items:
            type: string
            minLength: 1
            maxLength: 19
          example:
            - '+79221210697'
            - '+79098561231'
        TransferPhones:
          description: |
            Телефоны оператора перевода, в формате +{Ц}.
            Атрибут обязателен, если в AgentSign передан в значениях:
            * bank_paying_agent
            * bank_paying_subagent
          items:
            type: string
            minLength: 1
            maxLength: 19
          example:
            - '+79221210697'
        OperatorName:
          description: |
            Наименование оператора перевода.
            Атрибут обязателен, если в AgentSign передан в значениях:
            * bank_paying_agent
            * bank_paying_subagent
          type: string
          maxLength: 64
          example: Tinkoff
        OperatorAddress:
          description: |
            Адрес оператора перевода.
            Атрибут обязателен, если в AgentSign передан в значениях:
            * bank_paying_agent
            * bank_paying_subagent
          type: string
          maxLength: 243
          example: г. Тольятти
        OperatorInn:
          description: |
            ИНН оператора перевода.
            Атрибут обязателен, если в AgentSign передан в значениях:
            * bank_paying_agent
            * bank_paying_subagent
          type: string
          maxLength: 12
          example: '7710140679'
    SupplierInfo:
      type: object
      description: |
        Данные поставщика платежного агента. 
        Обязателен, если передается значение AgentSign в объекте AgentData.
      properties:
        Phones:
          description: |
            Телефон поставщика, в формате +{Ц}.
            Атрибут обязателен, если передается значение `AgentSign`
            в объекте `AgentData`
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 19
          example:
            - '+79221210697'
            - '+79098561231'
        Name:
          description: |
            Наименование поставщика.
            Атрибут обязателен, если передается значение `AgentSign` 
            в объекте `AgentData`.
            Внимание: в данные 239 символов включаются телефоны поставщика 
            + 4 символа на каждый телефон.
            Например, если передано два телефона поставщика длиной 12 и 14 символов, 
            то максимальная длина наименования поставщика будет 
            239 – (12 + 4) – (14 + 4) = 205 символов
          type: string
          maxLength: 239
          example: ООО Вендор товара
        Inn:
          description: |
            ИНН поставщика, в формате ЦЦЦЦЦЦЦЦЦЦ.
            Атрибут обязателен, если передается значение `AgentSign` 
            в объекте `AgentData`.
          type: string
          minLength: 10
          maxLength: 12
          example: '7710140679'
    Items_FFD_105:
      type: object
      required:
        - Name
        - Price
        - Quantity
        - Amount
        - Tax
      properties:
        Name:
          description: |
            Наименование товара.
          type: string
          maxLength: 128
          example: Наименование товара 1
        Price:
          description: Цена в копейках
          type: number
          example: 10000
        Quantity:
          description: |
            Количество или вес товара
            - Максимальное количество символов - 8, где целая часть не более 5 знаков, а дробная часть не более 3 знаков для АТОЛ, не более 2 знаков для CloudPayments
          type: number
          maxLength: 8
          example: 1
        Amount:
          description: |
            Стоимость товара в копейках.
            Произведение Quantity и Price
          type: number
          maxLength: 10
          example: 10000
        PaymentMethod:
          description: |
            Признак способа расчёта. 
            Возможные значения:
            * «lfull_prepayment» – предоплата 100%
            * «lprepayment» – предоплата
            * «ladvance» – аванс
            * «lfull_payment» – полный расчет
            * «lpartial_payment» – частичный расчет и кредит
            * «lcredit» – передача в кредит
            * «lcredit_payment» – оплата кредита
            <br>Если значение не
            передано, по умолчанию в онлайн-кассу
            передается признак способа расчёта
            "full_payment".
          type: string
          enum:
            - full_prepayment
            - prepayment
            - advance
            - full_payment
            - partial_payment
            - credit
            - credit_payment
          default: full_payment
        PaymentObject:
          description: |
            Признак предмета расчёта.
            Возможные значения:
            * commodity – товар
            * excise – подакцизный товар
            * job – работа
            * service – услуга
            * gambling_bet – ставка азартной игры
            * gambling_prize – выигрыш азартной игры
            * lottery – лотерейный билет
            * lottery_prize – выигрыш лотереи
            * intellectual_activity – предоставление результатов интеллектуальной деятельности
            * payment – платеж
            * agent_commission – агентское вознаграждение
            * composite – составной предмет расчета
            * another – иной предмет расчета
            <br>Если значение не передано, по умолчанию в онлайн-кассу
            отправляется признак предмета расчёта "commodity".
          type: string
          enum:
            - commodity
            - excise
            - job
            - service
            - gambling_bet
            - gambling_prize
            - lottery
            - lottery_prize
            - intellectual_activity
            - payment
            - agent_commission
            - composite
            - another
          default: commodity
        Tax:
          description: |
            Ставка НДС.
            Перечисление со значениями:
            * none - без НДС;
            * vat0 - НДС по ставке 0%
            * vat10 - НДС по ставке 10%
            * vat20 - НДС по ставке 20%
            * vat110 - НДС чека по расчетной ставке 10/110
            * vat120 - НДС чека по расчетной ставке 20/120
          type: string
          enum:
            - none
            - vat0
            - vat10
            - vat20
            - vat110
            - vat120
          example: vat10
        Ean13:
          description: |
            Штрих-код в требуемом формате. В зависимости от
            типа кассы требования могут отличаться:
            * АТОЛ Онлайн - шестнадцатеричное
            представление с пробелами. Максимальная
            длина – 32 байта (^[a-fA-F0-9]{2}$)|(^([afA-F0-9]{2}\\s){1,31}[a-fA-F0-9]{2}$)
            Пример:
            00 00 00 01 00 21 FA 41 00 23 05 41 00
            00 00 00 00 00 00 00 00 00 00 00 00 00
            00 00 12 00 AB 00
            * CloudKassir - длина строки: четная, от 8 до
            150 байт, т.е. от 16 до 300 ASCII символов
            ['0' - '9' , 'A' - 'F' ] шестнадцатеричного
            представления кода маркировки товара.
            Пример:
            303130323930303030630333435
            * OrangeData - строка, содержащая base64
            кодированный массив от 8 до 32 байт
            Пример:
            igQVAAADMTIzNDU2Nzg5MDEyMwAAAAAAAQ==
            <br>В случае передачи в запросе параметра Ean13 не
            прошедшего валидацию, возвращается неуспешный
            ответ с текстом ошибки в параметре message =
            "Неверный параметр Ean13".
          type: string
          maxLength: 300
          example: '0123456789'
        ShopCode:
          description: |
            Код магазина. Для параметра ShopСode
            необходимо использовать значение параметра
            Submerchant_ID, полученного в ответ при
            регистрации магазинов через xml. Если xml не
            используется, передавать поле не нужно
          type: string
          example: '12345'
        AgentData:
          description: |
            Данные агента.
            Используется при работе по агентской схеме
          $ref: '#/components/schemas/AgentData'
        SupplierInfo:
          description: |
            Данные поставщика платежного агента
            Обязателен, если передается значение AgentSign в объекте AgentData
          $ref: '#/components/schemas/SupplierInfo'
    Payments:
      type: object
      description: |
        Детали платежа.
        Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты "Безналичный". 
        Если передан объект receipt.Payments, то значение в Electronic должно быть равно итоговому значению
        Amount в методе Init. При этом сумма введенных значений по всем видам оплат, включая Electronic,
        должна быть равна сумме (Amount) всех товаров, переданных в объекте receipt.Items.
      required:
        - Electronic
      properties:
        Cash:
          description: |
            Вид оплаты "Наличные". 
            Сумма к оплате в копейках
          type: number
          maxLength: 14
          example: 90000
        Electronic:
          description: |
            Вид оплаты "Безналичный".
          type: number
          maxLength: 14
          example: 50000
        AdvancePayment:
          description: |
            Вид оплаты "Предварительная оплата (Аванс)".
          type: number
          maxLength: 14
          example: 0
        Credit:
          description: |
            Вид оплаты "Постоплата (Кредит)".
          type: number
          maxLength: 14
          example: 0
        Provision:
          description: |
            Вид оплаты "Иная форма оплаты".
          type: number
          maxLength: 14
          example: 0
    Receipt_FFD_105:
      type: object
      description: Объект с информацией о видах суммы платежа. Если объект не передан, то будет автоматически указана итоговая сумма чека с видом оплаты "Безналичная"
      required:
        - Items
        - Taxation
      properties:
        Items:
          description: Массив позиций чека с информацией о товарах
          type: array
          items:
            $ref: '#/components/schemas/Items_FFD_105'
        FfdVersion:
          description: |
            Версия ФФД.
            Возможные значения:
            * "FfdVersion": "1.2"
            * "FfdVersion": "1.05"
            По умолчанию версия ФФД - 1.05
          type: string
          default: '1.05'
        Email:
          description: |
            Электронная почта клиента.
            Атрибут должен быть заполнен, если не передано значение 
            в атрибуте “Phone” 
          type: string
          format: email
          maxLength: 64
          example: a@test.ru
        Phone:
          description: |
            Телефон клиента в формате +{Ц}
            Атрибут должен быть заполнен, если не передано значение 
            в атрибуте “Email” 
          type: string
          maxLength: 64
          example: '+79031234567'
        Taxation:
          description: |
            Система налогообложения. Перечисление с
            возможными значениями:
            * "osn" - общая СН;
            * "usn_income" - упрощенная СН (доходы);
            * "usn_income_outcome" - упрощенная СН (доходы минус расходы);
            * "envd" - единый налог на вмененный доход;
            * "esn" - единый сельскохозяйственный налог;
            * "patent" - патентная СН.
          type: string
          enum:
            - osn
            - usn_income
            - usn_income_outcome
            - envd
            - esn
            - patent
          example: osn
        Payments:
          description: |
            Объект c информацией о видах суммы платежа.
            см. структура объекта `Payments`
            1. Если объект не передан, будет автоматически указана итоговая 
            сумма чека с видом оплаты "Безналичный".
            2. Если передан объект `receipt.Payments`, то значение в `Electronic`
            должно быть равно итоговому значению `Amount` в методе **Init**. 
            При этом сумма введенных значений по всем видам оплат, 
            включая `Electronic`, должна быть равна сумме (**Amount**) всех товаров, 
            переданных в объекте `receipt.Items`.
          $ref: '#/components/schemas/Payments'
    ClientInfo:
      type: object
      description: |
        Информация по клиенту.
        Обязателен для товаров с маркировкой.
      properties:
        Birthdate:
          description: |
            Дата рождения клиента в формате ДД.ММ.ГГГГ 
          type: string
        Citizenship:
          description: |
            Числовой код страны, гражданином которой является
            клиент. Код страны указывается в соответствии с
            Общероссийским классификатором стран мира [ОКСМ](https://classifikators.ru/oksm)
          type: string
        DocumentСode:
          description: |
            Числовой код вида документа, удостоверяющего
            личность.
            Может принимать только значения
            |Код|Описание|
            |---|---|
            | 21 | Паспорт гражданина Российской Федерации|
            | 22 | Паспорт гражданина Российской Федерации, дипломатический паспорт, служебный паспорт, удостоверяющие личность гражданина Российской Федерации за пределами Российской Федерации|
            | 26 | Временное удостоверение личности гражданина Российской Федерации, выдаваемое на период оформления паспорта гражданина Российской Федерации|
            | 27 | Свидетельство о рождении гражданина Российской Федерации (для граждан Российской Федерации в возрасте до 14 лет)|
            | 28 | Иные документы, признаваемые документами, удостоверяющими личность гражданина Российской Федерации в соответствии с законодательством Российской Федерации|
            | 31 | Паспорт иностранного гражданина|
            | 32 | Иные документы, признаваемые документами, удостоверяющими личность иностранного гражданина в соответствии с законодательством Российской Федерации и международным договором Российской Федерации|
            | 33 | Документ, выданный иностранным государством и признаваемый в соответствии с международным договором Российской Федерации в качестве документа, удостоверяющего личность лица безгражданства.|
            | 34 | Вид на жительство (для лиц без гражданства)|
            | 35 | Разрешение на временное проживание (для лиц без гражданства)|
            | 36 | Свидетельство о рассмотрении ходатайства о признании лица без гражданства беженцем на территории Российской Федерации по существу|
            | 37 | Удостоверение беженца|
            | 38 | Иные документы, признаваемые документами, удостоверяющими личность лиц без гражданства в соответствии с законодательством Российской Федерации и международным договором Российской Федерации|
            | 40 | Документ, удостоверяющий личность лица, не имеющего действительного документа, удостоверяющего личность, на период рассмотрения заявления о признании гражданином Российской Федерации или о приеме в гражданство Российской Федерации|
          type: string
          example: '21'
        DocumentData:
          description: |
            Реквизиты документа, удостоверяющего личность
            (например: серия и номер паспорта)
          type: string
        Address:
          description: |
            Адрес клиента, грузополучателя.
          type: string
          maxLength: 256
    MarkCode:
      type: object
      description: |
        Код маркировки в машиночитаемой форме,
        представленный в виде одного из видов кодов,
        формируемых в соответствии с требованиями,
        предусмотренными правилами, для нанесения
        на потребительскую упаковку, или на товары,
        или на товарный ярлык
        * Включается в чек в случае, если предметом расчета является товар, подлежащий обязательной маркировке средством идентификации (соответствующий код в поле paymentObject)
      required:
        - MarkCodeType
        - Value
      properties:
        MarkCodeType:
          description: |
            Тип штрих кода.
            Возможные значения:
            * UNKNOWN - код товара, формат которого не
            идентифицирован, как один из реквизитов
            * EAN8 - код товара в формате EAN-8.
            * EAN13 - код товара в формате EAN-13
            * ITF14 - код товара в формате ITF-14
            * GS10 - код товара в формате GS1,
            нанесенный на товар, не подлежащий
            маркировке
            * GS1M - код товара в формате GS1,
            нанесенный на товар, подлежащий
            маркировке
            * SHORT - код товара в формате короткого кода
            маркировки, нанесенный на товар,
            * FUR - контрольно-идентификационный знак
            мехового изделия.
            * EGAIS20 - код товара в формате ЕГАИС-2.0.
            * EGAIS30 - код товара в формате ЕГАИС-3.0.
            * RAWCODE - Код маркировки, как он был прочитан сканером.
          type: string
          example: EAN8
        Value:
          description: |
            Код маркировки
          type: string
          example: '12345678'
    MarkQuantity:
      type: object
      description: |
        Реквизит «дробное количество маркированного товара».
        Передается только в случае, если расчет осуществляется 
        за маркированный товар (соответствующий код в поле 
        paymentObject) и значение в поле measurementUnit 
        равно «0» <br> MarkQuantity не является обязательным объектом, в том числе для товаров с маркировкой. Этот объект МОЖНО передавать, если товар с маркировкой. Т.е. даже при ФФД 1.2 этот объект не является обязательным
        Пример: 
        ```
              {
              "numenator": "1"
              "denominator" "2"  
              }
        ```
      properties:
        Numerator:
          description: |
            Числитель дробной части предмета расчета. 
            Значение должно быть строго меньше
            значения реквизита «знаменатель»
          type: number
          example: 1
        Denominator:
          description: |
            Знаменатель дробной части предмета расчета. 
            Значение равно количеству товара в партии (упаковке), 
            имеющей общий код маркировки товара.
          type: number
          example: 2
    SectoralItemProps:
      type: object
      description: |
        Отраслевой реквизит предмета расчета. Необходимо указывать только для товаров подлежащих обязательной маркировке средством
        идентификации и включение данного реквизита предусмотрено НПА отраслевого регулирования для
        соответствующей товарной группы.
      required:
        - FederalId
        - Date
        - Number
        - Value
      properties:
        FederalId:
          description: |
            Идентификатор ФОИВ (федеральный орган
            исполнительной власти).
          type: string
          example: '001'
        Date:
          description: |
            Дата нормативного акта ФОИВ
          type: string
          format: date
          example: 21.11.2020
        Number:
          description: |
            Номер нормативного акта ФОИВ
          type: string
          example: 123/43
        Value:
          description: |
            Состав значений, определенных нормативным актом ФОИВ.
          type: string
          example: test value SectoralItemProps
    Items_FFD_12:
      type: object
      description: |
        Массив, содержащий в себе информацию о товарах. <br>
        Атрибуты, предусмотренные в протоколе для отправки чеков по маркируемым товарам, не являются
        обязательными для товаров без маркировки. Если используется ФФД 1.2, но реализуемый товар - не
        подлежит маркировке, то поля можно не отправлять или отправить со значением null.
      required:
        - Name
        - Price
        - Quantity
        - Amount
        - Tax
        - PaymentMethod
        - PaymentObject
        - MeasurementUnit
      properties:
        AgentData:
          type: object
          $ref: '#/components/schemas/AgentData'
        SupplierInfo:
          type: object
          $ref: '#/components/schemas/SupplierInfo'
        Name:
          description: |
            Наименование товара.
          type: string
          maxLength: 128
          example: Наименование товара 1
        Price:
          description: Цена в копейках
          type: number
          example: 10000
        Quantity:
          description: |
            Количество или вес товара
            * Максимальное количество символов - 8, где целая часть не более 5 знаков, а дробная часть не более 3 знаков для Атол, не более 2 знаков для CloudPayments
            * Значение «1», если передан объект MarkCode
          type: number
          maxLength: 8
          example: 1
        Amount:
          description: |
            Стоимость товара в копейках.
            Произведение Quantity и Price
          type: number
          maxLength: 10
          example: 10000
        Tax:
          description: |
            Ставка НДС.
            Перечисление со значениями:
            * none - без НДС;
            * vat0 - НДС по ставке 0%
            * vat10 - НДС по ставке 10%
            * vat20 - НДС по ставке 20%
            * vat110 - НДС чека по расчетной ставке 10/110
            * vat120 - НДС чека по расчетной ставке 20/120
          type: string
          enum:
            - none
            - vat0
            - vat10
            - vat20
            - vat110
            - vat120
          example: vat10
        PaymentMethod:
          description: |
            Признак способа расчёта. 
            Возможные значения:
             * «full_prepayment» – предоплата 100%
             * «prepayment» – предоплата
             * «advance» – аванс
             * «full_payment» – полный расчет
             * «partial_payment» – частичный расчет и кредит
             * «credit» – передача в кредит
             * «credit_payment» – оплата кредита <br>
            Если значение не
            передано, по умолчанию в онлайн-кассу
            передается признак способа расчёта
            "full_payment".
          type: string
          enum:
            - full_prepayment
            - prepayment
            - advance
            - full_payment
            - partial_payment
            - credit
            - credit_payment
          example: full_prepayment
        PaymentObject:
          description: |
            Значения реквизита "признак предмета расчета"
            (тег 1212) таблица 101
            Возможные значения:
            * «commodity» – товар
            * «excise» – подакцизный товар
            * «job» – работа
            * «service» – услуга
            * «gambling_bet» – ставка азартной игры
            * «gambling_prize» – выигрыш азартной игры
            * «lottery» – лотерейный билет
            * «lottery_prize» – выигрыш лотереи
            * «intellectual_activity» – предоставление
              результатов интеллектуальной деятельности
            * «payment» – платеж
            * «agent_commission» – агентское
              вознаграждение
            * «contribution» - Выплата
            * «property_rights» - Имущественное право
            * «unrealization» - Внереализационный доход
            * «tax_reduction» - Иные платежи и взносы
            * «trade_fee» - Торговый сбор
            * «resort_tax» - Курортный сбор
            * «pledge» - Залог
            * «income_decrease» - Расход
            * «ie_pension_insurance_without_payments» - Взносы на ОПС ИП
            * «ie_pension_insurance_with_payments» - Взносы на ОПС
            * «ie_medical_insurance_without_payments» - Взносы на ОМС ИП
            * «ie_medical_insurance_with_payments» - Взносы на ОМС
            * «social_insurance» - Взносы на ОСС
            * «casino_chips» - Платеж казино
            * «agent_payment» - Выдача ДС
            * «excisable_goods_without_marking_code» - АТНМ
            * «excisable_goods_with_marking_code» - АТМ
            * «goods_without_marking_code» - ТНМ
            * «goods_with_marking_code» - ТМ
            * «another» – иной предмет расчета
          type: string
          enum:
            - commodity
            - excise
            - job
            - service
            - gambling_bet
            - gambling_prize
            - lottery
            - lottery_prize
            - intellectual_activity
            - payment
            - agent_commission
            - contribution
            - property_rights
            - unrealization
            - tax_reduction
            - trade_fee
            - resort_tax
            - pledge
            - income_decrease
            - ie_pension_insurance_without_payments
            - ie_pension_insurance_with_payments
            - ie_medical_insurance_without_payments
            - ie_medical_insurance_with_payments
            - social_insurance
            - casino_chips
            - agent_payment
            - excisable_goods_without_marking_code
            - excisable_goods_with_marking_code
            - goods_without_marking_code
            - goods_with_marking_code
            - another
          example: goods_with_marking_code
        UserData:
          description: |
            Дополнительный реквизит предмета расчета.
          type: string
          example: Данные пользователя ext.test.qa@tinkoff.ru
        Excise:
          description: |
            Сумма акциза в рублях с учетом копеек,
            включенная в стоимость предмета расчета.
            * Целая часть не более 8 знаков;
            * дробная часть не более 2 знаков;
            * значение не может быть отрицательным.
          type: string
          example: '12.2'
        CountryCode:
          description: |
            Цифровой код страны происхождения товара в
            соответствии с Общероссийским
            классификатором стран мира (3 цифры)
          type: string
          maxLength: 3
          example: '056'
        DeclarationNumber:
          description: |
            Номер таможенной декларации
          type: string
          maxLength: 32
          example: '12345678901'
        MeasurementUnit:
          description: |
            Единицы измерения.
            Передовать в соответствии с ОК 015-94 (МК 002-97)). <br>
            Возможные варианты указаны в <a href="https://www.consultant.ru/document/cons_doc_LAW_362322/0060b1f1924347c03afbc57a8d4af63888f81c6c/">статье</a> (также возможна передача произвольных значений).<br> MeasurementUnit обязателен, в случае если ФФД онлайн-кассы 1.2.
          type: string
          example: шт
        MarkProcessingMode:
          description: |
            Режим обработки кода маркировки.
            Должен принимать значение равное «0».
            Включается в чек в случае, если предметом расчета 
            является товар, подлежащий обязательной
            маркировке средством идентификации 
            (соответствующий код в поле paymentObject).
          type: string
        MarkCode:
          type: array
          description: |
            Код маркировки в машиночитаемой форме,
            представленный в виде одного из видов кодов,
            формируемых в соответствии с требованиями,
            предусмотренными правилами, для нанесения
            на потребительскую упаковку, или на товары,
            или на товарный ярлык
            * Включается в чек в случае, если предметом расчета является товар, подлежащий обязательной маркировке средством идентификации (соответствующий код в поле paymentObject)
          $ref: '#/components/schemas/MarkCode'
        MarkQuantity:
          type: object
          $ref: '#/components/schemas/MarkQuantity'
        SectoralItemProps:
          type: object
          $ref: '#/components/schemas/SectoralItemProps'
    Receipt_FFD_12:
      type: object
      description: Объект с информацией о видах суммы платежа. Если объект не передан, то будет автоматически указана итоговая сумма чека с видом оплаты "Безналичная"
      required:
        - FfdVersion
        - Taxation
        - Items
      properties:
        FfdVersion:
          description: |
            Версия ФФД.
            Возможные значения:
            * "FfdVersion": "1.2"
            * "FfdVersion": "1.05"
          type: string
        ClientInfo:
          type: object
          $ref: '#/components/schemas/ClientInfo'
        Taxation:
          description: |
            Система налогообложения. Перечисление с
            возможными значениями:
            * "osn" - общая СН;
            * "usn_income" - упрощенная СН (доходы);
            * "usn_income_outcome" - упрощенная СН (доходы минус расходы);
            * "envd" - единый налог на вмененный доход;
            * "esn" - единый сельскохозяйственный налог;
            * "patent" - патентная СН.
          type: string
          enum:
            - osn
            - usn_income
            - usn_income_outcome
            - envd
            - esn
            - patent
          example: osn
        Email:
          description: |
            Электронная почта клиента.
            Атрибут должен быть заполнен, если не передано значение 
            в атрибуте `Phone` 
          type: string
          format: email
          maxLength: 64
          example: a@test.ru
        Phone:
          description: |
            Телефон клиента в формате +{Ц}
            Атрибут должен быть заполнен, если не передано значение 
            в атрибуте `Email` 
          type: string
          maxLength: 64
          example: '+79031234567'
        Customer:
          description: Идентификатор/Имя клиента
          type: string
          example: '78894325'
        CustomerInn:
          description: ИНН клиента
          type: string
          example: '788621292'
        Items:
          description: Массив, содержащий в себе информацию о товарах
          type: array
          $ref: '#/components/schemas/Items_FFD_12'
        Payments:
          description: |
            Объект c информацией о видах суммы платежа.
            см. структура объекта `Payments`
            1. Если объект не передан, будет автоматически указана итоговая 
            сумма чека с видом оплаты "Безналичный".
            2. Если передан объект `receipt.Payments`, то значение в `Electronic`
            должно быть равно итоговому значению `Amount` в методе **Init**. 
            При этом сумма введенных значений по всем видам оплат, 
            включая `Electronic`, должна быть равна сумме (**Amount**) всех товаров, 
            переданных в объекте `receipt.Items`.
          type: array
          $ref: '#/components/schemas/Payments'
    Shops:
      type: object
      description: JSON объект с данными Маркетплейса. Обязательный для маркетплейсов.
      required:
        - ShopCode
        - Amount
      properties:
        ShopCode:
          description: |
            Код магазина
          type: string
          example: '700456'
        Amount:
          description: |
            Cумма в копейках, которая относится к
            указанному `ShopCode`
          type: number
          example: 10000
        Name:
          description: |
            Наименование товара
          type: string
          maxLength: 128
          example: Товар
        Fee:
          description: |
            Сумма комиссии в копейках, удерживаемая из
            возмещения Партнера в пользу Маркетплейса.
            Если не передано, используется комиссия,
            указанная при регистрации.
          type: string
          example: '500'
    Init_FULL:
      type: object
      required:
        - TerminalKey
        - Token
        - Amount
        - OrderId
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Amount:
          description: |
            * Сумма в копейках. Например, сумма 3руб. 12коп. - это число 312
            * Параметр должен быть равен сумме всех параметров `Amount`, переданных в объекте `Items`
            * Минимальная сумма операции с помощью СБП составляет 10 руб.
          type: number
          maxLength: 10
          example: 140000
        OrderId:
          description: Идентификатор заказа в системе Мерчанта. Возможно повторное использование идентификатора, если ранее по нему не было успешной авторизации
          type: string
          maxLength: 36
          example: '21050'
        Token:
          description: Подпись запроса.
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
        Description:
          description: |
            Описание заказа. 
            * Поле необходимо обязательно заполнять для осуществления привязки и одновременной оплаты по CБП. При оплате через СБП данная информация будет отображена в приложении мобильного банка клиента.
          type: string
          maxLength: 140
          example: Подарочная карта на 1400.00 рублей
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта.
            * Обязателен, если передан атрибут `Recurrent`. 
            * Если был передан в запросе, в нотификации будет указан `CustomerKey` и его `CardId`. См. метод [GetCardList](#tag/Metody-raboty-s-kartami/paths/~1GetCardList/post).
            * Необходим для сохранения карт на платежной форме (платежи в один клик).
            * Не является обязательным при рекуррентных платежах через СБП. 
          type: string
          maxLength: 36
        Recurrent:
          description: |
            Признак родительского рекуррентного платежа. 
            * Для регистрации автоплатежа - обязателен. Если передается и установлен в Y, то регистрирует платеж как рекуррентный. В этом случае после оплаты в нотификации на AUTHORIZED будет передан параметр RebillId для использования в методе Charge. Для осуществления привязки и одновременной оплаты по CБП необходимо передавать 'Y'. 

            Значение зависимо от атрибутов:
              * OperationInitiatorType в методе /init
              * Recurrent в методе /Init
            Детальная информация представлена в описании [Рекуррентный платёж](#tag/Rekurrentnyj-platyozh) и [Инициализация платежа](#tag/Standartnyj-platyozh/paths/~1Init/post).
          type: string
          maxLength: 1
          example: 'Y'
        PayType:
          description: |
            Определяет тип проведения платежа – двухстадийная или одностадийная оплата.
            * "O" - одностадийная оплата,
            * "T" - двухстадийная оплата
            Если параметр передан - используется его значение.
            Если нет - значение в настройках терминала. 
          type: string
          enum:
            - O
            - T
        Language:
          description: |
            Язык платежной формы.
            * ru — русский
            * en — английский. 
            Если не передан, форма откроется на русском языке 
          type: string
          maxLength: 2
          example: ru
        NotificationURL:
          description: |
            URL на веб-сайте Мерчанта, куда будет отправлен
            POST запрос о статусе выполнения вызываемых методов 
            (настраивается в Личном кабинете):
            * Если параметр передан – используется его значение.
            * Если нет – значение в настройках терминала.
          type: string
          format: uri
        SuccessURL:
          description: |
            URL на веб-сайте Мерчанта, куда будет
            переведен клиент в случае успешной оплаты
            (настраивается в Личном кабинете):
            * Если параметр передан – используется его значение.
            * Если нет – значение в настройках терминала.
          type: string
          format: uri
        FailURL:
          description: |
            URL на веб-сайте Мерчанта, куда будет
            переведен клиент в случае неуспешной
            оплаты (настраивается в Личном кабинете):
            * Если параметр передан – используется его значение.
            * Если нет – значение в настройках терминала.
          type: string
          format: uri
        RedirectDueDate:
          description: |
            Cрок жизни ссылки или динамического QR-кода
            СБП (если выбран данный способ оплаты).
            Если текущая дата превышает дату, переданную в
            данном параметре, ссылка для оплаты или
            возможность платежа по QR-коду становятся
            недоступными и платёж выполнить нельзя.
            * Максимальное значение: 90 дней от текущей даты.
            * Минимальное значение: 1 минута от текущей даты.
            * Формат даты: YYYY-MM-DDTHH24:MI:SS+GMT
            * Пример даты: 2016-08-31T12:28:00+03:00 <br>
            Если не передан, принимает значение 24 часа для платежа 
            и 30 дней для счета

            При выставлении счета через Личный кабинет: <br>
            В случае, если параметр RedirectDueDate не был передан, проверяется настроечный параметр
            платежного терминала REDIRECT_TIMEOUT, который может содержать значение срока жизни ссылки в
            часах. Если его значение больше нуля, то оно будет установлено в качестве срока жизни ссылки или
            динамического QR-кода. Иначе, устанавливается значение «по умолчанию» - 1440 мин.(1 сутки)
          format: date-time
        DATA:
          description: |
            JSON-объект, который позволяет передавать дополнительные параметры по операции и задавать определенные настройки в формате "ключ":"значение".

            Максимальная длина для каждого передаваемого параметра:
              * Ключ - 20 знаков
              * Значение - 100 знаков.

            Максимальное количество пар "ключ":"значение" - 20.

            1. Если у терминала включена опция привязки клиента после 
            успешной оплаты и передается параметр `CustomerKey`, то в передаваемых 
            параметрах `DATA` могут присутствовать параметры метода **AddCustomer**. 
            Если они присутствуют, то автоматически привязываются к клиенту.
            Например, если указать: 
            ```
            "DATA":{"Phone":"+71234567890", "Email":"a@test.com"}
            ``` 
            к клиенту автоматически будут привязаны данные Email и телефон, 
            и они будут возвращаться при вызове метода **GetCustomer**.

                Для МСС 4814 обязательно передать значение в параметре `Phone`.
                Требования по заполнению: 
                  * минимум 7 символов
                  * максимум 20 символов
                  * разрешены только цифры, исключение - первый символ может быть «+»

                Для МСС 6051 и 6050 обязательно передать параметр `account` (номер электронного кошелька, не должен превышать 30 символов). Пример:
                ```
                "DATA": {"account":"123456789"}
                ```
            2. Если используется функционал сохранения карт на платежной форме, 
            то при помощи опционального параметра `DefaultCard` можно задать 
            какая карта будет выбираться по умолчанию. 
            Возможные варианты:
            * Оставить платежную форму пустой. Пример:
              ```
              "DATA":{"DefaultCard":"none"}
              ```
            * Заполнить данными передаваемой карты. В этом случае передается `CardId`. Пример:
              ```
               "DATA":{"DefaultCard":"894952"}
              ```
            * Заполнить данными последней сохраненной карты. Применяется, если параметр `DefaultCard` не передан, передан с некорректным значением или в значении null.
            По умолчанию возможность сохранение карт на платежной форме может быть отключена. Для активации обратитесь в службу технической поддержки.

            3. При реализации подключения оплаты через Yandex Pay Web или Tinkoff Pay Web,
            необходимо обязательно передавать следующие параметры в объекте Data.
            Пример:
              ```
              "DATA": {
                "TinkoffPayWeb": "true",
                "Device": "Desktop",
                "DeviceOs": "iOS",
                "DeviceWebView": "true",
                "DeviceBrowser": "Safari"
               }
              ```
            где следует передать параметры устройства, с которого будет осуществлен переход. Рекомендации для заполнения поля Device:
              * "SDK" -  при способе интеграции "Мобильный SDK"
              * "Mobile"  -  при оплате c мобильного устройства
              * "Desktop" -  при оплате c десктопного устройства

            4. Параметр `notificationEnableSource` позволяет отправлять нотификации только если Source (также
            присутствует в параметрах сессии) платежа входит в перечень указанных в параметре. Возможные
            варианты: TinkoffPay, sbpqr, YandexPay. Пример:
             ```
             notificationEnableSource=TinkoffPay
             ```  
            5. Для осуществления привязки и одновременной оплаты по CБП необходимо передавать параметр "QR" = "true"
            6. При передаче в объекте DATA атрибута OperationInitiatorType учитывать взаимосвязь его значений с:
               * Значением атрибута Reccurent в методе /Init
               * Значением атрибута RebillId в методе /Charge
               * Типом терминала, используемом для проведения операций (ECOM/AFT)
              
              Подробную таблицу см. в разделе [Передача признака инициатора операции](#section/Peredacha-priznaka-iniciatora-operacii)

              В случае передачи значений атрибутов не соответствующих таблице - MAPI вернет ошибку 1126 
              (Несопоставимые значения rebillId или Recurrent с переданным значением OperationInitiatorType)
          oneOf:
            - $ref: '#/components/schemas/Common'
            - $ref: '#/components/schemas/TinkoffPay'
            - $ref: '#/components/schemas/YandexPay'
            - $ref: '#/components/schemas/LongPay'
        Receipt:
          description: JSON-объект с данными чека. Обязателен, если подключена онлайн-касса.
          oneOf:
            - $ref: '#/components/schemas/Receipt_FFD_105'
            - $ref: '#/components/schemas/Receipt_FFD_12'
        Shops:
          type: array
          description: JSON-объект с данными Маркетплейса. Обязательный для маркетплейсов.
          items:
            $ref: '#/components/schemas/Shops'
        Descriptor:
          description: Динамический дескриптор точки
          type: string
          example: '678451'
    Init_SDK:
      type: object
      description: SDK
      required:
        - TerminalKey
        - Token
        - Amount
        - OrderId
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Amount:
          description: |
            * Сумма в копейках. Например, сумма 3руб. 12коп. это число 312
            * Параметр должен быть равен сумме всех параметров `Amount`, переданных в объекте `Items`
            * Минимальная сумма операции с помощью СБП составляет 10 руб.
          type: number
          maxLength: 10
          example: 140000
        OrderId:
          description: Идентификатор заказа в системе Мерчанта
          type: string
          maxLength: 36
          example: '21050'
        Token:
          description: Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
        Description:
          description: Описание заказа. Поле необходимо обязательно заполнять для осуществления привязки и одновременной оплаты по CБП.
          type: string
          maxLength: 250
          example: Подарочная карта на 1400.00 рублей
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта.
            * Обязателен, если передан атрибут `Recurrent`. 
            * Если был передан в запросе, в нотификации будет указан `CustomerKey` и его `CardId`. См. метод [GetCardList](#tag/Metody-raboty-s-kartami/paths/~1GetCardList/post).
            * Необходим для сохранения карт на платежной форме (платежи в один клик).
          type: string
          maxLength: 36
        Recurrent:
          description: |
            Признак родительского рекуррентного платежа. 
            * Для регистрации автоплатежа - обязателен. Если передается и установлен в Y, то регистрирует платеж как рекуррентный. В этом случае после оплаты в нотификации на AUTHORIZED будет передан параметр RebillId для использования в методе [Charge](#tag/Rekurrentnyj-platyozh/paths/~1Charge/post).   
            * Для осуществления привязки и одновременной оплаты по CБП необходимо передавать 'Y'
          type: string
          maxLength: 1
          example: 'Y'
        PayType:
          description: |
            Определяет тип проведения платежа – двухстадийная или одностадийная оплата.
            * "O" - одностадийная оплата,
            * "T" - двухстадийная оплата
          type: string
          enum:
            - O
            - T
        Language:
          description: |
            Язык платежной формы.
            * ru — русский
            * en — английский. 
            Если не передан, форма откроется на русском языке 
          type: string
          maxLength: 2
          enum:
            - ru
            - en
        NotificationURL:
          description: |
            URL на веб-сайте Мерчанта, куда будет отправлен
            POST запрос о статусе выполнения вызываемых методов 
            (настраивается в Личном кабинете):
            * Если параметр передан – используется его значение.
            * Если нет – значение в настройках терминала.
          type: string
          format: uri
        SuccessURL:
          description: |
            URL на веб-сайте Мерчанта, куда будет
            переведен клиент в случае успешной оплаты (для установки обратитесь к персональному менеджеру)
            * Если параметр передан – используется также значение, установленное через менеджера (актуально для SDK)
          type: string
          format: uri
        FailURL:
          description: |
            URL на веб-сайте Мерчанта, куда будет
            переведен клиент в случае неуспешной оплаты (для установки обратитесь к персональному менеджеру)
            * Если параметр передан – используется также значение, установленное через менеджера (актуально для SDK)
          type: string
          format: uri
        RedirectDueDate:
          description: |
            Cрок жизни ссылки или динамического QR-кода
            СБП (если выбран данный способ оплаты).
            Если текущая дата превышает дату, переданную в
            данном параметре, ссылка для оплаты или
            возможность платежа по QR-коду становятся
            недоступными и платёж выполнить нельзя.
            * Максимальное значение: 90 дней от текущей даты.
            * Минимальное значение: 1 минута от текущей даты.
            * Формат даты: YYYY-MM-DDTHH24:MI:SS+GMT
            * Пример даты: 2016-08-31T12:28:00+03:00 <br>
            Если не передан, принимает значение 24 часа для платежа 
            и 30 дней для счета
          type: string
          format: date-time
        DATA:
          description: |
            JSON-объект, который позволяет передавать дополнительные параметры по операции и задавать определенные настройки в формате "ключ":"значение".

            Максимальная длина для каждого передаваемого параметра:
              * Ключ - 20 знаков
              * Значение - 100 знаков.

            Максимальное количество пар "ключ":"значение" - 20.

            1. Если у терминала включена опция привязки клиента после 
            успешной оплаты и передается параметр `CustomerKey`, то в передаваемых 
            параметрах `DATA` могут присутствовать параметры метода **AddCustomer**. 
            Если они присутствуют, то автоматически привязываются к клиенту.
            Например, если указать: 
            ```
            "DATA":{"Phone":"+71234567890", "Email":"a@test.com"}
            ``` 
            к клиенту автоматически будут привязаны данные Email и телефон, 
            и они будут возвращаться при вызове метода **GetCustomer**.

                Для МСС 4814 обязательно передать значение в параметре `Phone`.

                Для МСС 6051 и 6050 обязательно передать параметр `account` (номер электронного кошелька, не должен превышать 30 символов). Пример:
            ```
            "DATA": {"account":"123456789"}
            ```
            2. Если используется функционал сохранения карт на платежной форме, 
            то при помощи опционального параметра `DefaultCard` можно задать 
            какая карта будет выбираться по умолчанию. 
            Возможные варианты:
            * Оставить платежную форму пустой. Пример:
              ```
              "DATA":{"DefaultCard":"none"}
              ```
            * Заполнить данными передаваемой карты. В этом случае передается `CardId`. Пример:
              ```
              "DATA":{"DefaultCard":"894952"}
              ```
            * Заполнить данными последней сохраненной карты. Применяется, если параметр `DefaultCard` не передан, передан с некорректным значением или в значении null.

            3. При реализации подключения оплаты через Yandex Pay Web или Tinkoff Pay Web,
            необходимо обязательно передавать соотвествующие параметры в объекте Data
            4. Для осуществления привязки и одновременной оплаты по CБП необходимо передавать параметр "QR" = "true"
          oneOf:
            - $ref: '#/components/schemas/Common'
            - $ref: '#/components/schemas/TinkoffPay'
            - $ref: '#/components/schemas/YandexPay'
            - $ref: '#/components/schemas/LongPay'
        Receipt:
          description: JSON объект с данными чека
          oneOf:
            - $ref: '#/components/schemas/Receipt_FFD_105'
            - $ref: '#/components/schemas/Receipt_FFD_12'
        Shops:
          description: JSON объект с данными Маркетплейса
          type: array
          items:
            $ref: '#/components/schemas/Shops'
    Response:
      type: object
      required:
        - TerminalKey
        - Amount
        - OrderId
        - Success
        - PaymentId
        - ErrorCode
        - Status
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Amount:
          description: |
            Сумма в копейках
          type: number
          maxLength: 20
          example: 100000
        OrderId:
          description: |
            Идентификатор заказа в системе Мерчанта
          type: string
          maxLength: 36
          example: '21050'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Статус транзакции
          type: string
          maxLength: 20
          example: NEW
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: string
          maxLength: 20
          example: '13660'
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        PaymentURL:
          description: |
            Ссылка на платежную форму (параметр возвращается только `для Мерчантов без PCI DSS`)
          type: string
          format: uri
          maxLength: 100
          example: https://securepay.tinkoff.ru/rest/Authorize/1B63Y1
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          example: '0'
    PaymentData:
      type: object
      required:
        - TerminalKey
        - Amount
      description: Информация о платеже
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        Amount:
          type: number
          description: Сумма в копейках. Параметр "Amount" должен быть равен сумме всех параметров "Amount", переданных в объекте Items
          example: 1751
        OrderId:
          type: string
          description: Уникальный номер заказа в системе Мерчанта
          example: autoOrd1615285401068DELb
        Description:
          type: string
          description: Краткое описание
        DATA:
          type: object
          description: JSON объект, содержащии дополнительные параметры в виде "ключ" - «значение». Данные параметры будут переданы на страницу оплаты (в случае ее кастомизации). <br> Максимальная длина для каждого передаваемого параметра! <br> ключ - 20 знаков; <br> значение - 100 знаков. <br> Максимальное количество пар «ключ значение» не может превышать 20.
        Receipt:
          $ref: '#/components/schemas/Receipt_FFD_105'
    PaymentInfos:
      type: object
      required:
        - PaymentData
      description: Информация о платеже
      properties:
        InfoEmail:
          type: string
          description: Адрес электронной почты покупателя
        PaymentData:
          type: object
          description: Идентификатор вашего магазина
          $ref: '#/components/schemas/PaymentData'
    PaymentItem:
      type: object
      required:
        - container
        - paymentInfo
      properties:
        container:
          type: string
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfos'
    TinkoffPayweb:
      type: object
      description: Объект с информацией о платежных системах
      properties:
        TinkoffPay:
          type: object
          description: Объект с информацией о Tinkoff Pay
    TinkoffFps:
      type: object
      description: Объект с информацией о платежных системах
      properties:
        TinkoffPay:
          type: object
          description: Объект с информацией о СБП
    InitPayments:
      type: object
      required:
        - TerminalKey
      properties:
        container:
          type: string
          description: ID элемента или элемент, в который вставляются кнопки
        TerminalKey:
          type: string
          description: Идентификатор вашего магазина
        paymentInfo:
          type: object
          description: Информация о платеже
          $ref: '#/components/schemas/PaymentInfos'
        paymentItems:
          type: array
          description: Список объектов с информацией о размещаемых кнопках
          items:
            - $ref: '#/components/schemas/PaymentItem'
        paymentSystems:
          type: object
          description: Объект с информацией о платежных системах
          oneOf:
            - $ref: '#/components/schemas/TinkoffPayweb'
            - $ref: '#/components/schemas/TinkoffFps'
    InitPaymentsResponse:
      title: Пример ответа
      type: object
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса
          enum:
            - true
            - false
          example: 'true'
    3DSv2:
      type: object
      required:
        - threeDSCompInd
        - language
        - timezone
        - screen_height
        - screen_width
        - cresCallbackUrl
      properties:
        threeDSCompInd:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            Идентификатор выполнения 3DS Method:
            * 'Y' - выполнение метода успешно завершено
            * 'N' - выполнение метода завершено неуспешно или метод не выполнялся
          example: 'Y'
        language:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br> 
            Язык браузера по формату IETF BCP47.
            Рекомендация по получению значения в браузере (из глобального объекта navigator):`navigator.language`
          example: RU
        timezone:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            Time-zone пользователя в минутах.
            Рекомендация по получению значения в браузере: вызов метода `getTimezoneOffset()`
          example: '-300'
        screen_height:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            Высота экрана в пикселях.
            Рекомендация по получению значения в браузере (из глобального объекта screen): `screen.height`
          example: '1024'
        screen_width:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            Ширина экрана в пикселях.
            Рекомендация по получению значения в браузере (из глобального объекта screen): `screen.width`
          example: '967'
        cresCallbackUrl:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            URL который будет использоваться для получения результата (CRES) после завершения Challenge Flow (аутентификации с дополнительным переходом на страницу ACS)
          example: www.callbackurl.ru
        colorDepth:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            Глубина цвета в битах.
            <br> Допустимые значения: 1/4/8/15/16/24/32/48
            <br> Рекомендация по получению значения в браузере (из глобального объекта screen): `screen.colorDepth`
          default: 48
          example: '48'
        javaEnabled:
          type: string
          description: |
            `deviceChannel 02 - BRW`<br>
            Поддерживает ли браузер пользователя Java: 
            * true
            * false
          default: false
          example: 'false'
    FinishAuthorize_FULL:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - CardData
        - Token
      properties:
        TerminalKey:
          type: string
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
          maxLength: 20
          example: 700001702044
        Token:
          type: string
          description: |
            Подпись запроса
          example: f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
        IP:
          type: string
          description: |
            IP-адрес клиента.

            Обязательный параметр для 3DS второй
            версии. DS платежной системы требует 
            передавать данный адрес в полном формате, 
            без какихлибо сокращений (8 групп по 4 символа).

            Данный формат регламентируется на уровне
            спецификации EMVCo.<br>

            Пример правильного адреса: 
              ``` 2011:0db8:85a3:0101:0101:8a2e:0370:7334 ```<br>
            Пример неправильного адреса:
            ``` 2a00:1fa1:c7da:9285:0:51:838b:1001 ```
          example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334
        SendEmail:
          type: boolean
          description: |
            * true – отправлять клиенту информацию на
            почту об оплате
            * false – не отправлять
        Source:
          type: string
          description: |
            Источник платежа.
            Значение параметра зависит от параметра Route.
            - ACQ - cards (так же поддерживается написание Cards), YandexPay
            - MC - beeline / mts / tele2 / megafon
            - EINV - einvoicing
            - WM - webmoney
          enum:
            - cards
            - beeline
            - mts
            - tele2
            - megafon
            - einvoicing
            - webmoney
            - YandexPay
          example: cards
        DATA:
          type: object
          description: |
            JSON объект, содержащий дополнительные
            параметры в виде `ключ`:`значение`. 
            Данные параметры будут переданы на страницу
            оплаты (в случае ее кастомизации).
            Максимальная длина для каждого передаваемого параметра:
            * Ключ - 20 знаков;
            * Значение - 100 знаков.
            Максимальное количество пар `ключ`:`значение` не может 
            превышать 20.
          oneOf:
            - $ref: '#/components/schemas/3DSv2'
            - type: object
              additionalProperties:
                type: string
                example: '11111'
        InfoEmail:
          type: string
          format: email
          description: |
            Email для отправки информации об оплате.
            Обязателен при передаче `SendEmail`
          example: qwerty@test.com
        EncryptedPaymentData:
          type: string
          description: |
            Данные карты.
            Используется и является обязательным только 
            для ApplePay или GooglePay
        CardData:
          type: string
          description: |-
            Объект CardData собирается в виде списка `ключ`=`значение` c разделителем `;`.
            Объект зашифровывается открытым ключом (X509 RSA 2048), получившееся бинарное значение кодируется в `Base64`.
            Открытый ключ генерируется Тинькофф Кассой и выдается при регистрации терминала.
            Доступен в ЛК ИЭ в разделе "Магазины", при изменении типа подключения на "Мобильное".

            |Наименование|Тип данных|Обязательность|Описание|
            |---|---|---|---|
            |PAN|Number|ДА|Номер карты|
            |ExpDate| Number|Да| Месяц и год срока действия карты в формате MMYY|
            |CardHolder |String| Нет| Имя и фамилия держателя карты (как на карте)|
            |CVV |String| Нет |Код защиты (с обратной стороны карты). Для платежей по Apple Pay (с расшифровкой токена на своей стороне) не является обязательным.|
            |ECI |String |Нет |Electronic Commerce Indicator. Индикатор, показывающий степень защиты, применяемую при предоставлении клиентом своих данных ТСП.|
            |CAVV |String |Нет |Cardholder Authentication Verification Value или Accountholder Authentication Value|


            Пример значения элемента формы CardData:
            ```
            PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
            ```

            Для YandexPay (расшифровка токена происходит на стороне Мерчанта) надо:
            1. Передавать `Route=ACQ` и `Source=YandexPay`;
            2. Передавать в `DATA.transactionId` значение `PaymentToken.messageId`;
            3. Передавать в `DATA.YandexPayWeb` значение true;
            4. Передавать параметр **CardData**:
                Размапить параметры из расшифрованного токена `event.token`
                - `paymentMethodDetails.pan` в **pan**;
                - `paymentMethodDetails,expirationMonth` + `paymentMethodDetails.expirationYear` в **ExpDate**;
                - `paymentMethodDetails.cryptogram` в **CAVV** (если есть);
                - `paymentMethodDetails.eci` в **ECI** (если есть)<br>

            Для MirPay (если интеграция с НСПК для получения платежного токена) надо:
            1. Передавать `Route=ACQ` и `Source= MirPay`;
            1. Передавать в `DATA.transId` значение `transId`;
            2. Передавать в `DATA.tavv` значение `cav`;
            3. Передавать параметр **CardData**:
                - **Pan** заполнять `tan`;
                - **ExpDate** заполнять `tem + tey`<br>
            Для случая, когда Мерчант интегрируется только с Банком для проведения платежа по MirPay данный 
            метод не вызывается. Эквайер самостоятельно получает платежный токен и инициирует авторизацию, 
            вместо Мерчанта.<br> 

            В случае получения **CAVV** в **CardData** оплата будет проводиться как оплата токеном, иначе прохождение 3DS будет регулироваться стандартными настройками треминала/платежа.

            Не используется и не является обязательным, если передается `EncryptedPaymentData`
          example: eyJzaWduYXR1cmUiOiJNRVVDSVFEdjNJS1A5WG9nWml4RytUUm9zZWFDK0RGd3RKd2FtMHVEcm91RUVGZVB6Z0lnYXBFbHhxQ3AwQWtZcVVmTFVMaVNhUjBKWkVQNmg 4THFqYks5YkJKQnM5d1x1MDAzZCIsInByb3RvY29sVmVyc2lvbiI6IkVDdjEiLCJzaWduZWRNZXNzYWdlIjoie1wiZW5jcnlwdGVkTWVzc2FnZVwiOlwiQW11dm5OYUIralBsa3VKTitrMUZLSDZFcm1VK2lTY052 L05rR3FFaXIxOHZmSWxkVFJ5L2U4cW5zMXkyanFtcm1acU1JSWNYMUhyTHBxRURpaXkvS3B6SUhNZFllcXRkSVVNOU1tRjNpejU2d2NTZUVVaXU2ODI3QThGcitaYm8xRWtWRjY1TUxRYVY3NlBOUFRndH UvQ1BodW5HUk0rN25KdVhDczVtbkVvOHFma0RNVk8xWktGWDQ4TnVEL2FKcDJQdVVIY2puSnBTZ0pTSDB4U21YSnAzU1MreXFDNm54N254WUEwN2h4YjYvSnp2R2s3ZExDU2hWWGU1Z2haUjNDaFQyV W8rRnpXTWJRRGZtSjBLQW9kc2VlR0xaaitqMzVqOUlKMkhJRFhIUUZZMWNuTW9YVUVoTjgvdEkvRkpqRnJiYVdFRkIzRDZwOFUzT2tkUmVaNHAyYi8yYURNZXVxR1ozSUtjc3R0R2lKMFhQQVhhZXYyQU8 o1M3RRQXVqQXRYdFlaekNTVjVBVXdXZS85T1VcXHUwMDNkXCJ9In0=
        Amount:
          type: number
          maxLength: 10
          description: |
            Сумма в копейках
          example: 10000
        deviceChannel:
          type: string
          description: |
            Канал устройства.
            Поддерживается следующий
            канал устройства:
            * 01 = Application (APP)
            * 02 = Browser (BRW) (используется по умолчанию, передавать параметр не требуется)
          example: '02'
        Route:
          type: string
          description: |
            Способ платежа.
            Является обязательным для Apple Pay или Google Pay.
          enum:
            - ACQ
            - MC
            - EINV
            - WM
          example: ACQ
    3DSv2SDK:
      type: object
      required:
        - sdkAppID
        - sdkEncData
        - sdkEphemPubKey
        - sdkMaxTimeout
        - sdkReferenceNumber
        - sdkTransID
        - sdkInterface
        - sdkUiType
      properties:
        sdkAppID:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Уникальный идентификатор приложения 3DS Requestor, который формируется 3DS SDK при каждой установке или обновлении приложения
          example: 6dg99s67h9d6hv
        sdkEncData:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Данные, собранные SDK.
            <br> JWE объект, полученный от 3DS SDK.
            <br> Должен быть дополнительно закодирован в `base64` строку
          example: f8s9v04bvglglgkvkUO0UvUF7rHlKL
        sdkEphemPubKey:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Компонент public key пары ephemeral key, сгенерированный 3DS SDK. 
            <br> JWE объект, полученный от 3DS SDK, должен быть дополнительно закодирован в `base64` строку
          example: f8s9v04POPP479GHky5dG7InO0UvUF7rHlKL
        sdkMaxTimeout:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Максимальное количество времени (в минутах)
          minLength: 5
          example: '05'
        sdkReferenceNumber:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Поставщик и версия 3DS SDK
          example: 3DSV2
        sdkTransID:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Уникальный идентификатор транзакции, назначенный 3DS SDK для идентификации одной транзакции
          example: 194050GHYYtu86nOJ
        sdkInterface:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Список поддерживаемых интерфейсов SDK.
            <br> Поддерживаемые значения:
            * 01 = Native
            * 02 = HTML
            * 03 = Both
          example: '02'
        sdkUiType:
          type: string
          description: |
            `deviceChannel 01 - APP`<br>
            Список поддерживаемых типов UI.
            <br> Значения для каждого интерфейса:
            * Native UI = 01–04
            * HTML UI = 01–05
            <br> Поддерживаемые значения:
            * 01 = Text
            * 02 = Single Select
            * 03 = Multi Select
            * 04 = OOB
            * 05 = HTML Other (valid only for HTML UI)
          example: '04'
    FinishAuthorize_SDK:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - CardData
        - Token
      properties:
        TerminalKey:
          type: string
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала 
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
          maxLength: 20
          example: 700001702044
        Token:
          type: string
          description: |
            Подпись запроса
          example: f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
        IP:
          type: string
          description: |
            IP-адрес клиента.

            Обязательный параметр для 3DS второй
            версии. DS платежной системы требует 
            передавать данный адрес в полном формате, 
            без какихлибо сокращений (8 групп по 4 символа).

            Данный формат регламентируется на уровне
            спецификации EMVCo.
          example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334
        SendEmail:
          type: boolean
          description: |
            * true – отправлять клиенту информацию на
            почту об оплате
            * false – не отправлять
        Source:
          type: string
          description: |
            Источник платежа.
            Является обязательным для Apple Pay или Google Pay
          enum:
            - cards
            - einvoicing
            - Installment
            - qrsbp
            - Bnpl
            - MC
            - RC
            - VC
            - TinkoffPay
            - TinkoffWallet
            - YandexPay
            - UP
            - ApplePay
            - GooglePay
          example: YandexPay
        DATA:
          type: object
          description: |
            JSON объект, содержащий дополнительные
            параметры в виде “ключ”:”значение”. 
            Данные параметры будут переданы на страницу
            оплаты (в случае ее кастомизации).
            Максимальная длина для каждого передаваемого параметра:
            * Ключ - 20 знаков;
            * Значение - 100 знаков.
            Максимальное количество пар «ключ-значение» не может 
            превышать 20.
          oneOf:
            - $ref: '#/components/schemas/3DSv2SDK'
            - type: object
              additionalProperties:
                type: string
        InfoEmail:
          type: string
          format: email
          description: |
            Email для отправки информации об оплате.
            Обязателен при передаче SendEmai
          example: qwerty@test.com
        EncryptedPaymentData:
          type: string
          description: |
            Данные карты.
            Используется и является обязательным только 
            для ApplePay или GooglePay
        CardData:
          type: string
          description: |-
            Объект CardData собирается в виде списка `ключ`=`значение` c разделителем `;`.
            Объект зашифровывается открытым ключом (X509 RSA 2048), получившееся бинарное значение кодируется в `Base64`.
            Открытый ключ генерируется Тинькофф Кассой и выдается при регистрации терминала.
            Доступен в ЛК ИЭ в разделе "Магазины", при изменении типа подключения на "Мобильное".

            |Наименование|Тип данных|Обязательность|Описание|
            |---|---|---|---|
            |PAN|Number|ДА|Номер карты|
            |ExpDate| Number|Да| Месяц и год срока действия карты в формате MMYY|
            |CardHolder |String| Нет| Имя и фамилия держателя карты (как на карте)|
            |CVV |String| Нет |Код защиты (с обратной стороны карты). Для платежей по Apple Pay (с расшифровкой токена на своей стороне) не является обязательным.|
            |ECI |String |Нет |Electronic Commerce Indicator. Индикатор, показывающий степень защиты, применяемую при предоставлении клиентом своих данных ТСП.|
            |CAVV |String |Нет |Cardholder Authentication Verification Value или Accountholder Authentication Value|


            Пример значения элемента формы CardData:
            ```
            PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
            ```

            Для YandexPay (расшифровка токена происходит на стороне Мерчанта) надо:
            1. Передавать `Route=ACQ` и `Source=YandexPay`;
            2. Передавать в `DATA.transactionId` значение `PaymentToken.messageId`;
            3. Передавать в `DATA.YandexPayWeb` значение true;
            4. Передавать параметр **CardData**:
                Размапить параметры из расшифрованного токена `event.token`
                - `paymentMethodDetails.pan` в **pan**;
                - `paymentMethodDetails,expirationMonth` + `paymentMethodDetails.expirationYear` в **ExpDate**;
                - `paymentMethodDetails.cryptogram` в **CAVV** (если есть);
                - `paymentMethodDetails.eci` в **ECI** (если есть)<br>

            Для MirPay (если интеграция с НСПК для получения платежного токена) надо:
            1. Передавать `Route=ACQ` и `Source= MirPay`;
            1. Передавать в `DATA.transId` значение `transId`;
            2. Передавать в `DATA.tavv` значение `cav`;
            3. Передавать параметр **CardData**:
                - **Pan** заполнять `tan`;
                - **ExpDate** заполнять `tem + tey`<br>
            Для случая, когда Мерчант интегрируется только с Банком для проведения платежа по MirPay данный 
            метод не вызывается. Эквайер самостоятельно получает платежный токен и инициирует авторизацию, 
            вместо Мерчанта.<br> 

            В случае получения **CAVV** в **CardData** оплата будет проводиться как оплата токеном, иначе прохождение 3DS будет регулироваться стандартными настройками треминала/платежа.

            Не используется и не является обязательным, если передается `EncryptedPaymentData`
          example: eyJzaWduYXR1cmUiOiJNRVVDSVFEdjNJS1A5WG9nWml4RytUUm9zZWFDK0RGd3RKd2FtMHVEcm91RUVGZVB6Z0lnYXBFbHhxQ3AwQWtZcVVmTFVMaVNhUjBKWkVQNmg 4THFqYks5YkJKQnM5d1x1MDAzZCIsInByb3RvY29sVmVyc2lvbiI6IkVDdjEiLCJzaWduZWRNZXNzYWdlIjoie1wiZW5jcnlwdGVkTWVzc2FnZVwiOlwiQW11dm5OYUIralBsa3VKTitrMUZLSDZFcm1VK2lTY052 L05rR3FFaXIxOHZmSWxkVFJ5L2U4cW5zMXkyanFtcm1acU1JSWNYMUhyTHBxRURpaXkvS3B6SUhNZFllcXRkSVVNOU1tRjNpejU2d2NTZUVVaXU2ODI3QThGcitaYm8xRWtWRjY1TUxRYVY3NlBOUFRndH UvQ1BodW5HUk0rN25KdVhDczVtbkVvOHFma0RNVk8xWktGWDQ4TnVEL2FKcDJQdVVIY2puSnBTZ0pTSDB4U21YSnAzU1MreXFDNm54N254WUEwN2h4YjYvSnp2R2s3ZExDU2hWWGU1Z2haUjNDaFQyV W8rRnpXTWJRRGZtSjBLQW9kc2VlR0xaaitqMzVqOUlKMkhJRFhIUUZZMWNuTW9YVUVoTjgvdEkvRkpqRnJiYVdFRkIzRDZwOFUzT2tkUmVaNHAyYi8yYURNZXVxR1ozSUtjc3R0R2lKMFhQQVhhZXYyQU8 o1M3RRQXVqQXRYdFlaekNTVjVBVXdXZS85T1VcXHUwMDNkXCJ9In0=
    FinishAuthorize:
      type: object
      required:
        - TerminalKey
        - Amount
        - OrderId
        - Success
        - ErrorCode
        - Status
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Amount:
          description: |
            Сумма в копейках
          type: number
          maxLength: 20
          example: 100000
        OrderId:
          description: |
            Идентификатор заказа в системе Мерчанта
          type: string
          maxLength: 36
          example: '21050'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Статус транзакции.
            Получает в ответе 1 из 4 статусов платежа:
              * CONFIRMED - при одностадийной оплате
              * AUTHORIZED - при двухстадийной оплате
              * 3DS_CHECKING - при необходимости прохождения проверки 3-DSecure
              * REJECTED - при неуспешном прохождении платежа
          type: string
          maxLength: 20
          example: NEW
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: string
          maxLength: 20
          example: '13660'
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          example: '0'
        RebillId:
          type: string
          description: Идентификатор рекуррентного платежа
          example: '21813157'
        CardId:
          description: Идентификатор карты в системе Тинькофф Кассы. Передается только для сохраненной карты
          type: string
    Without3DS:
      allOf:
        - $ref: '#/components/schemas/FinishAuthorize'
        - type: object
          properties:
            CardId:
              type: string
              description: |
                Идентификатор карты в системе Тинькофф Кассы. 
                Передается только для сохраненной карты.
    With3DS:
      allOf:
        - $ref: '#/components/schemas/FinishAuthorize'
        - type: object
          properties:
            MD:
              type: string
              description: |
                Уникальный идентификатор транзакции в системе Тинькофф Кассы
              example: ACQT-563587431
            PaReq:
              type: string
              description: |
                Шифрованная строка, содержащая результаты 3-D Secure аутентификации (возвращается в ответе от ACS)
              example: |
                "eJxVUl1TwjAQ/CtM30s+KLTDHGHQwsiogFh09C2kp1RpC2nLh7/eBAtqnnYvN3ubvUD/kK4bO9RFkmc9hzWp08BM5XGSvfecRTRyA6cvIFppxP
                ARVaVRwD0WhXzHRhL3HMUU73itwKVtyl1Pcs8Nli3pymUQK+z2Sww6joDZYI5bAfUgYeY0OZAzNYparWRWCpBqezWeiDZnLe3BqSmkqMeh4PRy2p
                02BfJThkymKCIsSiAnCCqvslIfhXEG5Eyg0muxKstN0SVkv983yyT7zN/emroiQOwlkF8js8qiwogdklg8rEfT5WK0jj6G7D4cepNo8TWNBmwSDXtAbAfEskTjkPk0
                oF6DeV3a6jLj8VQHmVoXglFTqTFs7IjBn4u/BTBZa7OK8yPODPCwyTM0HSbACwby6/f6xsaoSpNMMN89+uHdV/iUPz2nyat/uxrPXz5nuX/c2nBPTVYxMflwzthJ0hIgVobUeyP1yg469xW+AedOuuM="
            ACSUrl:
              type: string
              format: uri
              description: |
                Если в ответе метода **FinishAuthorize** возвращается статус **3DS_CHECKING**, 
                Мерчанту необходимо сформировать запрос на URL ACS банка, 
                выпустившего карту (в ответе параметр `ACSUrl`) и вместе с этим перенаправить клиента на эту же страницу ACSUrl для прохождения 3DS
              example: https://secure.tcsbank.ru/acs/auth/start.do
    With3DSv2APP:
      allOf:
        - $ref: '#/components/schemas/FinishAuthorize'
        - type: object
        - required:
            - TdsServerTransId
            - AcsTransId
            - AcsReferenceNumber
            - SdkTransID
          properties:
            TdsServerTransId:
              type: string
              description: |
                Уникальный идентификатор транзакции,генерируемый 3DS-Server, обязательный параметр для 3DS второй версии
              example: d93f7c66-3ecf-4d10-ba62-46046e7b7596
            AcsTransId:
              type: string
              description: |
                Идентификатор транзакции,присвоенный ACS, полученный в ответе на FinishAuthorize
              example: aceca6af-56ee-43f0-80ef-ea8d30d5c5b0
            AcsInterface:
              type: string
              format: uri
              description: |
                `Обязательное поле, если Transaction Status = C`<br>
                Тип пользовательского интерфейса ACS.
                <br> Возможные значения:
                  - 01 - Native UI
                  - 02 - HTML UI
              example: '02'
            AcsUiTemplate:
              type: string
              format: uri
              description: |
                `Обязательное поле, если Transaction Status = C`<br>
                Формат шаблона пользовательского интерфейса ACS.
                <br> Возможные значения: 
                  - 01 - Text
                  - 02 - Single Select
                  - 03 - Multi Select
                  - 04 - OOB
                  - 05 - HTML Other (valid only for HTML UI)
              example: '03'
            AcsSignedContent:
              type: string
              format: uri
              description: |
                `Обязательное поле, если Transaction Status = C`<br>
                JWS object (представленный как string), созданный ACS для ARes.
                <br> Содержит:
                  - ACS URL (3DS SDK должен отправить Challenge Request на этот URL)
                  - ACS Ephemeral Public Key (QT)
                  - SDK Ephemeral Public Key (QC)
              example: eyJ4NWMiOlsiTUlJRGtUQ0NBbm1nQXdJQkFnSVVRU1VEV05VZEFicWozS1Uya0M0VHpaSEpVVHd3RFFZSktvWklodmNOQVFFTEJRQXdXREVMTUFrR0ExVUVCaE1DVWxVeER6QU5CZ05WQkFnTUJrMXZjMk52ZHpFUE1BMEdBMVVFQnd3R1RXOXpZMjkzTVJJ d0VBWURWUVFLREFsVGIyMWxJR0poYm1zeEV6QVJCZ05WQkFNTUNtUnpMbTF2WTJzdWNuVXdIaGNOTWpBd056RTRNVFExT1RNM1doY05NakV3TnpFNE1UUTFPVE0zV2pCWU1Rc3dDUVlEVlFRR0V3SlNWVEVQTUEwR0ExVUVDQXdHVFc5elkyOTNNUTh3RF FZRFZRUUhEQVpOYjNOamIzY3hFakFRQmdOVkJBb01DVk52YldVZ1ltRnVhekVUTUJFR0ExVUVBd3dLWkhNdWJXOWpheTV5ZFRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUhNdXB1Wlg3VUFWR3Z5dm9uZ1o4U3BJcisrRD RnMjBRaFwvZ0NGb3JUN1pDUkRaVWhRamlDSzdXSWpiVHRKQUFKVG1yelhcLzlMSGJIdHpIcFFvRFVTNXZPTnRqVWFaVGVQUE91SklMRWl6NDBBVjJCUVZRd0xnRzBjbm9oK21Qa0dNMEZ4VmJFcHFEVHk3SHB0dFAwdm96cGxHNjdFWk1HTXdKSUpESmlDYUdG OGZ0aTlYR3M4MXB3NUhWZElmOHNpQnFaWW94cGt0QWJ1dnpBTFJEUnp3dFBhclFHOTZyQStPM0dJaE53VDhZXC9pallwS0hWNkJCWDBKNmxZdFdoaVY5blhBVktYNTNlVTJ4M1E2Njh4U3BLa2dwSVh1N2xiNUN2M2dDTlIrelVqK0lTODNZYjJhUlR2WkF6MFI1 V3dBNW5Zb2J6V3Vta1wvdE5iV1FYdzBWTUNBd0VBQWFOVE1GRXdIUVlEVlIwT0JCWUVGRmVWN0dzR0tCSzhUTDljaVk4UFF2N0RhY290TUI4R0ExVWRJd1FZTUJhQUZGZVY3R3NHS0JLOFRMOWNpWThQUXY3RGFjb3RNQThHQTFVZEV3RUJcL3dRRk1BT UJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUZqVGppUkxKOFpaWld5dXFLNTZHVkR6dnJiXC9uRlVDTHVjVXZEV2toK09lRWkxWUFPOUJZV3RFVTVzdmRNNTlsOWVTMGtjbGxrRzVDTklcL1U4S2dKSnUzV0tEVXp5cU80eVRNU3g3RWZDXC9qVE1oT2d2Y UJubktWK2hvV3FQZTlKNHZVYzZ2R0wzWE1cL0FNeWpoVDlBRko1ZjZBaVdZMk5QYkxHczQ2N0ZPY2Vwb1RJMkdseHBtcWdaMFVGKzlsblNZbDU0WEg2dGNZYUszWjcxS2NES0I0QkUySWVmV1Y3MUM3anBVdjFFSlFsNTY4XC8xaGpsZktXUExWcE5NTzVlTlNMR 1ZKd1VmdFA0V0tKU2Y2VmdtbG5XOU1yVStiK3hvZW44MFF1dUxrSWs1ZXBIM2l1ZDV4a1IxcVVXQU1aTUZTQW4yUHJDdjQrZFFMRDd2OG83d3BrPSJdLCJhbGciOiJQUzI1NiJ9.eyJhY3NFcGhlbVB1YktleSI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IlRoRj NJY3BIMVVLanliQW5lNWhHcy1BNnpyYXo2aUxiYVk0WmVEOU1oSU0iLCJ5Ijoid0VuVXNvNlRLZDlfbjZSc2NjUXRCeFc2Q1gzLXFSTGk0UWJBU3pNbm4tTSJ9LCJzZGtFcGhlbVB1YktleSI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6Ikp6R2tGM2w3WGxnclJ6NU 1PTl9ncDg3WUxfd0NkVVJpVUlxOXJmNnVyR2MiLCJ5IjoiTnI4UmllTE9vVzJXUkhiX2RFazFmdHRoWEZXTHdYaWZFUzNZZkFnMkhvWSJ9LCJhY3NVUkwiOiJodHRwczovL2VhY3EtZHMtbW9jay1zZXJ2aWNlLXRlc3QudGNzYmFuay5ydS9jaGFsbGVuZ2UvZDkzZjdj NjYtM2VjZi00ZDEwLWJhNjItNDYwNDZlN2I3NTk2In0.hQLVTT5YMAY8TjISRdYX2IT04zH8Z8DgoB4kIAyVfkuJ0X6AGIKXSVcIVSNgC-A_SEkCZRqAyUeu0ZJtpoIVyOf1mumBGEK-uC6yVQlX5WSPidQUj4nuBvpYsfdrGPeoHWvNsrBpMMxvvW4559jtbAUY00NcW3rwDShAi4gVKgJcssMPAM1zOOR5vi0_ClUsCW1k9a201Hv6cYcEBuO2JQ8NPLampEkZ55nOmwcPPTEziXeZsq9VjROXNfBewbA4wLuQmh8aSrcOcwFtJo0CPpdrsKiY77KPT0c8XMmZZK_FiAxzrWocfHraqC7cRJNQ5glEBakXvSfrwGg_xXA
            AcsReferenceNumber:
              type: string
              format: uri
              description: Уникальный идентификатор, назначенный EMVCo
              example: '12345'
            SdkTransID:
              type: string
              format: uri
              description: |
                Уникальный идентификатор транзакции,назначенный 3DS SDK для идентификации одной транзакции,полученный в ответе на FinishAuthorize
              example: d5a44dfe-673b-4666-82f9-96346107e424
    With3DSv2BRW:
      allOf:
        - $ref: '#/components/schemas/FinishAuthorize'
        - type: object
        - required:
            - TdsServerTransId
            - AcsTransId
          properties:
            TdsServerTransId:
              type: string
              description: |
                Уникальный идентификатор транзакции,генерируемый 3DS-Server, обязательный параметр для 3DS второй версии
              example: d7171a06-7159-4bdd-891a-a560fe9938d2
            AcsTransId:
              type: string
              description: |
                Идентификатор транзакции,присвоенный ACS, полученный в ответе на FinishAuthorize
              example: e176d5d3-2f19-40f5-8234-46d3464e0b08
            ACSUrl:
              type: string
              format: uri
              description: |
                Если в ответе метода **FinishAuthorize** возвращается статус **3DS_CHECKING**, 
                Мерчанту необходимо сформировать запрос на URL ACS банка, 
                выпустившего карту (в ответе параметр `ACSUrl`) и вместе с этим перенаправить клиента на эту же страницу ACSUrl для прохождения 3DS
              example: https://acs.vendorcert.mirconnect.ru/mdpayacs/creq
    Confirm:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: Идентификатор платежа в системе Тинькофф Кассы
          maxLength: 20
          example: 2304882
        Token:
          type: string
          description: Подпись запроса (хэш SHA-256)
          example: c0ad1dfc4e94ed44715c5ed0e84f8ec439695b9ac219a7a19555a075a3c3ed24
        IP:
          type: string
          description: IP-адрес клиента
          example: 192.168.255.255
        Amount:
          type: number
          description: Сумма в копейках (если не передан, используется `Amount`, переданный в методе **Init**)
          example: 19200
        Receipt:
          type: object
          description: JSON-объект с данными чека. Обязателен, если подключена онлайн-касса.
          oneOf:
            - $ref: '#/components/schemas/Receipt_FFD_12'
            - $ref: '#/components/schemas/Receipt_FFD_105'
        Shops:
          type: array
          description: Обязательный для маркетплейсов. JSON-объект с данными Маркетплейса.
          items:
            $ref: '#/components/schemas/Shops'
        Route:
          type: string
          description: |
            Способ платежа. 
            * При проведении платежа в «Рассрочку» необходимо передавать значение TCB
            * При проведении платежа «Долями» необходимо передавать значение BNPL
          enum:
            - TCB
            - BNPL
          example: BNPL
        Source:
          type: string
          description: |
            Источник платежа. 
            * При проведении платежа в «Рассрочку» необходимо передавать значение installment
            * При проведении платежа «Долями» необходимо передавать значение BNPL
          enum:
            - installment
            - BNPL
          example: BNPL
    Items_Params:
      type: object
      description: Информация по способу оплаты/деталям для платежей в рассрочку
      properties:
        Route:
          type: string
          description: |
            Способ платежа
          enum:
            - ACQ
            - BNPL
            - TCB
            - SBER
          example: ТСВ
        Source:
          type: string
          description: |
            Источник платежа
          enum:
            - BNPL
            - cards
            - Installment
            - MirPay
            - qrsbp
            - SberPay
            - TinkoffPay
            - YandexPay
          example: Installment
        CreditAmount:
          type: number
          description: |
            Сумма выданного кредита в копейках (возвращается только в случае платежей в рассрочку)
          example: 100000
    Confirm-2:
      type: object
      required:
        - TerminalKey
        - OrderId
        - Success
        - Status
        - PaymentId
        - ErrorCode
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        OrderId:
          type: string
          description: Идентификатор заказа в системе Мерчанта
          example: '21057'
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        Status:
          type: string
          description: Статус транзакции
          example: CONFIRMED
          enum:
            - NEW
            - AUTHORIZING
            - AUTHORIZED
            - AUTH_FAIL
            - CANCELED
            - CHECKING
            - CHECKED
            - COMPLETING
            - COMPLETED
            - CONFIRMING
            - CONFIRMED
            - DEADLINE_EXPIRED
            - FORM_SHOWED
            - PARTIAL_REFUNDED
            - PREAUTHORIZING
            - PROCESSING
            - 3DS_CHECKING
            - 3DS_CHECKED
            - REVERSING
            - REVERSED
            - REFUNDING
            - REFUNDED
            - REJECTED
            - UNKNOWN
        PaymentId:
          type: string
          description: Уникальный идентификатор транзакции в системе Тинькофф Кассы
          example: '2304882'
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: '0'
        Message:
          type: string
          description: Краткое описание ошибки
          example: OK
          maxLength: 255
        Details:
          type: string
          description: Подробное описание ошибки
          example: None
        Params:
          description: |
            Детали для платежей в рассрочку
          type: array
          items:
            $ref: '#/components/schemas/Items_Params'
    ShopsCancel:
      type: object
      description: JSON-объект с данными Маркетплейса. Обязательный для маркетплейсов.
      required:
        - ShopCode
        - Amount
      properties:
        ShopCode:
          description: |
            Код магазина
          type: string
          example: '700456'
        Amount:
          description: |
            Cумма в копейках, которая относится к
            указанному `ShopCode`
          type: number
          example: 10000
        Name:
          description: |
            Наименование товара
          type: string
          maxLength: 128
          example: Товар
    Cancel:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: Идентификатор платежа в системе Тинькофф Кассы
          example: 2304882
        Token:
          type: string
          description: Подпись запроса (хэш `SHA-256`)
          example: c0ad1dfc4e94ed44715c5ed0e84f8ec439695b9ac219a7a19555a075a3c3ed24
        IP:
          type: string
          description: IP-адрес клиента
          example: 192.168.255.255
        Amount:
          type: number
          description: |
            Сумма в копейках (если не передан, используется `Amount`, переданный в методе **Init**).
            В случае отмены статуса **NEW** поле `Amount`, даже если оно заполнено, игнорируется. Отмена производится на полную сумму
          example: 19200
        Receipt:
          type: object
          description: JSON-объект с данными чека. Обязателен, если подключена онлайн-касса.<br> Данные переданные в данном запросе могут отличаться от переданных в **Init**, если отмена производится только по части товаров. <br> В случае полной отмены структура чека не передается. В случае частичной отмены необходимо передавать те товары, которые нужно отменить.
          oneOf:
            - $ref: '#/components/schemas/Receipt_FFD_12'
            - $ref: '#/components/schemas/Receipt_FFD_105'
        Shops:
          type: array
          description: Обязательный для маркетплейсов. JSON обьект с данными Маркетплейса.
          items:
            $ref: '#/components/schemas/ShopsCancel'
        QrMemberId:
          type: string
          description: Код банка в классификации СБП, в который необходимо выполнить возврат. См. параметр `MemberId` в методе [**QrMembersList**](#tag/Oplata-cherez-SBP/paths/~1QrMembersList/post).
          example: '77892'
        Route:
          type: string
          description: |
            Способ платежа. 
            * При проведении платежа в «Рассрочку» необходимо передавать значение TCB
            * При проведении платежа «Долями» необходимо передавать значение BNPL
          enum:
            - TCB
            - BNPL
          example: BNPL
        Source:
          type: string
          description: |
            Источник платежа. 
            * При проведении платежа в «Рассрочку» необходимо передавать значение installment
            * При проведении платежа «Долями» необходимо передавать значение BNPL
          enum:
            - installment
            - BNPL
          example: BNPL
        ExternalRequestId:
          type: string
          maxLength: 256
          description: |
            Идентификатор операции на стороне мерчанта. Параметр не работает для операций по СБП
            * Если поле не передано или пустое (""), то запрос будет обработан без проверки ранее созданных возвратов
            * Если поле заполнено, то перед проведением возврата проверяется запрос на отмену с таким ExternalRequestId
            * Если такой запрос уже есть, то в ответе вернется текущее состояние платежной операции 
            * Если такого запроса нет, то произойдет отмена платежа
    Cancel-2:
      type: object
      required:
        - TerminalKey
        - OrderId
        - Success
        - Status
        - PaymentId
        - ErrorCode
        - OriginalAmount
        - NewAmount
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        OrderId:
          type: string
          description: Идентификатор заказа в системе Мерчанта
          example: '21057'
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        Status:
          type: string
          description: Статус транзакции
          example: REVERSED
        OriginalAmount:
          type: number
          description: Сумма в копейках до операции отмены
          example: 13000
        NewAmount:
          type: number
          description: Сумма в копейках после операции отмены
          example: 5000
        PaymentId:
          type: string
          description: Уникальный идентификатор транзакции в системе Тинькофф Кассы
          example: '2304882'
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: '0'
        Message:
          type: string
          description: Краткое описание ошибки
          example: OK
          maxLength: 255
        Details:
          type: string
          description: Подробное описание ошибки
          example: None
        ExternalRequestId:
          type: string
          description: Идентификатор операции на стороне Мерчанта
          example: '756478567845678436'
    Charge_FULL:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - RebillId
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        PaymentId:
          type: number
          maxLength: 20
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
          example: 700001702044
        RebillId:
          description: |
            Идентификатор рекуррентного платежа. Значение зависимо от атрибутов:
              * OperationInitiatorType в методе /init
              * Recurrent в методе /Init
            Детальная информация представлена в описании [Рекуррентный платёж](#tag/Rekurrentnyj-platyozh) и [Инициализация платежа](#tag/Standartnyj-platyozh/paths/~1Init/post).
          type: string
          example: '145919'
        Token:
          type: string
          description: |
            Подпись запроса
          example: f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
        IP:
          type: string
          description: |
            IP-адрес клиента
          example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334
        SendEmail:
          type: boolean
          description: |
            * true – если клиент хочет получать
            уведомления на почту
        InfoEmail:
          type: string
          format: email
          description: |
            Адрес почты клиента
            * Обязателен при передаче **SendEmail**
          example: customer@test.com
    Charge_SDK:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - RebillId
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
          maxLength: 20
          example: 700001702044
        RebillId:
          description: |
            Идентификатор рекуррентного платежа
          type: string
          example: '145919'
        Token:
          type: string
          description: |
            Подпись запроса
          example: f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
    GetState_FULL:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        Token:
          description: |
            Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
        IP:
          description: |
            IP-адрес клиента
          type: string
          example: 192.168.0.52
    GetState_SDK:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        Token:
          description: |
            Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
    AddCustomer:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          type: string
          description: Идентификатор клиента в системе Мерчанта
          maxLength: 36
          example: 4387c647-a693-449d-bc35-91faecfc50de
        Token:
          type: string
          description: Подпись запроса
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
        IP:
          type: string
          description: IP-адрес запроса
          maxLength: 40
          example: 10.100.10.10
        Email:
          type: string
          description: Email клиента
          format: email
          maxLength: 64
          example: username@test.ru
        Phone:
          description: |
            Телефон клиента в формате +{Ц}
          type: string
          maxLength: 64
          example: '+79031234567'
    AddCustomerResponse:
      type: object
      required:
        - Success
        - ErrorCode
        - TerminalKey
        - CustomerKey
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Продавцу Тинькофф Кассой
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          type: string
          description: Идентификатор клиента в системе Мерчанта
          maxLength: 36
          example: 05d65baa-9718-445e-8212-76fa0dd4c1d2
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          maxLength: 255
          example: Терминал не найден
    GetOrRemoveCustomer:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          type: string
          description: Идентификатор клиента в системе Мерчанта
          maxLength: 36
        Token:
          type: string
          description: Подпись запроса
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
        IP:
          type: string
          description: IP-адрес запроса
          maxLength: 40
    GetCustomerResponse:
      type: object
      required:
        - Success
        - ErrorCode
        - TerminalKey
        - CustomerKey
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          type: string
          description: Идентификатор клиента в системе Мерчанта
          maxLength: 36
          example: 4264aa7b-08ab-4429-ab5a-2a171d841ced
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверный статус клиента
        Details:
          description: |
            Подробное описание ошибки
          type: string
          maxLength: 255
          example: Клиент не найден.
        Email:
          type: string
          description: Email клиента
          format: email
          maxLength: 64
          example: a@test.ru
        Phone:
          description: |
            Телефон клиента в формате +{Ц}
          type: string
          maxLength: 64
          example: '+79031234567'
    RemoveCustomerResponse:
      type: object
      required:
        - Success
        - ErrorCode
        - TerminalKey
        - CustomerKey
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          type: string
          description: Идентификатор клиента в системе Мерчанта
          maxLength: 36
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
    AddCard_FULL:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          example: '1111133333'
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          maxLength: 36
          example: testCustomer1234
        Token:
          description: |
            Подпись запроса
          type: string
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
        CheckType:
          description: |
            Если CheckType не передается, автоматически проставляется значение NO.
             Возможные значения:
             * NO – сохранить карту без проверок. `RebillID` для рекуррентных платежей не возвращается;
             * HOLD – при сохранении сделать списание на 0 руб. `RebillID` возвращается для терминалов без
             поддержки 3DS.
             * 3DS – при сохранении карты выполнить проверку
             3DS и выполнить списание на 0 р. В этом случае
             `RebillID` будет только для 3DS карт. Карты, не
             поддерживающие 3DS, привязаны не будут.
             * 3DSHOLD – при привязке карты выполнить
             проверку, поддерживает карта 3DS или нет. Если карта не поддерживает 3DS, то выполняется
             списание на 0 руб.
          type: string
          enum:
            - 'NO'
            - HOLD
            - 3DS
            - 3DSHOLD
        IP:
          type: string
          maxLength: 40
          description: |
            IP-адрес запроса
          example: 10.100.10.10
        ResidentState:
          description: |
            Признак резидентности добавляемой карты:
            Возможные значения:
            * true - Карта РФ;
            * false - Карта не РФ;
            * null - Не специфицируется (универсальная карта)
          type: boolean
    AddCard_SDK:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          example: '1241421414'
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          maxLength: 36
          example: testCustomer1234
        Token:
          description: |
            Подпись запроса
          type: string
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
        CheckType:
          description: |
            Возможные значения:
            * NO – сохранить карту без проверок. Rebill ID для
            рекуррентных платежей не возвращается;
            * HOLD – при сохранении сделать списание на 0
            руб. RebillID возвращается для терминалов без
            поддержки 3DS.
            * 3DS – при сохранении карты выполнить проверку
            3DS и выполнить списание на 0 р. В этом случае
            RebillID будет только для 3DS карт. Карты, не
            поддерживающие 3DS, привязаны не будут.
            * 3DSHOLD – при привязке карты выполнить
            проверку, поддерживает карта 3DS или нет. Если карта не поддерживает 3DS, то выполняется
            списание на 0р
          type: string
          enum:
            - 'NO'
            - HOLD
            - 3DS
            - 3DSHOLD
    AddCardResponse_FULL:
      type: object
      required:
        - PaymentId
        - TerminalKey
        - CustomerKey
        - RequestKey
        - Success
        - ErrorCode
        - PaymentURL
      properties:
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 6155312072
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          example: '906540'
          maxLength: 36
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          example: ed989549-d3be-4758-95c7-22647e03f9ec
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          example: Терминал не найден
        PaymentURL:
          description: |
            UUID, используется для работы без PCI DSS
          type: string
          format: uri
          maxLength: 100
          example: 82a31a62-6067-4ad8-b379-04bf13e37642d
    AddCardResponse_SDK:
      type: object
      required:
        - PaymentId
        - TerminalKey
        - CustomerKey
        - RequestKey
        - Success
        - ErrorCode
      properties:
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 6155312073
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          example: '906540'
          maxLength: 36
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          example: ed989549-d3be-4758-95c7-22647e03f9ec
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          maxLength: 255
          example: Терминал не найден
    AttachCard:
      type: object
      required:
        - TerminalKey
        - RequestKey
        - CardData
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          format: uuid
          example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
        CardData:
          description: |
            Зашифрованные данные карты в формате:
            PAN=4300000000000777;ExpDate=0519;CardHolder=IVAN PETROV;CVV=111
          type: string
          example: U5jDbwqOVx+2vDApxe/rfACMt+rfWXzPdJ8ZXxNFVIiZaLZrOW72bGe9cKZdIDnekW0nqm88YxRD↵jyfa5Ru0kY5cQV alU+juS1u1zpamSDtaGFeb8sRZfhj72yGw+io+qHGSBeorcfgoKStyKGuBPWfG↵d0PLHuyBE6QgZyIAM1XfdmNlV0UAxOnkTGDsskL pIt3AWhw2e8KOar0vwbgCTDjznDB1/DLgOW01↵Aj/bXyLJoG1BkOrPBm9JURs+f+uyFae0hkRicNKNgXoN5pJTSQxOEauOi6ylsVJ B3WK5MNYXtj6x↵GlxcmTk/LD9kvHcjTeojcAlDzRZ87GdWeY8wgg==
        DATA:
          description: |
            В объекте передаются дополнительные параметры в формате `Ключ`:`Значение`  с разделителем `|`,
            например, меняем на JSON объект, содержащий дополнительные параметры в виде `Ключ`:`Значение`.

            Если ключи или значения содержат в себе специальные символы, то получившееся значение должно быть закодировано
            функцией urlencode. Максимальная длина для каждого
            передаваемого параметра:
            * Ключ – 20 знаков,
            * Значение – 100 знаков. 

            Максимальное количество пар «ключ-значение» не может превышать 20.

            >**ВАЖНО!** Для 3DS второй версии в DATA необходимо передавать параметры, описанные в объекте
            3DSv2. В HttpHeaders запроса обязательны заголовки: `User-Agent` и `Accept`. 
          oneOf:
            - type: object
              additionalProperties:
                type: string
            - $ref: '#/components/schemas/3DSv2'
        Token:
          description: |
            Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
    AttachCardResponse:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - RequestKey
        - CardId
        - Success
        - ErrorCode
      properties:
        TerminalKey:
          description: |
            Платежный ключ, выдается Мерчанту при заведении
            терминала
          type: string
          maxLength: 20
          example: testRegress
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          example: testCustomerKey
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          format: uuid
          example: 8de92934-26c9-474c-a4ce-424f2021d24d
        CardId:
          description: |
            Идентификатор карты в системе Тинькофф Кассы
          type: string
          example: '5555'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Status:
          description: |
            Статус привязки карты:
            * NEW - новая сессия привязки карты;
            * FORM_SHOWED - показ формы привязки карты;
            * 3DS_CHECKING - отправка клиента на проверку 3DS;
            * 3DS_CHECKED - клиент успешно прошел проверку 3DS;
            * AUTHORIZING - отправка платежа на 0 руб;
            * AUTHORIZED - платеж на 0 руб прошел успешно;
            * COMPLETED - карта успешно привязана;
            * REJECTED - привязать карту не удалось.
          enum:
            - NEW
            - FORM_SHOWED
            - 3DS_CHECKING
            - 3DS_CHECKED
            - AUTHORIZING
            - AUTHORIZED
            - COMPLETED
            - REJECTED
          type: string
          maxLength: 20
        RebillId:
          description: |
            Идентификатор рекуррентного платежа
          type: string
          example: '130799909'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
        ACSUrl:
          description: |
            Адрес сервера управления доступом, для проверки 3DS
            (возвращается в ответе на статус 3DS_CHECKING)
          type: string
          format: uri
          example: https://secure.tcsbank.ru/acs/auth/start.do
        MD:
          description: |
            Уникальный идентификатор транзакции в системе
            Тинькофф Кассы (возвращается в ответе на статус 3DS_CHECKING)
          type: string
          example: ACQT-563587431
        PaReq:
          description: |
            Результат аутентификации 3-D Secure (возвращается
            в ответе на статус 3DS_CHECKING)
          type: string
          example: eJxVUl1TwjAQ/CtM30s+KLTDHGHQwsiogFh09C2kp1RpC2nLh7/eBAtqnnYvN3ubvUD/kK4bO9RFkmc9hzWp08BM5XGSvfecRT RyA6cvIFppxPARVaVRwD0WhXzHRhL3HMUU73itwKVtyl1Pcs8Nli3pymUQK+z2Sww6joDZYI5bAfUgYeY0OZAzNYparWRWCpBqe zWeiDZnLe3BqSmkqMeh4PRy2p02BfJThkymKCIsSiAnCCqvslIfhXEG5Eyg0muxKstN0SVkv983yyT7zN/emroiQOwlkF8js8qiwogdk lg8rEfT5WK0jj6G7D4cepNo8TWNBmwSDXtAbAfEskTjkPk0oF6DeV3a6jLj8VQHmVoXglFTqTFs7IjBn4u/BTBZa7OK8yPODPCwyT M0HSbACwby6/f6xsaoSpNMMN89+uHdV/iUPz2nyat/uxrPXz5nuX/c2nBPTVYxMflwzthJ0hIgVobUeyP1yg469xW+AedOuuM=
    GetAddCardState:
      type: object
      required:
        - TerminalKey
        - RequestKey
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          maxLength: 20
          example: testRegressBank
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
        Token:
          description: |
            Подпись запроса
          type: string
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
    GetAddCardStateResponse:
      type: object
      required:
        - Success
        - TerminalKey
        - RequestKey
        - Status
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
        Status:
          description: |
            Статус привязки карты:
            * NEW - новая сессия привязки карты;
            * FORM_SHOWED - показ формы привязки карты;
            * 3DS_CHECKING - отправка клиента на проверку 3DS;
            * 3DS_CHECKED - клиент успешно прошел проверку 3DS;
            * AUTHORIZING - отправка платежа на 0 руб;
            * AUTHORIZED - платеж на 0 руб прошел успешно;
            * COMPLETED - карта успешно привязана;
            * REJECTED - привязать карту не удалось.
          enum:
            - NEW
            - FORM_SHOWED
            - 3DS_CHECKING
            - 3DS_CHECKED
            - AUTHORIZING
            - AUTHORIZED
            - COMPLETED
            - REJECTED
          type: string
          maxLength: 20
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        CardId:
          description: |
            Идентификатор карты в системе Тинькофф Кассы
          type: string
          maxLength: 40
          example: '156516516'
        RebillId:
          description: |
            Идентификатор рекуррентного платежа
          type: string
          example: '134249124'
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          example: Данный RequestKey не найден.
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          maxLength: 36
          example: testCustomer1234
    GetCardList_FULL:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          example: testRegressBank
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          example: testCustomer1234
        SavedCard:
          description: |
            Признак сохранения карты для оплаты в 1 клик
          type: boolean
          example: 'true'
        Token:
          description: |
            Подпись запроса
          type: string
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
        IP:
          description: |
            IP-адрес запроса
          type: string
          example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334
    GetCardList_SDK:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          example: testRegressBank
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          example: testCustomer1234
        SavedCard:
          description: |
            Признак сохранения карты для оплаты в 1 клик
          type: boolean
          example: 'true'
        Token:
          description: |
            Подпись запроса
          type: string
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
    RemoveCard:
      type: object
      required:
        - TerminalKey
        - CustomerKey
        - CardId
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          maxLength: 20
          example: testRegressBank
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          maxLength: 36
          example: testCustomer1234
        CardId:
          description: |
            Идентификатор карты в системе Тинькофф Кассы
          type: string
          maxLength: 40
          example: '156516516'
        Token:
          description: |
            Подпись запроса
          type: string
          example: 30797e66108934dfa3d841b856fdad227c6b9c46d6a39296e02dc800d86d181e
        IP:
          description: |
            IP-адрес запроса
          type: string
          maxLength: 40
          example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334
    RemoveCardResponse:
      type: object
      required:
        - Success
        - ErrorCode
        - TerminalKey
        - CardId
        - CustomerKey
        - CardType
        - Status
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Status:
          description: |
            Статус карты: D – удалена
          type: string
          maxLength: 100
          example: D
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          maxLength: 36
          example: testCustomer1234
        CardId:
          description: |
            Идентификатор карты в системе Тинькофф Кассы
          type: string
          maxLength: 40
          example: '156516516'
        CardType:
          description: |
            Тип карты:
            * карта списания (0);
            * карта пополнения(1);
            * карта пополнения и списания (2).
          type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 15
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
          example: Не удалось удалить карту клиента, для данного клиента такая карта не существует.
    GetQr:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          type: string
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: |
            Уникальный идентификатор транзакции в системе
            Тинькофф Кассы
          example: 10063
        DataType:
          type: string
          description: |
            Тип возвращаемых данных:
            * PAYLOAD – В ответе возвращается только Payload
            (по-умолчанию)
            * IMAGE – В ответе возвращается SVG изображение QR
          default: PAYLOAD
          enum:
            - PAYLOAD
            - IMAGE
          example: PAYLOAD
        Token:
          type: string
          description: Подпись запроса
          example: 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
    QrResponse_FULL:
      type: object
      required:
        - TerminalKey
        - OrderId
        - Success
        - Data
        - PaymentId
        - ErrorCode
        - RequestKey
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        OrderId:
          description: |
            Номер заказа в системе Мерчанта
          type: string
          example: '21057'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Data:
          type: string
          description: |
            В зависимости от параметра DataType в запросе это:
              * Payload - информация, которая должна быть закодирована в QR
              * SVG изображение QR в котором уже закодирован Payload
          example: https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B
        PaymentId:
          description: |
            Уникальный идентификатор транзакции в системе Тинькофф Кассы
          type: number
          example: '10063'
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
        RequestKey:
          description: |
            Идентификатор запроса на привязку счета. Передается в случае привязки и одновременной оплаты по CБП
          type: string
    QrResponse_SDK:
      type: object
      required:
        - TerminalKey
        - OrderId
        - Success
        - Data
        - PaymentId
        - ErrorCode
        - RequestKey
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        OrderId:
          description: |
            Номер заказа в системе Мерчанта
          type: string
          example: '21057'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Data:
          type: string
          description: |
            В зависимости от параметра DataType в запросе это:
              * Payload - информация, которая должна быть закодирована в QR
              * SVG изображение QR в котором уже закодирован Payload
          example: https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B
        PaymentId:
          description: |
            Уникальный идентификатор транзакции в системе Тинькофф Кассы
          type: number
          example: '10063'
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
        RequestKey:
          description: |
            Идентификатор запроса на привязку счета. Передается в случае привязки и одновременной оплаты по CБП
          type: string
    EventData:
      type: object
      properties:
        SessionId:
          type: string
          description: Идентификатор сессии Tinkoff Pay
        Type:
          type: string
          description: Тип события
        AccessToken:
          type: string
          description: Aвторизационный токен пользователя
        AccountId:
          type: string
          description: Идентификатор счета оплаты
        EventSessionId:
          type: string
          description: Идентификатор события
    TinkoffPayEvent:
      type: object
      required:
        - TerminalKey
        - EventData
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой при заведении терминала
        EventData:
          type: string
          description: Данные события. Объект EventData собирается в виде списка «ключ=значение» (разделитель «;»), зашифровывается открытым ключом (X509 RSA 2048), получившееся бинарное значение кодируется в Base64. Открытый ключ генерируется Банком и выдается при регистрации терминала. Все поля обязательны.
          $ref: '#/components/schemas/EventData'
        PaymentId:
          type: number
          description: Идентификатор платежа
        Token:
          type: string
          description: Подпись запроса
    Member:
      type: object
      required:
        - MemberId
        - MemberName
        - IsPayee
      properties:
        MemberId:
          type: string
          description: |
            Идентификатор участника
          example: '1000000'
        MemberName:
          type: string
          description: |
            Наименование участника
          example: АО Тинькофф Банк
        IsPayee:
          type: boolean
          description: |
            * true - если данный участник был получателем
            указанного платежа, 
            * false - в противном случае
          example: true
    AddAccountQr:
      type: object
      required:
        - TerminalKey
        - Description
        - Token
      properties:
        TerminalKey:
          type: string
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        Description:
          type: string
          description: Подробное описание деталей заказа
        DataType:
          type: string
          description: |
            Тип возвращаемых данных:
            * PAYLOAD – В ответе возвращается только Payload
            (по-умолчанию)
            * IMAGE – В ответе возвращается SVG изображение QR
          default: PAYLOAD
          enum:
            - PAYLOAD
            - IMAGE
          example: PAYLOAD
        Data:
          type: object
          description: |
            JSON объект, содержащий
            дополнительные параметры в виде `ключ`:`значение`. Данные параметры будут
            переданы на страницу оплаты (в случае ее
            кастомизации). Максимальная длина для
            каждого передаваемого параметра:
              * Ключ - 20 знаков;
              * Значение - 100 знаков.
            Максимальное количество пар `ключ`:`значение` не может превышать 20
          additionalProperties:
            type: string
        RedirectDueDate:
          type: string
          format: datatime
          description: |
            Cрок жизни ссылки или динамического QR-кода СБП (если выбран данный способ
            оплаты). В случае, если параметр `RedirectDueDate` не был передан, проверяется настроечный параметр
            платежного терминала `REDIRECT_TIMEOUT`, который может содержать значение срока жизни ссылки в 
            часах. Если его значение больше нуля, то оно будет установлено в качестве срока жизни ссылки или
            динамического QR-кода. Иначе, устанавливается значение «по умолчанию» - 1440 мин (1 сутки).

            Если текущая дата превышает дату, переданную в данном параметре, ссылка для оплаты или возможность
            платежа по QR-коду становятся недоступными и платёж выполнить нельзя.
            Максимальное значение: 90 дней от текущей даты.
            Минимальное значение: 1 минута от текущей даты.
            Формат даты: YYYY-MM-DDTHH24:MI:SS+GMT
          example: '2016-08-31T12:28:00+03:00'
        Token:
          type: string
          description: Подпись запроса
          example: 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
    AddAccountQrResponse:
      type: object
      required:
        - TerminalKey
        - Data
        - RequestKey
        - Success
        - ErrorCode
      properties:
        TerminalKey:
          type: string
          description: |
            Идентификатор терминала, выдается Мерчанту
            Тинькофф Кассой
          example: TinkoffBankTest
        Data:
          type: string
          description: |
            В зависимости от параметра DataType в запросе это:
              * Payload - информация, которая должна быть закодирована в QR
              * SVG изображение QR в котором уже закодирован Payload
          example: https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B
        RequestKey:
          description: |
            Идентификатор запроса на привязку счета
          type: string
          example: ed989549-d3be-4758-95c7-22647e03f9ec
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
    GetAddAccountQrState:
      type: object
      required:
        - RequestKey
        - TerminalKey
        - Token
      properties:
        RequestKey:
          description: |
            Идентификатор запроса на привязку счета
          type: string
          format: uuid
          example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Token:
          description: |
            Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
    GetAddAccountQrStateResponse:
      type: object
      required:
        - TerminalKey
        - RequestKey
        - Status
        - Success
        - ErrorCode
      properties:
        TerminalKey:
          description: |
            Платежный ключ, выдается Мерчанту при заведении
            терминала
          type: string
          maxLength: 20
          example: testRegress
        RequestKey:
          description: |
            Идентификатор запроса на привязку счета
          type: string
          format: uuid
          example: '211258'
        BankMemberId:
          description: |
            Идентификатор Банка клиента, который будет
            совершать оплату по привязаному счету -
            заполнен, если статус ACTIVE, INACTIVE
          type: string
          example: '100000000004'
        BankMemberName:
          description: |
            Наименование Банка-эмитента, заполнен если BankMemberId
            передан
          type: string
          example: Тинькофф Банк
        AccountToken:
          description: |
            Идентификатор привязки счета, назначаемый Банком Плательщика
          type: string
          example: a022254a5c3c46a7327c8a12cb5c8389
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Статус привязки карты:
            * NEW - получен запрос на привязку счета;
            * PROCESSING - запрос в обработке;
            * ACTIVE - привязка счета успешна;
            * INACTIVE - привязка счета неуспешна/деактивирована
          enum:
            - NEW
            - PROCESSING
            - ACTIVE
            - INACTIVE
          type: string
          maxLength: 20
          example: ACTIVE
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: OK
    GetAccountQrList:
      type: object
      required:
        - TerminalKey
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Token:
          description: |
            Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
    GetAccountQrListResponse:
      type: object
      required:
        - TerminalKey
        - RequestKey
        - Status
        - Success
        - ErrorCode
      properties:
        TerminalKey:
          description: |
            Платежный ключ, выдается Мерчанту при заведении
            терминала
          type: string
          maxLength: 20
          example: testRegress
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: OK
        AccountTokens:
          description: |
            Список привязанных счетов  покупателя по магазину
          type: object
          properties:
            RequestKey:
              description: |
                Идентификатор запроса на привязку карты
              type: string
              format: uuid
              example: 8de92934-26c9-474c-a4ce-424f2021d24d
            Status:
              description: |
                Статус привязки карты:
                * NEW - получен запрос на привязку счета;
                * PROCESSING - запрос в обработке;
                * ACTIVE - привязка счета успешна;
                * INACTIVE - привязка счета неуспешна/деактивирована
              enum:
                - NEW
                - PROCESSING
                - ACTIVE
                - INACTIVE
              type: string
              maxLength: 20
            AccountToken:
              description: |
                Идентификатор привязки счета, назначаемый Банком Плательщика
              type: string
              example: 0b67f2cae19b41809f85d5674de30a1a
            BankMemberId:
              description: |
                Идентификатор банка клиента (эмитент), который будет
                совершать оплату по привязаному счету -
                заполнен, если статус ACTIVE, INACTIVE
              type: string
              example: '5555'
            BankMemberName:
              description: |
                Наименование банка-эмитента, заполнен если BankMemberId
                передан
              type: string
              example: Тинькофф Банк
    ChargeQr:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - AccountToken
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. 
            Выдается Мерчанту Тинькофф Кассой при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: |
            Уникальный идентификатор транзакции в
            системе Тинькофф Кассы
          example: 700001702044
        AccountToken:
          type: string
          description: |
            Идентификатор привязки счета,
            назначаемый банком-эмитентом
          example: 70LSS7DN18SJQRS10006DNPKLJL24B05
        Token:
          type: string
          description: |
            Подпись запроса
          example: f5a3be479324a6d3a4d9efa0d02880b77d04a91758deddcbd9e752a6df97cab5
        IP:
          type: string
          description: |
            IP-адрес клиента
          example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334
        SendEmail:
          type: boolean
          description: |
            * true – если клиент хочет получать
            уведомления на почту
        InfoEmail:
          type: string
          format: email
          description: |
            Адрес почты клиента. Обязательно, если передан параметр SendEmail = true
          example: customer@test.com
    ChargeQrResponse:
      type: object
      required:
        - TerminalKey
        - Amount
        - OrderId
        - Success
        - PaymentId
        - ErrorCode
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Amount:
          description: |
            Сумма в копейках
          type: number
          maxLength: 20
          example: 100000
        OrderId:
          description: |
            Идентификатор заказа в системе Мерчанта
          type: string
          maxLength: 36
          example: '21050'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Статус платежа 

            Получает в ответе 1 из 3 статусов:
            * CONFIRMED - Если платеж выполнен
            * REJECTED - Если платеж не выполнен
            * FORM SHOWED - Если форма оплаты пока что только отображается, и клиент ещё не успел провести оплату
          type: string
          maxLength: 20
          enum:
            - CONFIRMED
            - REJECTED
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        ErrorCode:
          description: |
            Код ошибки.
            * "0" - успешная операция;
            * "3013" - рекуррентные платежи недоступны;
            * "3015" - неверный статус AccountToken.
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: Неверные параметры
        Details:
          description: |
            Подробное описание ошибки
          type: string
        Currency:
          type: number
          description: Код валюты по ISO 4217
          example: 643
    SbpPayTest:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          type: string
          maxLength: 20
          example: TinkoffBankTest
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        Token:
          description: |
            Подпись запроса
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
        IsDeadlineExpired:
          description: |
            Признак эмуляции отказа проведения платежа Банком по таймауту. По умолчанию не используется (эмуляция не требуется).
            * false – эмуляция не требуется
            * true – требуется эмуляция (не может быть использован вместе с IsRejected = true)
          type: boolean
          example: true
        IsRejected:
          description: |
            Признак эмуляции отказа Банка в проведении платежа По умолчанию не используется (эмуляция не требуется)
            * false – эмуляция не требуется
            * true – требуется эмуляция (не может быть использован вместе с IsDeadlineExpired = true)
          type: boolean
          example: false
    SbpPayTestResponse:
      type: object
      required:
        - Success
        - ErrorCode
        - Message
        - Details
      properties:
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
          maxLength: 255
          example: OK
        Details:
          description: |
            Подробное описание ошибки
          type: string
          example: '0'
    GetQRStateResponse_FULL:
      type: object
      required:
        - Success
        - ErrorCode
      properties:
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          enum:
            - true
            - false
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          example: '0'
        Status:
          description: |
            Статус платежа
            * Обязателен, если не произошло ошибки при получении статуса
          type: string
          example: CONFIRMED
        QrCancelCode:
          description: |
            Код ошибки возврата, полученный от СБП
          type: string
          example: I05043
        QrCancelMessage:
          description: |
            Дополнительное описание ошибки, прозошедшей при возврате по QR
          type: string
          example: У клиента нет расчетного счета в этом банке. Попробуйте вернуть деньги на счет этого клиента в другом банке
        OrderId:
          description: |
            Номер заказа в системе Мерчанта
          type: string
          example: '7830122'
        Amount:
          description: |
            Сумма отмены в копейках
          type: number
          example: 10000
        Message:
          description: |
            Краткое описание ошибки, произошедшей при запросе статуса
          type: string
          example: OK
    GetQRStateResponse_SDK:
      type: object
      required:
        - Success
        - ErrorCode
      properties:
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          enum:
            - true
            - false
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          example: '0'
        Status:
          description: |
            Статус платежа
            * Обязателен, если не произошло ошибки при получении статуса
          type: string
          example: CONFIRMED
        QrCancelCode:
          description: |
            Код ошибки возврата, полученный от СБП
          type: string
          example: I05043
        QrCancelMessage:
          description: |
            Дополнительное описание ошибки, прозошедшей при возврате по QR
          type: string
          example: У клиента нет расчетного счета в этом банке. Попробуйте вернуть деньги на счет этого клиента в другом банке
        OrderId:
          description: |
            Номер заказа в системе Мерчанта
          type: string
          example: '7830122'
        Amount:
          description: |
            Сумма отмены в копейках
          type: number
          example: 10000
        Message:
          description: |
            Краткое описание ошибки, произошедшей при запросе статуса
          type: string
          example: OK
    CheckOrder:
      type: object
      required:
        - TerminalKey
        - OrderId
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        OrderId:
          type: string
          description: |
            Номер заказа в системе Мерчанта.<br><i>Не является уникальным идентификатором.</i> 
          example: 21057
        Token:
          type: string
          description: Подпись запроса
    PaymentsCheckOrder:
      type: object
      description: Детали
      required:
        - PaymentId
        - Status
        - Success
        - ErrorCode
        - Message
      properties:
        PaymentId:
          description: |
            Уникальный идентификатор транзакции в системе Тинькофф Кассы
          type: string
          example: '124671934'
        Amount:
          description: |
            Сумма операции в копейках
          type: number
          example: 13660
        Status:
          description: |
            Статус операции
          type: string
          example: NEW
        RRN:
          description: |
            RRN операции
          type: string
          example: '12345678'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: string
          example: 'true'
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: number
          example: 0
        Message:
          description: |
            Краткое описание ошибки
          type: string
          example: None
    CheckOrder-2:
      type: object
      required:
        - Success
        - ErrorCode
        - TerminalKey
        - OrderId
        - Payments
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        OrderId:
          type: string
          description: Идентификатор заказа в системе Мерчанта
          example: '21057'
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: '0'
        Message:
          type: string
          description: Краткое описание ошибки
          example: OK
          maxLength: 255
        Details:
          type: string
          description: Подробное описание ошибки
          example: None
        Payments:
          type: object
          $ref: '#/components/schemas/PaymentsCheckOrder'
    SendClosingReceipt:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
        - Receipt
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        PaymentId:
          type: number
          description: Идентификатор платежа в системе Тинькофф Кассы
          example: 2304882
        Receipt:
          type: object
          description: Объект с данными чека
          oneOf:
            - $ref: '#/components/schemas/Receipt_FFD_12'
            - $ref: '#/components/schemas/Receipt_FFD_105'
        Token:
          type: string
          description: Подпись запроса
    SendClosingReceipt-2:
      type: object
      required:
        - Success
        - ErrorCode
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: '2304882'
        Message:
          type: string
          description: Краткое описание ошибки
          maxLength: 255
          example: Неверные параметры
    DataNotification:
      type: object
      description: Дополнительные параметры платежа, переданные при создании заказа. Явяляются обязательными для платежей «в Рассрочку»
      properties:
        Route:
          description: |
            Способ платежа
          type: string
          example: TCB
          enum:
            - TCB
        Source:
          description: |
            Источник платежа
          type: string
          example: Installment
          enum:
            - Installment
        CreditAmount:
          description: |
            Сумма выданного кредита в копейках
          type: string
          example: '10000'
    NotificationPayment:
      type: object
      description: |
        **Нотификация о платеже**
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        Amount:
          description: |
            Сумма в копейках
          type: number
          maxLength: 10
          example: 100000
        OrderId:
          description: |
            Идентификатор заказа в системе Мерчанта
          type: string
          maxLength: 36
          example: '21050'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Статус платежа
          type: string
          maxLength: 20
        PaymentId:
          description: |
            Уникальный идентификатор транзакции в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
        Details:
          description: |
            Подробное описание ошибки
          type: string
        RebillId:
          type: string
          maxLength: 20
          description: Идентификатор автоплатежа
          example: 3207469334
        CardId:
          description: |
            Идентификатор карты в системе Тинькофф Кассы
          type: string
          example: '10452089'
        Pan:
          type: string
          description: Замаскированный номер карты/Замаскированный номер телефона
        ExpDate:
          type: string
          description: |
            Срок действия карты
            В формате MMYY, где YY — две последние цифры года
          example: '0229'
        Token:
          description: |
            Подпись запроса. Формируется по такому же принципу, как и в случае
            запросов в Тинькофф Кассу
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
        DATA:
          type: object
          $ref: '#/components/schemas/DataNotification'
    NotificationAddCard:
      type: object
      description: |
        **Нотификации о привязке**

        Уведомления магазину о статусе выполнения метода привязки карты `AttachCard`.
        После успешного выполнения метода `AttachCard` Тинькофф Касса отправляет POST-запрос с информацией о привязке карты. Нотификация отправляется на ресурс Мерчанта на адрес `Notification URL` синхронно и ожидает ответа в течение 10 секунд. 

        После получения ответа или неполучения его за заданное время сервис переадресует клиента на `Success AddCard URL` или `Fail AddCard URL` в зависимости от результата привязки карты.
        В случае успешной обработки нотификации Мерчант должен вернуть ответ с телом сообщения: OK (без тегов и заглавными английскими буквами). <br>
        Если тело сообщения отлично от **OK**, любая нотификация считается неуспешной, и сервис будет повторно отправлять нотификацию раз в час в течение 24 часов. Если нотификация за это время так и не доставлена, она складывается в дамп.
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой 
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        CustomerKey:
          description: |
            Идентификатор клиента в системе Мерчанта
          type: string
          maxLength: 36
          example: testCustomer1234
        RequestKey:
          description: |
            Идентификатор запроса на привязку карты
          type: string
          format: uuid
          example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Статус привязки карты.
            Получает в ответе 1 из 2 статусов привязки:
              * COMPLETED - при одностадийной оплате
              * REJECTED - при двухстадийной оплате
          type: string
          maxLength: 20
          enum:
            - COMPLETED
            - REJECTED
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        RebillId:
          type: string
          maxLength: 20
          description: Идентификатор автоплатежа
          example: '3207469334'
        CardId:
          description: |
            Идентификатор карты в системе Тинькофф Кассы
          type: string
          example: '10452089'
        Pan:
          type: string
          description: Замаскированный номер карты
        ExpDate:
          type: string
          description: |
            Срок действия карты
            В формате MMYY, где YY — две последние цифры года
          example: '0229'
        Token:
          description: |
            Подпись запроса. Формируется по такому же принципу, как и в случае
            запросов в Тинькофф Кассу
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
    Receipt_FFD_12-2:
      type: object
      description: Объект с информацией о видах суммы платежа.
      properties:
        FfdVersion:
          description: |
            Версия ФФД.
            Возможные значения:
            * "FfdVersion": "1.2"
            * "FfdVersion": "1.05"
          type: string
        ClientInfo:
          description: |
            Информация по клиенту.
            * Обязателен для товаров с маркировкой. 
          $ref: '#/components/schemas/ClientInfo'
        Taxation:
          description: |
            Система налогообложения. Перечисление с
            возможными значениями:
            * "osn" - общая СН;
            * "usn_income" - упрощенная СН (доходы);
            * "usn_income_outcome" - упрощенная СН (доходы минус расходы);
            * "envd" - единый налог на вмененный доход;
            * "esn" - единый сельскохозяйственный налог;
            * "patent" - патентная СН.
          type: string
          enum:
            - osn
            - usn_income
            - usn_income_outcome
            - envd
            - esn
            - patent
          example: osn
        Email:
          description: |
            Электронная почта клиента
          type: string
          format: email
          maxLength: 64
          example: a@test.ru
        Phone:
          description: |
            Телефон клиента в формате +{Ц}
          type: string
          maxLength: 64
          example: '+79031234567'
        Customer:
          description: Идентификатор/Имя клиента
          type: string
        CustomerInn:
          description: ИНН клиента
          type: string
        Items:
          description: Массив, содержащий в себе информацию о товарах
          type: array
          items:
            $ref: '#/components/schemas/Items_FFD_12'
        Payments:
          description: |
            Объект c информацией о видах суммы платежа.
            * Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты
            "Безналичный".
            * Если передан объект **receipt.Payments**, то значение в **Electronic** должно быть равно итоговому значению
            Amount в методе **Init**. При этом сумма введенных значений по всем видам оплат, включая Electronic,
            должна быть равна сумме (Amount) всех товаров, переданных в объекте **receipt.Items**.
          type: array
          items:
            $ref: '#/components/schemas/Payments'
    Receipt_FFD_105-2:
      type: object
      description: Объект с информацией о видах суммы платежа.
      properties:
        Items:
          description: Массив позиций чека с информацией о товарах
          type: array
          items:
            $ref: '#/components/schemas/Items_FFD_105'
        FfdVersion:
          description: |
            Версия ФФД.
            Возможные значения:
            * "FfdVersion": "1.2"
            * "FfdVersion": "1.05"
            По умолчанию версия ФФД - 1.05
          type: string
          default: '1.05'
        Email:
          description: |
            Электронная почта клиента.
            Атрибут должен быть заполнен, если не передано значение 
            в атрибуте “Phone” 
          type: string
          format: email
          maxLength: 64
          example: a@test.ru
        Phone:
          description: |
            Телефон клиента в формате +{Ц}
          type: string
          maxLength: 64
          example: '+79031234567'
        Taxation:
          description: |
            Система налогообложения. Перечисление с
            возможными значениями:
            * "osn" - общая СН;
            * "usn_income" - упрощенная СН (доходы);
            * "usn_income_outcome" - упрощенная СН (доходы минус расходы);
            * "envd" - единый налог на вмененный доход;
            * "esn" - единый сельскохозяйственный налог;
            * "patent" - патентная СН.
          type: string
          enum:
            - osn
            - usn_income
            - usn_income_outcome
            - envd
            - esn
            - patent
          example: osn
        Payments:
          description: |
            Объект c информацией о видах суммы платежа.
            * Если объект не передан, будет автоматически указана итоговая сумма чека с видом оплаты
            "Безналичный".
            * Если передан объект **receipt.Payments**, то значение в **Electronic** должно быть равно итоговому значению
            Amount в методе **Init**. При этом сумма введенных значений по всем видам оплат, включая Electronic,
            должна быть равна сумме (Amount) всех товаров, переданных в объекте **receipt.Items**.
          type: array
          items:
            $ref: '#/components/schemas/Payments'
    NotificationFiscalization:
      type: object
      description: |
        **Нотификация о фискацизации**

        Если используется подключенная онлайн касса, по результату фискализации будет
        отправлена нотификация с фискальными данными.
      properties:
        TerminalKey:
          description: |
            Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой
            при заведении терминала.
          type: string
          maxLength: 20
          example: TinkoffBankTest
        OrderId:
          description: |
            Идентификатор заказа в системе Мерчанта
          type: string
          maxLength: 36
          example: '21050'
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        Status:
          description: |
            Для нотификации о фискализации значение всегда RECEIPT
          type: string
          maxLength: 20
          default: RECEIPT
        PaymentId:
          description: |
            Идентификатор платежа в системе Тинькофф Кассы
          type: number
          maxLength: 20
          example: 13660
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        ErrorMessage:
          type: string
          description: Описание ошибки, если она произошла
        Amount:
          description: |
            Сумма в копейках
          type: number
          maxLength: 10
          example: 100000
        FiscalNumber:
          type: integer
          description: Номер чека в смене
        ShiftNumber:
          type: integer
          description: Номер смены
        ReceiptDatetime:
          type: string
          format: datetime
          description: Дата и время документа из ФН
        FnNumber:
          type: string
          description: Номер ФН
        EcrRegNumber:
          type: string
          description: Регистрационный номер ККТ
        FiscalDocumentNumber:
          type: integer
          description: Фискальный номер документа
        FiscalDocumentAttribute:
          type: integer
          description: Фискальный признак документа
        Receipt:
          type: object
          description: Состав чека
          oneOf:
            - $ref: '#/components/schemas/Receipt_FFD_12-2'
            - $ref: '#/components/schemas/Receipt_FFD_105-2'
        Type:
          type: string
          description: Признак расчета
        Token:
          description: |
            Подпись запроса. Формируется по такому же принципу, как и в случае
            запросов в Тинькофф Кассу
          type: string
          example: 7241ac8307f349afb7bb9dda760717721bbb45950b97c67289f23d8c69cc7b96
        Ofd:
          type: string
          description: Наименование оператора фискальных данных
        Url:
          type: string
          description: URL адрес с копией чека
        QrCodeUrl:
          type: string
          description: URL адрес с QR кодом для проверки чека в ФНС
        CalculationPlace:
          type: string
          description: Место осуществления расчетов
        CashierName:
          type: string
          description: Имя кассира
        SettlePlace:
          type: string
          description: Место нахождения (установки) ККМ
    NotificationQr:
      type: object
      description: |
        **Нотификация о статусе привязки счета по QR**

        После привязки счета по QR, магазину отправляется статус привязки и токен.
        Нотификация будет приходить по статусам **ACTIVE** и **INACTIVE**
      required:
        - TerminalKey
        - RequestKey
        - Status
        - NotificationType
        - Success
        - ErrorCode
        - Token
      properties:
        TerminalKey:
          type: string
          description: |
            Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        RequestKey:
          description: |
            Идентификатор запроса на привязку счета
          type: string
          format: uuid
          example: 13021e10-a3ed-4f14-bcd1-823b5ac37390
        AccountToken:
          type: string
          description: |
            Идентификатор привязки счета,
            назначаемый банком-эмитентом
          example: 70LSS7DN18SJQRS10006DNPKLJL24B05
        BankMemberId:
          description: |
            Идентификатор банка-эмитента клиента, который будет
            совершать оплату по привязаному счету -
            заполнен, если статус ACTIVE
          type: string
          example: '5555'
        BankMemberName:
          description: |
            Наименование банка-эмитента, заполнен если BankMemberId
            передан
          type: string
        NotificationType:
          type: string
          description: Тип нотификации, всегда константа «LINKACCOUNT»
          default: LINKACCOUNT
        Success:
          description: |
            Успешность прохождения запроса (true/false)
          type: boolean
          example: true
        ErrorCode:
          description: |
            Код ошибки. «0» в случае успеха
          type: string
          maxLength: 20
          example: '0'
        Message:
          description: |
            Краткое описание ошибки
          type: string
        Token:
          type: string
          description: |
            Подпись запроса. Формируется по такому же
            принципу, как и в случае запросов в Тинькофф Кассу
          example: 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
        Status:
          type: string
          description: Cтатус привязки
          example: ACTIVE
    GetDeepLink:
      type: object
      required:
        - TerminalKey
        - PaymentId
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой при заведении терминала
          example: bestforu
        PaymentId:
          type: integer
          description: Уникальный идентификатор транзакции в системе Банка
          example: 2559680770
        Token:
          type: string
          description: Подпись запроса
          example: 871199b37f207f0c4f721a37cdcc71dfcea880b4a4b85e3cf852c5dc1e99a8d6
    GetDeepLinkResponse:
      type: object
      required:
        - Success
        - ErrorCode
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          enum:
            - true
            - false
          example: 'true'
        ErrorCode:
          type: string
          description: Код ошибки, «0» - если успешно
          example: 0
        Deeplink:
          type: string
          description: Сформированный и подписанный JWT-токеном deeplink
          example: mirpay://pay.mironline.ru/inapp/eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImprdSI6Imh0dHBzOi8vc3AtbnNway5la2Fzc2lyLmNvbS9qd2tzL0IwMDAwMDAwMC1qd2tzLmp«Протокол MIRPAY EACQ с PCI DSS»28zb24iLCJraWQiOiIxMDAwIn0.eyJpYXQiOjE2NjA1NTMwNzksImlzcyI6IjAwMDAwMDAwIiwib3JkZXJJZCI6IjEyMzQ1NiIsInN1bSI6MTAwMDAsImN1ciI6NjQzLCJtZWRpYSI6IkRMIiwicnVybCI6Imh0dHBzOi8vbWVyY2hhbnQvYXBpL3YxL2luYXBwL21lcmNoYW50cy8wMDAwMDAwMC9vcmRlcnMvMTIzNDU2In0.rk0LjOtx3RR9hboAiVQopZvKzIQpu0SGg2wlt6a1LJN1gQ7NEqcXY0NXfjmhqbPdv8BnDonhXMWLoi9GK4wT8-P_TOfRnqz5JfA4crvtVaD6yvmfkmdFMsFjTDDJfcsaMlqblVw2u5De3SU9oCNKWaWLUUg7i6gRtTCFdvPc1XDlB7WUd_doHLVEV4s5kP1jmArXMBxo1EpJk3pZ-KHmxFeKLjf47NQuNzRv0wZKTgkHk252lXX9QBCE_uTBvV477YZ6FTqAXh9vP1zGiSG6Elel3EKMVxUNkMAhHIACxwmOGRpGsPv0WFlw1T0y44Q7paV_t6st6vlHO3RXYfbA
        Message:
          type: string
          description: Краткое описание ошибки
        Details:
          type: string
          description: Подробное описание ошибки
    GetTerminalPayMethods:
      type: object
      required:
        - TerminalKey
        - Paysource
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала. Выдается Мерчанту Тинькофф Кассой при заведении терминала
          example: TinkoffBankTest
        Paysource:
          type: string
          description: |
            Тип подключения:   
            - API   
            - SDK
          example: API
    Paymethod:
      type: object
      required:
        - PayMethod
      description: Перечень доступных методов оплаты
      properties:
        PayMethod:
          type: string
          description: |
            Доступные методы оплаты:
            * TinkoffPay
            * YandexPay
            * ApplePay
            * GooglePay
            * SBP
            * MirPay
          example: TinkoffPay
        Params:
          type: object
          description: Перечень параметров подключения в формате ключзначение
          example: |
            "Version":2.0,
            "CustomButton":{
              "СustomButtonType":"percentButton",
              "Percent":5,}
    GetTerminalPayMethodsResponse:
      type: object
      required:
        - Success
        - ErrorCode
        - TerminalInfo
        - TerminalInfo.AddCardScheme
        - TerminalInfo.TokenRequired
        - TerminalInfo.InitTokenRequired
        - PayMethod
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          enum:
            - true
            - false
          example: 'true'
        ErrorCode:
          type: string
          description: Код ошибки, «0» - если успешно
          example: '0'
        Message:
          type: string
          description: Краткое описание ошибки
        Details:
          type: string
          description: Подробное описание ошибки
        TerminalInfo:
          type: object
          description: Характеристики терминала
        TerminalInfo.Paymethods:
          type: array
          description: Перечень доступных методов оплаты
          items:
            $ref: '#/components/schemas/Paymethod'
        TerminalInfo.AddCardScheme:
          type: boolean
          description: Признак возможности сохранения карт
          enum:
            - true
            - false
          example: 'false'
        TerminalInfo.TokenRequired:
          type: boolean
          description: Признак необходимости подписания токеном
          enum:
            - true
            - false
          example: 'true'
        TerminalInfo.InitTokenRequired:
          type: boolean
          description: Признак необходимости подписания токеном запроса /init
          enum:
            - true
            - false
          example: 'true'
    by_url:
      title: на URL
      required:
        - TerminalKey
        - CallbackUrl
        - PaymentIdList
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        CallbackUrl:
          type: string
          description: URL сервиса получения справок
          example: https://www.tinkoff.ru
        PaymentIdList:
          type: array
          description: Json-массив, содержащий в себе перечень paymentID (уникальных идентификаторов в системе Тинькофф Кассы) c типом Number
          example:
            - 1201206437
            - 1201206442
          items:
            type: number
        Token:
          type: string
          description: Подпись запроса
          example: f2fdd7fec8225872590e1558b7ea258c75df8f300d808006c41ab540dd7514d9
    by_email:
      title: на E-mail
      required:
        - TerminalKey
        - PaymentIdList
        - EmailList
        - Token
      properties:
        TerminalKey:
          type: string
          description: Идентификатор терминала, выдается Мерчанту Тинькофф Кассой
          example: TinkoffBankTest
        PaymentIdList:
          type: array
          description: Json-массив, содержащий в себе перечень paymentID (уникальных идентификаторов в системе Тинькофф Кассы) c типом Number
          example:
            - 1201206437
            - 1201206442
          items:
            type: number
        EmailList:
          type: array
          description: Json-массив, содержащий перечень E-mail с типом String
          example:
            - test1@tinkoff.ru
            - test2@tinkoff.ru
          items:
            type: string
            properties:
              Email:
                type: string
        Token:
          type: string
          description: Подпись запроса
          example: f2fdd7fec8225872590e1558b7ea258c75df8f300d808006c41ab540dd7514d9
    PaymentIdListForGCO:
      type: object
      description: Json-массив с объектами, содержащими информацию по запросу
      required:
        - Success
        - ErrorCode
        - Message
        - PaymentId
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: 0
        Message:
          type: string
          description: Сервисное сообщение
          example: Запрос на отправку документа принят
        PaymentId:
          type: number
          description: Идентификатор операции
          example: 1201206442
    response_by_url:
      title: Ответ на запрос (URL)
      type: object
      required:
        - Success
        - ErrorCode
        - PaymentIdList
        - RequestList
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: 0
        Message:
          type: string
          description: Краткое описание ошибки
          example: OK
        PaymentIdList:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdListForGCO'
    response_by_email:
      title: Ответ на запрос (e-mail)
      type: object
      required:
        - Success
        - ErrorCode
        - PaymentIdList
        - RequestList
      properties:
        Success:
          type: boolean
          description: Успешность прохождения запроса (true/false)
          example: true
        ErrorCode:
          type: string
          description: Код ошибки. «0» в случае успеха
          example: 0
        Message:
          type: string
          description: Краткое описание ошибки
          example: OK
        PaymentIdList:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdListForGCO'
x-tagGroups:
  - name: Приём платежей по картам
    tags:
      - Сценарии оплаты по карте
      - Стандартный платёж
      - Двухстадийный платёж
      - Прохождение 3DS
      - Рекуррентный платёж
      - Отмена платежа
  - name: Другие способы приёма платежей
    tags:
      - Оплата через СБП
      - Оплата через Tinkoff Pay
      - Оплата через Yandex Pay
      - Оплата через SberPay
  - name: Привязка карты
    tags:
      - Сценарии привязки карты
      - Методы работы с клиентами
      - Методы работы с картами
  - name: Нотификации Мерчанта об операциях
    tags:
      - Нотификации Мерчанта об операциях
  - name: Фискализация
    tags:
      - Общая информация
      - Подключение Онлайн-кассы
      - Методы работы с чеками
      - Описание дополнительных объектов
  - name: Тестирование и  обработка ошибок
    tags:
      - Коды ошибок
      - Типовые ошибки Онлайн-кассы
      - Тестовые карты
  - name: Возмещения и реестры
    tags:
      - Правила расчета возмещений по операционному реестру
      - Формат реестра
  - name: Обратная связь
    tags:
      - Обратная связь
  - name: История изменений
    tags:
      - История изменений
